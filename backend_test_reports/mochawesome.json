{
  "stats": {
    "suites": 52,
    "tests": 201,
    "passes": 201,
    "pending": 0,
    "failures": 0,
    "start": "2021-01-09T19:00:37.978Z",
    "end": "2021-01-09T19:00:46.306Z",
    "duration": 8328,
    "testsRegistered": 201,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "42130e99-4720-4863-9157-d67a7ad93d62",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "66c2e32b-3674-4ee4-a739-d0ab1c23676d",
          "title": "Tests on dao_category.ts",
          "fullFile": "/home/yohan/Loaner/tests/daotests/dao_category_test.ts",
          "file": "/tests/daotests/dao_category_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests on dao_category.ts\"",
              "fullTitle": "Tests on dao_category.ts \"before all\" hook in \"Tests on dao_category.ts\"",
              "timedOut": false,
              "duration": 207,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "97cc6a88-ce14-4569-ab90-d4822d0566ab",
              "parentUUID": "66c2e32b-3674-4ee4-a739-d0ab1c23676d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1509abe8-8b43-4421-837b-ade01c481472",
              "title": "Tests on getAll() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array of category",
                  "fullTitle": "Tests on dao_category.ts Tests on getAll() method The result type must be an array of category",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllCategories();\n    expect(Array.isArray(result)).to.equal(true);\n});",
                  "err": {},
                  "uuid": "1d448e3a-78c9-41f1-a404-c306023ee6c1",
                  "parentUUID": "1509abe8-8b43-4421-837b-ade01c481472",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The result must not be empty, there have to be at least one category in the program",
                  "fullTitle": "Tests on dao_category.ts Tests on getAll() method The result must not be empty, there have to be at least one category in the program",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllCategories();\n    assert.isAbove(result.length, 0, \"There must be at least one category\");\n});",
                  "err": {},
                  "uuid": "1529a593-d7bd-486d-8542-d8f63b094ff5",
                  "parentUUID": "1509abe8-8b43-4421-837b-ade01c481472",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The names of the categories must not exceed 255 characters",
                  "fullTitle": "Tests on dao_category.ts Tests on getAll() method The names of the categories must not exceed 255 characters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllCategories();\n    result.forEach(function (category) {\n        assert.isBelow(category.getName().length, 255);\n    });\n});",
                  "err": {},
                  "uuid": "2df20d7e-1a78-47b5-b665-3a6100e499d2",
                  "parentUUID": "1509abe8-8b43-4421-837b-ade01c481472",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ID of Categories must be strictly postives",
                  "fullTitle": "Tests on dao_category.ts Tests on getAll() method ID of Categories must be strictly postives",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllCategories();\n    result.forEach(function (category) {\n        assert.isAbove(category.getID(), 0);\n    });\n});",
                  "err": {},
                  "uuid": "85f548fd-d311-44c2-b1ec-8d5813cce06e",
                  "parentUUID": "1509abe8-8b43-4421-837b-ade01c481472",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d448e3a-78c9-41f1-a404-c306023ee6c1",
                "1529a593-d7bd-486d-8542-d8f63b094ff5",
                "2df20d7e-1a78-47b5-b665-3a6100e499d2",
                "85f548fd-d311-44c2-b1ec-8d5813cce06e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "65a3ecac-51ed-4283-81dd-995a1cfcb88a",
              "title": "Tests on getByName() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be a category",
                  "fullTitle": "Tests on dao_category.ts Tests on getByName() method The result type must be a category",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetCategory(\"Téléphones\");\n    assert.isTrue(result instanceof category_1.default);\n});",
                  "err": {},
                  "uuid": "79c5a5a7-4c2c-42a9-8445-81233303664d",
                  "parentUUID": "65a3ecac-51ed-4283-81dd-995a1cfcb88a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The database must have the smartphone category",
                  "fullTitle": "Tests on dao_category.ts Tests on getByName() method The database must have the smartphone category",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetCategory(\"Téléphones\");\n    assert.isNotNull(result);\n});",
                  "err": {},
                  "uuid": "1af01221-0217-4b8d-8f42-53b89e59a9e7",
                  "parentUUID": "65a3ecac-51ed-4283-81dd-995a1cfcb88a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The names of the category must not have any number",
                  "fullTitle": "Tests on dao_category.ts Tests on getByName() method The names of the category must not have any number",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetCategory(\"Téléphones\");\n    expect(result.getName()).not.to.match(/^([0-9_])$/);\n});",
                  "err": {},
                  "uuid": "05e40960-1d4d-4952-b574-cf8737dbba45",
                  "parentUUID": "65a3ecac-51ed-4283-81dd-995a1cfcb88a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The names of the category must contain only letters or '-'",
                  "fullTitle": "Tests on dao_category.ts Tests on getByName() method The names of the category must contain only letters or '-'",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetCategory(\"Téléphones\");\n    expect(result.getName()).to.match(/^[a-zA-Z\\-éèà]{0,255}$/);\n});",
                  "err": {},
                  "uuid": "c9211d94-a499-4e61-8757-38712fe724ed",
                  "parentUUID": "65a3ecac-51ed-4283-81dd-995a1cfcb88a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79c5a5a7-4c2c-42a9-8445-81233303664d",
                "1af01221-0217-4b8d-8f42-53b89e59a9e7",
                "05e40960-1d4d-4952-b574-cf8737dbba45",
                "c9211d94-a499-4e61-8757-38712fe724ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "985752bf-5b8e-4dcd-81ef-62cb099635cc",
              "title": "Tests on getLastId() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "There must be at least one id, or there would be no categories",
                  "fullTitle": "Tests on dao_category.ts Tests on getLastId() method There must be at least one id, or there would be no categories",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetLastId();\n    assert.isNotNull(result);\n});",
                  "err": {},
                  "uuid": "0f819a6c-24fd-4273-a00f-ac72b98d116d",
                  "parentUUID": "985752bf-5b8e-4dcd-81ef-62cb099635cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Last Id created must be positive",
                  "fullTitle": "Tests on dao_category.ts Tests on getLastId() method Last Id created must be positive",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetLastId();\n    assert.isAbove(result, 0);\n});",
                  "err": {},
                  "uuid": "9a0ef693-05e5-4607-9294-193448f1260e",
                  "parentUUID": "985752bf-5b8e-4dcd-81ef-62cb099635cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f819a6c-24fd-4273-a00f-ac72b98d116d",
                "9a0ef693-05e5-4607-9294-193448f1260e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "92bb25e5-8367-4278-a378-e84146c2e6f4",
              "title": "Tests on addCategory() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A new category added should be seen in a SELECT request later",
                  "fullTitle": "Tests on dao_category.ts Tests on addCategory() method A new category added should be seen in a SELECT request later",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    DAOCategTested.addCategory(new category_1.default(9999, \"TestCategory\"));\n    const result = yield resultGetCategory(\"TestCategory\");\n    assert.isNotNull(result);\n    expect(result.getID()).to.equal(9999);\n    expect(result.getName()).to.equal(\"TestCategory\");\n});",
                  "err": {},
                  "uuid": "3847c06f-570b-45aa-a704-5efa1b87318f",
                  "parentUUID": "92bb25e5-8367-4278-a378-e84146c2e6f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3847c06f-570b-45aa-a704-5efa1b87318f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 39,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "154d0254-b519-4dda-8dbd-53eb389a1748",
              "title": "Tests on deleteCategory() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A deleted category should not be in a query later",
                  "fullTitle": "Tests on dao_category.ts Tests on deleteCategory() method A deleted category should not be in a query later",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(yield DAOCategTested.deleteCategory.bind(DAOCategTested, 9999)).not.to.throw(Error);\n});",
                  "err": {},
                  "uuid": "578513b0-5776-49f8-981b-adfc243c5e6e",
                  "parentUUID": "154d0254-b519-4dda-8dbd-53eb389a1748",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The category we tried to added, should throw an error at its deletion, or it is deleted from the database",
                  "fullTitle": "Tests on dao_category.ts Tests on deleteCategory() method The category we tried to added, should throw an error at its deletion, or it is deleted from the database",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOCategTested.deleteCategory(-1)).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "29ddacc6-821d-420a-bd6e-00f2cafbf25a",
                  "parentUUID": "154d0254-b519-4dda-8dbd-53eb389a1748",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "578513b0-5776-49f8-981b-adfc243c5e6e",
                "29ddacc6-821d-420a-bd6e-00f2cafbf25a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "73b33550-35d2-4e9b-aecc-e1c10c1b7683",
          "title": "Tests onf dao_device.ts",
          "fullFile": "/home/yohan/Loaner/tests/daotests/dao_device_test.ts",
          "file": "/tests/daotests/dao_device_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests onf dao_device.ts\"",
              "fullTitle": "Tests onf dao_device.ts \"before all\" hook in \"Tests onf dao_device.ts\"",
              "timedOut": false,
              "duration": 61,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "4b2a3bd6-0b42-46e7-91cf-18a4e3343f59",
              "parentUUID": "73b33550-35d2-4e9b-aecc-e1c10c1b7683",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dd40071f-476c-4d21-843c-e714adb0f4b9",
              "title": "Tests on getAll() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array of devices",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The result type must be an array of devices",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    expect(Array.isArray(result)).to.equal(true);\n});",
                  "err": {},
                  "uuid": "0903ccb7-7b88-4ed0-8e03-9eff0d1c0073",
                  "parentUUID": "dd40071f-476c-4d21-843c-e714adb0f4b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must match an existing category",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must match an existing category",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const existingCategories = yield DAOcat.getAll();\n    const result = yield resultAllDevices();\n    let check = false;\n    //Testing for every device that its category is member of the categories of the database\n    result.map((device) => {\n        existingCategories.map((category) => {\n            if (device.getCategoryID() == category.getID())\n                check = true;\n        });\n    });\n    assert.isTrue(check);\n});",
                  "err": {},
                  "uuid": "64ea0cdc-b5a4-4ed6-b287-8676a804db87",
                  "parentUUID": "dd40071f-476c-4d21-843c-e714adb0f4b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must have a five character reference",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must have a five character reference",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        assert.equal(device.getRef().length, 5);\n    });\n});",
                  "err": {},
                  "uuid": "9f34aad7-fe48-486f-a767-8298d580d31b",
                  "parentUUID": "dd40071f-476c-4d21-843c-e714adb0f4b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must not have an empty name or a null name",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must not have an empty name or a null name",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        assert.isNotNull(device.getName());\n        assert.isAbove(device.getName().length, 0);\n    });\n});",
                  "err": {},
                  "uuid": "011199e6-cafe-4175-9875-40618b39f5b6",
                  "parentUUID": "dd40071f-476c-4d21-843c-e714adb0f4b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must have a version number between 3 and 15 characters",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must have a version number between 3 and 15 characters",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        assert.isAbove(device.getVersion().length, 2);\n        assert.isBelow(device.getVersion().length, 16);\n    });\n});",
                  "err": {},
                  "uuid": "593078e3-d667-48c4-ba63-27eb5a37be2a",
                  "parentUUID": "dd40071f-476c-4d21-843c-e714adb0f4b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must have a correct version number",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must have a correct version number",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        expect(device.getVersion()).to.match(/^[0-9]*\\.[0-9]*$/);\n    });\n});",
                  "err": {},
                  "uuid": "d72365d0-455c-4b86-804a-03e34dd64cef",
                  "parentUUID": "dd40071f-476c-4d21-843c-e714adb0f4b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must have a grater version than 0.0",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must have a grater version than 0.0",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        const numbers = device.getVersion().split('.');\n        assert.isAbove(parseInt(numbers[0]), 0);\n        assert.isAbove(parseInt(numbers[1]), -1);\n    });\n});",
                  "err": {},
                  "uuid": "6ecaff47-f3b8-4b57-97bd-20fa13b247f5",
                  "parentUUID": "dd40071f-476c-4d21-843c-e714adb0f4b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices with a phone number must have a correct phone number",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices with a phone number must have a correct phone number",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        if (device.getPhone()) {\n            expect(device.getPhone()).to.match(/^\\+?[0-9]{0,15}$/);\n        }\n    });\n});",
                  "err": {},
                  "uuid": "c9bdae6c-6412-4c6d-b9e2-634241b6d45c",
                  "parentUUID": "dd40071f-476c-4d21-843c-e714adb0f4b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0903ccb7-7b88-4ed0-8e03-9eff0d1c0073",
                "64ea0cdc-b5a4-4ed6-b287-8676a804db87",
                "9f34aad7-fe48-486f-a767-8298d580d31b",
                "011199e6-cafe-4175-9875-40618b39f5b6",
                "593078e3-d667-48c4-ba63-27eb5a37be2a",
                "d72365d0-455c-4b86-804a-03e34dd64cef",
                "6ecaff47-f3b8-4b57-97bd-20fa13b247f5",
                "c9bdae6c-6412-4c6d-b9e2-634241b6d45c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 55,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84170902-4a90-46e0-aaf2-da4a18ca1411",
              "title": "Tests on get() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Tests on get() method\"",
                  "fullTitle": "Tests onf dao_device.ts Tests on get() method \"before each\" hook in \"Tests on get() method\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            device = yield DAOTested.get(\"AN001\");\n            existingCategories = yield DAOcat.getAll();\n        })",
                  "err": {},
                  "uuid": "7f43350b-5b01-421a-a7e6-185a2322824d",
                  "parentUUID": "84170902-4a90-46e0-aaf2-da4a18ca1411",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The device must match an existing category",
                  "fullTitle": "Tests onf dao_device.ts Tests on get() method The device must match an existing category",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let check = false;\n//Testing that its category is member of the categories of the database\nexistingCategories.forEach(function (category) {\n    if (device.getCategoryID() == category.getID())\n        check = true;\n});\nassert.isTrue(check);",
                  "err": {},
                  "uuid": "4ad5b03b-2963-4898-80e6-4b2d5ae70e38",
                  "parentUUID": "84170902-4a90-46e0-aaf2-da4a18ca1411",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The device must have a five character reference",
                  "fullTitle": "Tests onf dao_device.ts Tests on get() method The device must have a five character reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(device.getRef().length, 5);",
                  "err": {},
                  "uuid": "4d41e0cf-fcd3-40fc-8794-b8b40bc5f0cc",
                  "parentUUID": "84170902-4a90-46e0-aaf2-da4a18ca1411",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The device must not have an empty name or a null name",
                  "fullTitle": "Tests onf dao_device.ts Tests on get() method The device must not have an empty name or a null name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.isNotNull(device.getName());\nassert.isAbove(device.getName().length, 0);",
                  "err": {},
                  "uuid": "0de2a0cd-2880-4fe1-9c62-5b653e388c20",
                  "parentUUID": "84170902-4a90-46e0-aaf2-da4a18ca1411",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The device must have a version number between 3 and 15 characters",
                  "fullTitle": "Tests onf dao_device.ts Tests on get() method The device must have a version number between 3 and 15 characters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.isAbove(device.getVersion().length, 2);\nassert.isBelow(device.getVersion().length, 16);",
                  "err": {},
                  "uuid": "60b82466-a8b2-4f24-b564-38548520d978",
                  "parentUUID": "84170902-4a90-46e0-aaf2-da4a18ca1411",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The device must have a correct version number",
                  "fullTitle": "Tests onf dao_device.ts Tests on get() method The device must have a correct version number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(device.getVersion()).to.match(/^[0-9]*\\.[0-9]*$/);",
                  "err": {},
                  "uuid": "b41f1458-11fe-4fba-a9b7-a80351ab8ef8",
                  "parentUUID": "84170902-4a90-46e0-aaf2-da4a18ca1411",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The device must have a grater version than 0.0",
                  "fullTitle": "Tests onf dao_device.ts Tests on get() method The device must have a grater version than 0.0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const numbers = device.getVersion().split('.');\nassert.isAbove(parseInt(numbers[0]), 0);\nassert.isAbove(parseInt(numbers[1]), -1);",
                  "err": {},
                  "uuid": "8344fe57-763c-4a2c-8baf-d21006c57f90",
                  "parentUUID": "84170902-4a90-46e0-aaf2-da4a18ca1411",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The device with a phone number must have a correct phone number",
                  "fullTitle": "Tests onf dao_device.ts Tests on get() method The device with a phone number must have a correct phone number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (device.getPhone()) {\n    expect(device.getPhone()).to.match(/^\\+?[0-9]{0,15}$/);\n}",
                  "err": {},
                  "uuid": "88393e84-578b-44fc-889a-9587024b0c60",
                  "parentUUID": "84170902-4a90-46e0-aaf2-da4a18ca1411",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ad5b03b-2963-4898-80e6-4b2d5ae70e38",
                "4d41e0cf-fcd3-40fc-8794-b8b40bc5f0cc",
                "0de2a0cd-2880-4fe1-9c62-5b653e388c20",
                "60b82466-a8b2-4f24-b564-38548520d978",
                "b41f1458-11fe-4fba-a9b7-a80351ab8ef8",
                "8344fe57-763c-4a2c-8baf-d21006c57f90",
                "88393e84-578b-44fc-889a-9587024b0c60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6e2e4be6-d44e-4147-ac94-92c82d3ba44a",
              "title": "Tests on addDevice() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Adding a compliant device should not throw exception, and the added device must be seen in queries",
                  "fullTitle": "Tests onf dao_device.ts Tests on addDevice() method Adding a compliant device should not throw exception, and the added device must be seen in queries",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    //This device is compliant to the specifications\n    expect(DAOTested.addDevice(new device_1.default(\"test1\", 1, \"Téléphones\", \"First test\", \"1.0\", \"\", \"0778787878\"))).not.to.be.rejected;\n    const result = yield DAOTested.get(\"test1\");\n    assert.isNotNull(result);\n    expect(result.getRef()).to.equal(\"test1\");\n    expect(result.getCategoryID()).to.equal(1);\n    expect(result.getName()).to.equal(\"First test\");\n    expect(result.getVersion()).to.equal(\"1.0\");\n    expect(result.getPhoto()).to.equal(\"\");\n    expect(result.getPhone()).to.equal(\"0778787878\");\n});",
                  "err": {},
                  "uuid": "a75d5291-9672-4ba8-8201-4390952a9438",
                  "parentUUID": "6e2e4be6-d44e-4147-ac94-92c82d3ba44a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a75d5291-9672-4ba8-8201-4390952a9438"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 27,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f08523e0-f384-49fd-9ad3-d7f8cfad9614",
              "title": "Tests on deleteDevice() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deleting the compliant device should not throw an error, and the devices should not be queryable",
                  "fullTitle": "Tests onf dao_device.ts Tests on deleteDevice() method Deleting the compliant device should not throw an error, and the devices should not be queryable",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.deleteDevice(\"test1\")).not.to.be.rejected;\n});",
                  "err": {},
                  "uuid": "e3604333-54ae-4003-b778-0e2a338299c6",
                  "parentUUID": "f08523e0-f384-49fd-9ad3-d7f8cfad9614",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deleting all the invalid devices should throw an error, or they were created earlier",
                  "fullTitle": "Tests onf dao_device.ts Tests on deleteDevice() method Deleting all the invalid devices should throw an error, or they were created earlier",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.deleteDevice(\"test\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test33\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test4\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test5\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test6\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test7\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test8\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test9\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test10\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test11\")).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "da098b9d-1316-4697-b38d-a8b0eb20afb6",
                  "parentUUID": "f08523e0-f384-49fd-9ad3-d7f8cfad9614",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3604333-54ae-4003-b778-0e2a338299c6",
                "da098b9d-1316-4697-b38d-a8b0eb20afb6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e291bbfa-cb44-41fd-948e-54c735e2e609",
              "title": "Tests on borrowDevice() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Adding a reservation with existing ID throw an error",
                  "fullTitle": "Tests onf dao_device.ts Tests on borrowDevice() method Adding a reservation with existing ID throw an error",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const reservationID = yield DAObooking.getLastId();\n    expect(DAOTested.borrowDevice([new reservation_1.default(reservationID, \"TESTB\", \"ABCDEFG\", startDate, endDate)])).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "3623890e-7be0-46d2-b379-dc92d2353230",
                  "parentUUID": "e291bbfa-cb44-41fd-948e-54c735e2e609",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Booking a device should throw error",
                  "fullTitle": "Tests onf dao_device.ts Tests on borrowDevice() method Booking a device should throw error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const reservationID = yield DAObooking.getLastId();\n    expect(DAOTested.borrowDevice([new reservation_1.default(reservationID + 1, \"TESTB\", \"ABCDEFG\", startDate, endDate)])).to.not.be.rejected;\n});",
                  "err": {},
                  "uuid": "beb67087-d3ad-408a-aaa2-27fb7e0c0173",
                  "parentUUID": "e291bbfa-cb44-41fd-948e-54c735e2e609",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3623890e-7be0-46d2-b379-dc92d2353230",
                "beb67087-d3ad-408a-aaa2-27fb7e0c0173"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "49a76c25-03d6-4644-b9b7-99ebd12ecf06",
              "title": "Tests on getDevicesByFilter() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Research with empty filters should throw error",
                  "fullTitle": "Tests onf dao_device.ts Tests on getDevicesByFilter() method Research with empty filters should throw error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.getDevicesByFilter(\"\", \"\", -1)).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "410c9502-752c-41ad-ba01-641f4b1f2b20",
                  "parentUUID": "49a76c25-03d6-4644-b9b7-99ebd12ecf06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Checking if all the filters works well",
                  "fullTitle": "Tests onf dao_device.ts Tests on getDevicesByFilter() method Checking if all the filters works well",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield DAOTested.addDevice.bind(DAOTested, new device_1.default(\"test1\", 1, \"Téléphones\", \"Test filters\", \"1.0\", \"\", \"0778787878\"));\n    let result = yield DAOTested.getDevicesByFilter(\"Test filters\", \"\", -1);\n    result.forEach(function (device) {\n        assert.equal(device.getName(), \"Test filters\");\n    });\n    result = yield DAOTested.getDevicesByFilter(\"\", \"test1\", -1);\n    result.forEach(function (device) {\n        assert.equal(device.getRef(), \"test1\");\n    });\n    result = yield DAOTested.getDevicesByFilter(\"\", \"\", 1);\n    expect(result.map((device) => { return device.getName(); })).to.have.members([\"Huawei P80\", \"Samsung Galaxy S1000\"]);\n    yield DAOTested.deleteDevice.bind(DAOTested, \"test1\");\n});",
                  "err": {},
                  "uuid": "ae4b3289-209d-4f17-aac6-e44a0b47a5a2",
                  "parentUUID": "49a76c25-03d6-4644-b9b7-99ebd12ecf06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "410c9502-752c-41ad-ba01-641f4b1f2b20",
                "ae4b3289-209d-4f17-aac6-e44a0b47a5a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c652ce8f-78d5-4fed-a7ac-dab098f0fc11",
          "title": "Tests on dao_reservation.ts",
          "fullFile": "/home/yohan/Loaner/tests/daotests/dao_reservation_test.ts",
          "file": "/tests/daotests/dao_reservation_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests on dao_reservation.ts\"",
              "fullTitle": "Tests on dao_reservation.ts \"before all\" hook in \"Tests on dao_reservation.ts\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "3f58261e-2f56-4baf-b5b4-f1b5a5be58e7",
              "parentUUID": "c652ce8f-78d5-4fed-a7ac-dab098f0fc11",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "17b298b7-7533-4b08-aa56-6e3e213a4715",
              "title": "Tests on getLastid() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The Id must be positive",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getLastid() method The Id must be positive",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getLastId();\n    assert.isAbove(result, 0);\n});",
                  "err": {},
                  "uuid": "321c72d3-359b-4f71-b4ae-274fa6c442ce",
                  "parentUUID": "17b298b7-7533-4b08-aa56-6e3e213a4715",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "321c72d3-359b-4f71-b4ae-274fa6c442ce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a745833-789f-42d4-9254-d14de0fe2e78",
              "title": "Tests on historyDevice() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The users of a reservation must be registered",
                  "fullTitle": "Tests on dao_reservation.ts Tests on historyDevice() method The users of a reservation must be registered",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const users = yield DAOuser.getAll();\n    const result = yield DAOTested.historyDevice(\"AN001\");\n    let check = false;\n    result.forEach(function (booking) {\n        users.forEach(function (user) {\n            if (booking.getUserID() == user.getId())\n                check = true;\n        });\n    });\n    assert.isTrue(check);\n});",
                  "err": {},
                  "uuid": "e5ce7dab-9e99-4ec4-916c-1fbade78a92a",
                  "parentUUID": "6a745833-789f-42d4-9254-d14de0fe2e78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices of a reservation must be registered",
                  "fullTitle": "Tests on dao_reservation.ts Tests on historyDevice() method The devices of a reservation must be registered",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const devices = yield DAOdevice.getAll();\n    const result = yield DAOTested.historyDevice(\"AN001\");\n    let check = false;\n    result.forEach(function (booking) {\n        devices.forEach(function (device) {\n            if (booking.getDevice().match(device.getRef()))\n                check = true;\n        });\n    });\n    assert.isTrue(check);\n});",
                  "err": {},
                  "uuid": "0f48532f-64cf-4518-9248-8a9d3032d399",
                  "parentUUID": "6a745833-789f-42d4-9254-d14de0fe2e78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The start date must be earlier than the two others",
                  "fullTitle": "Tests on dao_reservation.ts Tests on historyDevice() method The start date must be earlier than the two others",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.historyDevice(\"AN002\");\n    result.forEach(function (booking) {\n        assert.notDeepEqual(booking.getStartDate(), booking.getReturnDate());\n        assert.notDeepEqual(booking.getStartDate(), booking.getEndDate());\n        assert.isAbove(booking.getReturnDate().getTime(), booking.getStartDate().getTime());\n        assert.isAbove(booking.getEndDate().getTime(), booking.getStartDate().getTime());\n    });\n});",
                  "err": {},
                  "uuid": "abefa282-a4e3-432b-aad7-6b4f2170597e",
                  "parentUUID": "6a745833-789f-42d4-9254-d14de0fe2e78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5ce7dab-9e99-4ec4-916c-1fbade78a92a",
                "0f48532f-64cf-4518-9248-8a9d3032d399",
                "abefa282-a4e3-432b-aad7-6b4f2170597e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c62afe99-e9a8-421c-bef2-935a7a277b06",
              "title": "Tests on getUserHistory() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getUserHistory() method The result type must be an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUserHistory(\"HIJKLMN\");\n    assert.isTrue(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "176c1a6b-a77e-4c79-806c-9e7d08b505ab",
                  "parentUUID": "c62afe99-e9a8-421c-bef2-935a7a277b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The id reservation must be positive",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getUserHistory() method The id reservation must be positive",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUserHistory(\"HIJKLMN\");\n    result.forEach((reservation) => {\n        assert.isAbove(reservation.getID(), 0);\n    });\n});",
                  "err": {},
                  "uuid": "08250034-8513-4872-9ba2-99c3d4265fc6",
                  "parentUUID": "c62afe99-e9a8-421c-bef2-935a7a277b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The start date must be earlier than the two others",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getUserHistory() method The start date must be earlier than the two others",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUserHistory(\"ABCDEFG\");\n    result.forEach(function (booking) {\n        assert.notDeepEqual(booking.getStartDate(), booking.getReturnDate());\n        assert.notDeepEqual(booking.getStartDate(), booking.getEndDate());\n        if (!booking.getReturnDate()) {\n            assert.isAbove(booking.getReturnDate().getTime(), booking.getStartDate().getTime());\n        }\n        assert.isAbove(booking.getEndDate().getTime(), booking.getStartDate().getTime());\n    });\n});",
                  "err": {},
                  "uuid": "d41db937-9c8a-4d82-b1d3-38e77821b806",
                  "parentUUID": "c62afe99-e9a8-421c-bef2-935a7a277b06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "176c1a6b-a77e-4c79-806c-9e7d08b505ab",
                "08250034-8513-4872-9ba2-99c3d4265fc6",
                "d41db937-9c8a-4d82-b1d3-38e77821b806"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f9ad51b2-5ec0-4ea3-af46-2ca636da9955",
              "title": "Tests on getAllReservationsDevice() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getAllReservationsDevice() method The result type must be an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAllReservationsDevice(\"AN002\");\n    assert.isTrue(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "1fbba8e8-29fd-4ec0-b0b2-2782d30d5146",
                  "parentUUID": "f9ad51b2-5ec0-4ea3-af46-2ca636da9955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The id reservation must be positive",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getAllReservationsDevice() method The id reservation must be positive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAllReservationsDevice(\"AN002\");\n    result.forEach((reservation) => {\n        assert.isAbove(reservation.getID(), 0);\n    });\n});",
                  "err": {},
                  "uuid": "c414dfdd-bddc-494e-8e56-5a634e04d640",
                  "parentUUID": "f9ad51b2-5ec0-4ea3-af46-2ca636da9955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The start date must be earlier than the two others",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getAllReservationsDevice() method The start date must be earlier than the two others",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAllReservationsDevice(\"AN002\");\n    result.forEach(function (booking) {\n        assert.notDeepEqual(booking.getStartDate(), booking.getReturnDate());\n        assert.notDeepEqual(booking.getStartDate(), booking.getEndDate());\n        assert.isAbove(booking.getReturnDate().getTime(), booking.getStartDate().getTime());\n        assert.isAbove(booking.getEndDate().getTime(), booking.getStartDate().getTime());\n    });\n});",
                  "err": {},
                  "uuid": "b154bf3b-ecaf-4355-9137-b83d37c38fbd",
                  "parentUUID": "f9ad51b2-5ec0-4ea3-af46-2ca636da9955",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1fbba8e8-29fd-4ec0-b0b2-2782d30d5146",
                "c414dfdd-bddc-494e-8e56-5a634e04d640",
                "b154bf3b-ecaf-4355-9137-b83d37c38fbd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e3dd5c55-0e74-495c-9238-fc4bccdb0356",
              "title": "Tests on hasReservationWithInfos() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "An existing reservation must be seen in the database",
                  "fullTitle": "Tests on dao_reservation.ts Tests on hasReservationWithInfos() method An existing reservation must be seen in the database",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.hasReservationWithInfos(\"AN001\", new Date(2021, 0, 5), new Date(2021, 0, 8));\n    expect(result).to.be.true;\n});",
                  "err": {},
                  "uuid": "7574f53f-2287-4622-a197-aaae7516a469",
                  "parentUUID": "e3dd5c55-0e74-495c-9238-fc4bccdb0356",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "An inexisting reservation must not appear in the database",
                  "fullTitle": "Tests on dao_reservation.ts Tests on hasReservationWithInfos() method An inexisting reservation must not appear in the database",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(yield DAOTested.hasReservationWithInfos(\"AN003\", new Date(2021, 0, 5), new Date(2021, 0, 8))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN001\", new Date(2021, 0, 1), new Date(2021, 0, 4))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN001\", new Date(2021, 1, 9), new Date(2021, 1, 20))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN003\", new Date(2021, 0, 6), new Date(2021, 0, 8))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN003\", new Date(2021, 0, 5), new Date(2021, 1, 12))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN003\", new Date(2021, 2, 27), new Date(2021, 0, 8))).to.be.false;\n});",
                  "err": {},
                  "uuid": "78394917-e280-4490-b9f8-efb01da5dd16",
                  "parentUUID": "e3dd5c55-0e74-495c-9238-fc4bccdb0356",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7574f53f-2287-4622-a197-aaae7516a469",
                "78394917-e280-4490-b9f8-efb01da5dd16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1d749ac9-80fc-4518-a9e6-7bb697902ee9",
          "title": "Tests on dao_user.ts",
          "fullFile": "/home/yohan/Loaner/tests/daotests/dao_user_test.ts",
          "file": "/tests/daotests/dao_user_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests on dao_user.ts\"",
              "fullTitle": "Tests on dao_user.ts \"before all\" hook in \"Tests on dao_user.ts\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "13fa9fed-f7f5-4195-a3af-aec71bd3a7c1",
              "parentUUID": "1d749ac9-80fc-4518-a9e6-7bb697902ee9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "67cc27d1-bf77-4bf9-bce8-278c1d69c9bc",
              "title": "Tests on getAll() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array of user",
                  "fullTitle": "Tests on dao_user.ts Tests on getAll() method The result type must be an array of user",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAll();\n    expect(Array.isArray(result)).to.equal(true);\n});",
                  "err": {},
                  "uuid": "ece2b476-df97-4703-8a1f-bddae9020fa3",
                  "parentUUID": "67cc27d1-bf77-4bf9-bce8-278c1d69c9bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The users must have a 7 characters ID",
                  "fullTitle": "Tests on dao_user.ts Tests on getAll() method The users must have a 7 characters ID",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAll();\n    result.map((user) => {\n        assert.equal(user.getId().length, 7);\n    });\n});",
                  "err": {},
                  "uuid": "b476fe38-f639-4c2e-a36d-49f0c4460f6a",
                  "parentUUID": "67cc27d1-bf77-4bf9-bce8-278c1d69c9bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The users must not have empty names or surname",
                  "fullTitle": "Tests on dao_user.ts Tests on getAll() method The users must not have empty names or surname",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAll();\n    result.map((user) => {\n        assert.isNotEmpty(user.getFirstName());\n        assert.isNotEmpty(user.getLastName());\n    });\n});",
                  "err": {},
                  "uuid": "54338498-7a03-49fa-a3a6-ac5973f82a66",
                  "parentUUID": "67cc27d1-bf77-4bf9-bce8-278c1d69c9bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The users must have a valid email",
                  "fullTitle": "Tests on dao_user.ts Tests on getAll() method The users must have a valid email",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAll();\n    result.map((user) => {\n        assert.match(user.getEmail(), /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/);\n    });\n});",
                  "err": {},
                  "uuid": "4017d976-082f-4c3a-8834-1fff3ffbdf57",
                  "parentUUID": "67cc27d1-bf77-4bf9-bce8-278c1d69c9bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ece2b476-df97-4703-8a1f-bddae9020fa3",
                "b476fe38-f639-4c2e-a36d-49f0c4460f6a",
                "54338498-7a03-49fa-a3a6-ac5973f82a66",
                "4017d976-082f-4c3a-8834-1fff3ffbdf57"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e837caea-7e67-45c7-8fed-1dc4730d4805",
              "title": "Tests on getUser() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The user get must not have empty name or surname",
                  "fullTitle": "Tests on dao_user.ts Tests on getUser() method The user get must not have empty name or surname",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUser(\"ABCDEFG\");\n    assert.isNotEmpty(result.getFirstName());\n    assert.isNotEmpty(result.getLastName());\n});",
                  "err": {},
                  "uuid": "f78149c0-974f-423a-818e-c7660cfe0e73",
                  "parentUUID": "e837caea-7e67-45c7-8fed-1dc4730d4805",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The user must have a valid email",
                  "fullTitle": "Tests on dao_user.ts Tests on getUser() method The user must have a valid email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUser(\"ABCDEFG\");\n    assert.match(result.getEmail(), /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/);\n});",
                  "err": {},
                  "uuid": "15f50f52-95ca-4b1e-b885-2613ed1749ea",
                  "parentUUID": "e837caea-7e67-45c7-8fed-1dc4730d4805",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f78149c0-974f-423a-818e-c7660cfe0e73",
                "15f50f52-95ca-4b1e-b885-2613ed1749ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5080d5fc-5b17-47f8-8126-8a9e02adbff7",
              "title": "Tests on getLastId() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The last id must not be empty",
                  "fullTitle": "Tests on dao_user.ts Tests on getLastId() method The last id must not be empty",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getLastId();\n    assert.isNotEmpty(result.getId());\n});",
                  "err": {},
                  "uuid": "e5bc94f5-3da6-44ec-8c8b-1837e909273b",
                  "parentUUID": "5080d5fc-5b17-47f8-8126-8a9e02adbff7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5bc94f5-3da6-44ec-8c8b-1837e909273b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ace49a83-a77f-4441-9c42-8a2dcd40f674",
              "title": "Tests on addUser() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "An added user must be seen in a query",
                  "fullTitle": "Tests on dao_user.ts Tests on addUser() method An added user must be seen in a query",
                  "timedOut": false,
                  "duration": 592,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.addUser(usertest, \"test\")).not.to.be.rejected;\n    const result = yield DAOTested.getUser(\"EEEEEEE\");\n    assert.equal(result.getFirstName(), \"Tester\");\n    assert.equal(result.getLastName(), \"Testing\");\n    assert.equal(result.getEmail(), \"Testtest@gmail.com\");\n    assert.isFalse(result.isAdmin());\n});",
                  "err": {},
                  "uuid": "a936efc6-e905-455e-85a9-353788b6c8b0",
                  "parentUUID": "ace49a83-a77f-4441-9c42-8a2dcd40f674",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a936efc6-e905-455e-85a9-353788b6c8b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 592,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ed5fdefd-a56c-4108-b5fa-22ad9dac543a",
              "title": "Tests on updateUser() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The modifications made on a user must be seen in queries later",
                  "fullTitle": "Tests on dao_user.ts Tests on updateUser() method The modifications made on a user must be seen in queries later",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    usertest.setAdmin(true);\n    usertest.setEmail(\"secondtest@gmail.com\");\n    usertest.setFirstName(\"Yohan\");\n    usertest.setLastName(\"Rousseau\");\n    usertest.setTemporaryPassword(true);\n    expect(DAOTested.updateUser(usertest)).not.to.be.rejected;\n    const result = yield DAOTested.getUser(usertest.getId());\n    assert.equal(result.getFirstName(), \"Yohan\");\n    assert.equal(result.getLastName(), \"Rousseau\");\n    assert.equal(result.getEmail(), \"secondtest@gmail.com\");\n    assert.isTrue(result.isAdmin());\n    assert.isTrue(result.hasTemporaryPassword());\n});",
                  "err": {},
                  "uuid": "1b79c6e5-34aa-45e4-b933-cd7bfc4d720c",
                  "parentUUID": "ed5fdefd-a56c-4108-b5fa-22ad9dac543a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b79c6e5-34aa-45e4-b933-cd7bfc4d720c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b034adf3-369a-471d-b46f-9e4291bd1733",
              "title": "Tests on authenticate",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Checking the actual password should not throw error",
                  "fullTitle": "Tests on dao_user.ts Tests on authenticate Checking the actual password should not throw error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.checkUser(usertest.getEmail(), \"test\")).not.to.be.rejected;\n});",
                  "err": {},
                  "uuid": "d5fe0089-027c-49c6-a918-50320e61ef7f",
                  "parentUUID": "b034adf3-369a-471d-b46f-9e4291bd1733",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Changing the password and checking it should not throw error",
                  "fullTitle": "Tests on dao_user.ts Tests on authenticate Changing the password and checking it should not throw error",
                  "timedOut": false,
                  "duration": 156,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.changePassword(usertest.getEmail(), \"newtest\")).not.to.be.rejected;\n    expect(DAOTested.checkUser(usertest.getEmail(), \"newtest\")).not.to.be.rejected;\n});",
                  "err": {},
                  "uuid": "4dcd471d-236e-46aa-991f-40a206669e6b",
                  "parentUUID": "b034adf3-369a-471d-b46f-9e4291bd1733",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5fe0089-027c-49c6-a918-50320e61ef7f",
                "4dcd471d-236e-46aa-991f-40a206669e6b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 158,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9e29bef9-d712-4c7a-925b-95f037ab4211",
              "title": "Tests on deleteUser() method",
              "fullFile": "/home/yohan/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A deleted user cannot be seen in a query",
                  "fullTitle": "Tests on dao_user.ts Tests on deleteUser() method A deleted user cannot be seen in a query",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.deleteUser(usertest.getId())).not.to.be.rejected;\n    expect(DAOTested.getUser(usertest.getId())).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "9439d895-a8d6-48af-a85c-2c335e4f277d",
                  "parentUUID": "9e29bef9-d712-4c7a-925b-95f037ab4211",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9439d895-a8d6-48af-a85c-2c335e4f277d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "983ef23d-59d7-4a3a-baaa-63dd517415f2",
          "title": "Tests on category.ts",
          "fullFile": "/home/yohan/Loaner/tests/modeltests/categorytest.ts",
          "file": "/tests/modeltests/categorytest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Category Creation",
              "fullTitle": "Tests on category.ts Category Creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.assert.equal(catTested.getID(), 1);\nchai_1.assert.equal(catTested.getName(), \"Test\");\nchai_1.assert.isArray(catTested.getDevices());",
              "err": {},
              "uuid": "db47c6ae-cf5b-4bec-8530-4d861854a833",
              "parentUUID": "983ef23d-59d7-4a3a-baaa-63dd517415f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Id Modification",
              "fullTitle": "Tests on category.ts Id Modification",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "catTested.setID(2);\nchai_1.assert.equal(catTested.getID(), 2);",
              "err": {},
              "uuid": "d790f1ba-eeb2-4ecb-95c1-fc12f47685d9",
              "parentUUID": "983ef23d-59d7-4a3a-baaa-63dd517415f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Name Modification",
              "fullTitle": "Tests on category.ts Name Modification",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "catTested.setName(\"Lafont\");\nchai_1.assert.equal(catTested.getName(), \"Lafont\");",
              "err": {},
              "uuid": "ac557153-2853-4b13-84d0-5bc723cc4407",
              "parentUUID": "983ef23d-59d7-4a3a-baaa-63dd517415f2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "eb9ff3fa-7c59-44a1-8079-535d4749e355",
              "title": "Testing the exceptions",
              "fullFile": "/home/yohan/Loaner/tests/modeltests/categorytest.ts",
              "file": "/tests/modeltests/categorytest.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Setting too long names should throw exception",
                  "fullTitle": "Tests on category.ts Testing the exceptions Setting too long names should throw exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringTest = \"testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestvtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestvtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest\";\nchai_1.expect(catTested.setName.bind(catTested, stringTest)).to.throw(Error);",
                  "err": {},
                  "uuid": "e6f2ef7f-0072-41df-b37d-1958d6747a1c",
                  "parentUUID": "eb9ff3fa-7c59-44a1-8079-535d4749e355",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting empty names should throw exception",
                  "fullTitle": "Tests on category.ts Testing the exceptions Setting empty names should throw exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringTest = \"\";\nchai_1.expect(catTested.setName.bind(catTested, stringTest)).to.throw(Error);",
                  "err": {},
                  "uuid": "7882a4c7-cce5-4918-872f-82465876e0f3",
                  "parentUUID": "eb9ff3fa-7c59-44a1-8079-535d4749e355",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6f2ef7f-0072-41df-b37d-1958d6747a1c",
                "7882a4c7-cce5-4918-872f-82465876e0f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "db47c6ae-cf5b-4bec-8530-4d861854a833",
            "d790f1ba-eeb2-4ecb-95c1-fc12f47685d9",
            "ac557153-2853-4b13-84d0-5bc723cc4407"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dd87a332-debd-4a4f-b095-99545868e08a",
          "title": "Test on device.ts",
          "fullFile": "/home/yohan/Loaner/tests/modeltests/devicetests.ts",
          "file": "/tests/modeltests/devicetests.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Device Creation test",
              "fullTitle": "Test on device.ts Device Creation test",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.assert.equal(devTested.getRef(), \"test1\");\nchai_1.assert.equal(devTested.getCategoryID(), 2);\nchai_1.assert.equal(devTested.getCategoryName(), \"Ordinateur\");\nchai_1.assert.equal(devTested.getName(), \"PremierTest\");\nchai_1.assert.equal(devTested.getVersion(), \"1.0\");\nchai_1.assert.equal(devTested.getPhoto(), \"url\");\nchai_1.assert.equal(devTested.getPhone(), \"0707070707\");\nchai_1.assert.isTrue(Array.isArray(devTested.getLockDays()));",
              "err": {},
              "uuid": "0811fd31-7665-4186-8854-dec53a006699",
              "parentUUID": "dd87a332-debd-4a4f-b095-99545868e08a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Device Modification test",
              "fullTitle": "Test on device.ts Device Modification test",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "devTested.setRef(\"modif\");\n//devTested.setCategory(\"Phone\");\ndevTested.setName(\"ModifTest\");\ndevTested.setVersion(\"1.1\");\ndevTested.setPhoto(\"url2\");\ndevTested.setPhone(\"0707070708\");\nchai_1.assert.equal(devTested.getRef(), \"modif\");\n//assert.equal(devTested.getCategory(),\"Phone\");\nchai_1.assert.equal(devTested.getName(), \"ModifTest\");\nchai_1.assert.equal(devTested.getVersion(), \"1.1\");\nchai_1.assert.equal(devTested.getPhoto(), \"url2\");\nchai_1.assert.equal(devTested.getPhone(), \"0707070708\");",
              "err": {},
              "uuid": "8f95ed90-9ccb-4eb8-9cfc-292e56ad3737",
              "parentUUID": "dd87a332-debd-4a4f-b095-99545868e08a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5de026b5-898b-457b-a285-c5f36b95ee1d",
              "title": "Constructor tests",
              "fullFile": "/home/yohan/Loaner/tests/modeltests/devicetests.ts",
              "file": "/tests/modeltests/devicetests.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create a device with invalid references should throw error",
                  "fullTitle": "Test on device.ts Constructor tests Create a device with invalid references should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(() => new device_1.default(\"test\", 1, \"Téléphones\", \"Second test\", \"1.0\", \"\", \"0778787878\")).to.throw(Error);\nchai_1.expect(() => new device_1.default(\"test33\", 1, \"Téléphones\", \"Third test\", \"1.0\", \"\", \"0778787878\")).to.throw(Error);",
                  "err": {},
                  "uuid": "a62c7a55-e7f8-45a9-95cc-0003d9c9a80d",
                  "parentUUID": "5de026b5-898b-457b-a285-c5f36b95ee1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a device with an invalid phone number should throw an error",
                  "fullTitle": "Test on device.ts Constructor tests Create a device with an invalid phone number should throw an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    chai_1.expect(() => new device_1.default(\"test8\", 1, \"Téléphones\", \"Phone Number test\", \"1.0\", \"\", \"+337787878787878787878787878\")).to.throw(Error);\n    chai_1.expect(() => new device_1.default(\"test9\", 1, \"Téléphones\", \"Phone Number test\", \"1.0\", \"\", \"++3377878787878\")).to.throw(Error);\n    chai_1.expect(() => new device_1.default(\"test10\", 1, \"Téléphones\", \"Phone Number test\", \"1.0\", \"\", \"842+54161654196\")).to.throw(Error);\n    chai_1.expect(() => new device_1.default(\"test11\", 1, \"Téléphones\", \"Phone Number test\", \"1.0\", \"\", \"te\")).to.throw(Error);\n});",
                  "err": {},
                  "uuid": "932fa69c-1231-4261-bfdd-907671d2cf8a",
                  "parentUUID": "5de026b5-898b-457b-a285-c5f36b95ee1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a62c7a55-e7f8-45a9-95cc-0003d9c9a80d",
                "932fa69c-1231-4261-bfdd-907671d2cf8a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "20ac8b9f-7858-4030-8db5-022dfc167b32",
              "title": "Testing the exceptions",
              "fullFile": "/home/yohan/Loaner/tests/modeltests/devicetests.ts",
              "file": "/tests/modeltests/devicetests.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Setting a reference with higher or lower lenght than 5 should throw error",
                  "fullTitle": "Test on device.ts Testing the exceptions Setting a reference with higher or lower lenght than 5 should throw error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringRef = \"reftest\";\nchai_1.expect(devTested.setRef.bind(devTested, stringRef)).to.throw(\"Invalid reference\");",
                  "err": {},
                  "uuid": "e325de41-17b7-4b95-8ee8-963ec8731302",
                  "parentUUID": "20ac8b9f-7858-4030-8db5-022dfc167b32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting a wrong size Name should throw error",
                  "fullTitle": "Test on device.ts Testing the exceptions Setting a wrong size Name should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let stringName = \"\";\nchai_1.expect(devTested.setName.bind(devTested, stringName)).to.throw(\"Invalid name\");\nstringName = \"trentre et plus de noms pour le test\";\nchai_1.expect(devTested.setName.bind(devTested, stringName)).to.throw(\"Invalid name\");",
                  "err": {},
                  "uuid": "a1a01ef8-079b-4886-9487-5cb7ba834009",
                  "parentUUID": "20ac8b9f-7858-4030-8db5-022dfc167b32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting a wrong version number size should throw an error",
                  "fullTitle": "Test on device.ts Testing the exceptions Setting a wrong version number size should throw an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let stringVersion = \"1\";\nchai_1.expect(devTested.setVersion.bind(devTested, stringVersion)).to.throw(\"Invalid version\");\nstringVersion = \"11\";\nchai_1.expect(devTested.setVersion.bind(devTested, stringVersion)).to.throw(\"Invalid version\");\nstringVersion = \"8888888888.88888888888888888888\";\nchai_1.expect(devTested.setVersion.bind(devTested, stringVersion)).to.throw(\"Invalid version\");",
                  "err": {},
                  "uuid": "c0bbb9b2-dc3e-4b78-a5bf-ede29003e17e",
                  "parentUUID": "20ac8b9f-7858-4030-8db5-022dfc167b32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting a too long phone number size should throw an error",
                  "fullTitle": "Test on device.ts Testing the exceptions Setting a too long phone number size should throw an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringVersion = \"123456789102487\"; //15 caracters maximum, to respect the +999787878787 form\nchai_1.expect(devTested.setPhone.bind(devTested, stringVersion)).to.throw(\"Invalid phone\");",
                  "err": {},
                  "uuid": "9105fe81-be87-416c-ae9a-6066f3311ae2",
                  "parentUUID": "20ac8b9f-7858-4030-8db5-022dfc167b32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e325de41-17b7-4b95-8ee8-963ec8731302",
                "a1a01ef8-079b-4886-9487-5cb7ba834009",
                "c0bbb9b2-dc3e-4b78-a5bf-ede29003e17e",
                "9105fe81-be87-416c-ae9a-6066f3311ae2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "0811fd31-7665-4186-8854-dec53a006699",
            "8f95ed90-9ccb-4eb8-9cfc-292e56ad3737"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2b15e3be-c1a5-467f-b05c-97a35ed096bb",
          "title": "Tests on reservation.ts",
          "fullFile": "/home/yohan/Loaner/tests/modeltests/reservationtest.ts",
          "file": "/tests/modeltests/reservationtest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Reservation creation",
              "fullTitle": "Tests on reservation.ts Reservation creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservation = new reservation_1.default(1, deviceRef, userId, startDate, endDate, returnDate);\nchai_1.assert.equal(reservation.getID(), 1);\nchai_1.assert.equal(reservation.getDevice(), deviceRef);\nchai_1.assert.equal(reservation.getUserID(), userId);\nchai_1.assert.equal(reservation.getStartDate().toISOString(), startDateISO);\nchai_1.assert.equal(reservation.getEndDate().toISOString(), endDateISO);\nchai_1.assert.isTrue(reservation.hasReturnDate());\nchai_1.assert.equal(reservation.getReturnDate().toISOString(), returnDateISO);",
              "err": {},
              "uuid": "bc5fb1fb-65a6-41b4-b063-61a5d40d9865",
              "parentUUID": "2b15e3be-c1a5-467f-b05c-97a35ed096bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reservation creation without return date",
              "fullTitle": "Tests on reservation.ts Reservation creation without return date",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservation = new reservation_1.default(1, deviceRef, userId, startDate, endDate);\nchai_1.assert.equal(reservation.getID(), 1);\nchai_1.assert.equal(reservation.getDevice(), deviceRef);\nchai_1.assert.equal(reservation.getUserID(), userId);\nchai_1.assert.equal(reservation.getStartDate().toISOString(), startDateISO);\nchai_1.assert.equal(reservation.getEndDate().toISOString(), endDateISO);\nchai_1.assert.isFalse(reservation.hasReturnDate());\nchai_1.expect(reservation.getReturnDate).to.throw(Error);",
              "err": {},
              "uuid": "0b101327-1a88-465c-a45c-0297e76757c7",
              "parentUUID": "2b15e3be-c1a5-467f-b05c-97a35ed096bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid ID throw an error",
              "fullTitle": "Tests on reservation.ts Invalid ID throw an error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => new reservation_1.default(-1, deviceRef, userId, startDate, endDate)).to.throw(\"Invalid ID\");",
              "err": {},
              "uuid": "180bb134-4661-415b-b076-238f8cc24620",
              "parentUUID": "2b15e3be-c1a5-467f-b05c-97a35ed096bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid device reference throw an error",
              "fullTitle": "Tests on reservation.ts Invalid device reference throw an error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => new reservation_1.default(1, \"PASVALIDE\", userId, startDate, endDate)).to.throw(\"Invalid device reference\");",
              "err": {},
              "uuid": "80af358c-b297-4740-ac3b-6161f9050064",
              "parentUUID": "2b15e3be-c1a5-467f-b05c-97a35ed096bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid user id throw an error",
              "fullTitle": "Tests on reservation.ts Invalid user id throw an error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => new reservation_1.default(1, deviceRef, \"INVAL\", startDate, endDate)).to.throw(\"Invalid user id\");",
              "err": {},
              "uuid": "f8b209af-79bb-433f-bb48-8f95658b05ca",
              "parentUUID": "2b15e3be-c1a5-467f-b05c-97a35ed096bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid start date throw an error",
              "fullTitle": "Tests on reservation.ts Invalid start date throw an error",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errMsg = \"Invalid start date\";\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, \"jenefaispas10caracteresdelong\", endDate)).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, \"0123456789\", endDate)).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, \"0-20-0\", endDate)).to.throw(errMsg);",
              "err": {},
              "uuid": "21be7d30-5497-47f8-b418-08b18c0e9898",
              "parentUUID": "2b15e3be-c1a5-467f-b05c-97a35ed096bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid end date throw an error",
              "fullTitle": "Tests on reservation.ts Invalid end date throw an error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errMsg = \"Invalid end date\";\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, \"jenefaispas10caracteresdelong\")).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, \"0123456789\")).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, \"0-20-0\")).to.throw(errMsg);",
              "err": {},
              "uuid": "2f493fa8-152a-4a13-a6dd-554fc9453596",
              "parentUUID": "2b15e3be-c1a5-467f-b05c-97a35ed096bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid return date throw an error",
              "fullTitle": "Tests on reservation.ts Invalid return date throw an error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errMsg = \"Invalid return date\";\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, endDate, \"jenefaispas10caracteresdelong\")).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, endDate, \"0123456789\")).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, endDate, \"0-20-0\")).to.throw(errMsg);",
              "err": {},
              "uuid": "a7b50ed8-d79d-46c2-b18c-40c64bc8fcfd",
              "parentUUID": "2b15e3be-c1a5-467f-b05c-97a35ed096bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return date can be empty",
              "fullTitle": "Tests on reservation.ts Return date can be empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservation = new reservation_1.default(1, deviceRef, userId, startDate, endDate, \"\");\nchai_1.assert.isFalse(reservation.hasReturnDate());",
              "err": {},
              "uuid": "a76c33f6-61ab-4f61-b9d8-51c82770b198",
              "parentUUID": "2b15e3be-c1a5-467f-b05c-97a35ed096bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Method convertDate works",
              "fullTitle": "Tests on reservation.ts Method convertDate works",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.assert.equal(reservation_1.default.convertDate(new Date(startDateISO)), startDate);\nchai_1.assert.equal(reservation_1.default.convertDate(new Date(endDateISO)), endDate);\nchai_1.assert.equal(reservation_1.default.convertDate(new Date(returnDateISO)), returnDate);",
              "err": {},
              "uuid": "82efcc2f-8972-43ab-8371-ea4f85065bad",
              "parentUUID": "2b15e3be-c1a5-467f-b05c-97a35ed096bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Generate correct lockDays",
              "fullTitle": "Tests on reservation.ts Generate correct lockDays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservation1 = new reservation_1.default(1, deviceRef, userId, startDate, endDate);\nchai_1.expect(reservation1.getLockDays()).to.deep.equal([startDate, endDate]);\nconst reservation2 = new reservation_1.default(1, deviceRef, userId, startDate, returnDate);\nchai_1.expect(reservation2.getLockDays()).to.deep.equal([startDate, returnDate]);",
              "err": {},
              "uuid": "27184a22-3fca-46c0-8ab5-a3422b6a34f1",
              "parentUUID": "2b15e3be-c1a5-467f-b05c-97a35ed096bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bc5fb1fb-65a6-41b4-b063-61a5d40d9865",
            "0b101327-1a88-465c-a45c-0297e76757c7",
            "180bb134-4661-415b-b076-238f8cc24620",
            "80af358c-b297-4740-ac3b-6161f9050064",
            "f8b209af-79bb-433f-bb48-8f95658b05ca",
            "21be7d30-5497-47f8-b418-08b18c0e9898",
            "2f493fa8-152a-4a13-a6dd-554fc9453596",
            "a7b50ed8-d79d-46c2-b18c-40c64bc8fcfd",
            "a76c33f6-61ab-4f61-b9d8-51c82770b198",
            "82efcc2f-8972-43ab-8371-ea4f85065bad",
            "27184a22-3fca-46c0-8ab5-a3422b6a34f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "456b0219-d25f-4e54-bb53-548a72d3ced9",
          "title": "Tests on user.ts",
          "fullFile": "/home/yohan/Loaner/tests/modeltests/usertest.ts",
          "file": "/tests/modeltests/usertest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "User Creation test",
              "fullTitle": "Tests on user.ts User Creation test",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.assert.equal(userTested.getId(), \"0000001\");\nchai_1.assert.equal(userTested.getFirstName(), \"Test\");\nchai_1.assert.equal(userTested.getLastName(), \"UserTest\");\nchai_1.assert.equal(userTested.getEmail(), \"test@gmail.com\");\nchai_1.assert.equal(userTested.isAdmin(), false);",
              "err": {},
              "uuid": "c92acc2b-b077-4faf-a046-b48d36ff811e",
              "parentUUID": "456b0219-d25f-4e54-bb53-548a72d3ced9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Device Modification test",
              "fullTitle": "Tests on user.ts Device Modification test",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userTested.setId(\"0000002\");\nuserTested.setFirstName(\"Milan\");\nuserTested.setLastName(\"Bourbe\");\nuserTested.setEmail(\"MilanBourbe@guez.com\");\nuserTested.setAdmin(true);\nchai_1.assert.equal(userTested.getId(), \"0000002\");\nchai_1.assert.equal(userTested.getFirstName(), \"Milan\");\nchai_1.assert.equal(userTested.getLastName(), \"Bourbe\");\nchai_1.assert.equal(userTested.getEmail(), \"MilanBourbe@guez.com\");\nchai_1.assert.equal(userTested.isAdmin(), true);",
              "err": {},
              "uuid": "0fc1dc18-0db9-4325-bc78-c68ac5c554ea",
              "parentUUID": "456b0219-d25f-4e54-bb53-548a72d3ced9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "61add25d-0e5f-43b1-a809-4e5dc1099f77",
              "title": "Testing exceptions",
              "fullFile": "/home/yohan/Loaner/tests/modeltests/usertest.ts",
              "file": "/tests/modeltests/usertest.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Setting an ID lower than 0 should throw an error",
                  "fullTitle": "Tests on user.ts Testing exceptions Setting an ID lower than 0 should throw an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(userTested.setId.bind(userTested, \"-1\")).to.throw(Error);",
                  "err": {},
                  "uuid": "9be40d56-7780-4a04-ad19-c4e13aea4867",
                  "parentUUID": "61add25d-0e5f-43b1-a809-4e5dc1099f77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting an empty firstname should throw an error",
                  "fullTitle": "Tests on user.ts Testing exceptions Setting an empty firstname should throw an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(userTested.setFirstName.bind(userTested, \"\")).to.throw(Error);",
                  "err": {},
                  "uuid": "34f0d52b-ed7e-4ef7-a561-46ff80741856",
                  "parentUUID": "61add25d-0e5f-43b1-a809-4e5dc1099f77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting an empty Lastname should throw an error",
                  "fullTitle": "Tests on user.ts Testing exceptions Setting an empty Lastname should throw an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(userTested.setLastName.bind(userTested, \"\")).to.throw(Error);",
                  "err": {},
                  "uuid": "1ec701aa-9722-4191-884b-0536fbf46455",
                  "parentUUID": "61add25d-0e5f-43b1-a809-4e5dc1099f77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting an invalid email form should throw an error",
                  "fullTitle": "Tests on user.ts Testing exceptions Setting an invalid email form should throw an error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(userTested.setEmail.bind(userTested, \"test@test@test.fr\")).to.throw(Error);\nchai_1.expect(userTested.setEmail.bind(userTested, \"testtesttest.fr\")).to.throw(Error);\nchai_1.expect(userTested.setEmail.bind(userTested, \"test@.test@test.fr\")).to.throw(Error);\nchai_1.expect(userTested.setEmail.bind(userTested, \"test.test@testfr\")).to.throw(Error);",
                  "err": {},
                  "uuid": "f375fcde-e3dd-47c6-9a66-43a69b204c54",
                  "parentUUID": "61add25d-0e5f-43b1-a809-4e5dc1099f77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9be40d56-7780-4a04-ad19-c4e13aea4867",
                "34f0d52b-ed7e-4ef7-a561-46ff80741856",
                "1ec701aa-9722-4191-884b-0536fbf46455",
                "f375fcde-e3dd-47c6-9a66-43a69b204c54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "c92acc2b-b077-4faf-a046-b48d36ff811e",
            "0fc1dc18-0db9-4325-bc78-c68ac5c554ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "29080907-714d-4b9d-8e4a-63805f0048ed",
          "title": "POST /auth/login",
          "fullFile": "/home/yohan/Loaner/tests/routestests/auth_route_test.ts",
          "file": "/tests/routestests/auth_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"POST /auth/login\"",
              "fullTitle": "POST /auth/login \"before all\" hook in \"POST /auth/login\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "1fab87b9-6bcb-417d-93c4-f1549b2a7e36",
              "parentUUID": "29080907-714d-4b9d-8e4a-63805f0048ed",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "authentification works",
              "fullTitle": "POST /auth/login authentification works",
              "timedOut": false,
              "duration": 231,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/login')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"lilianb@mail.fr\",\n    password: \"fromage\"\n})\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    var _a;\n    if (!res.body.auth)\n        throw new Error(\"No field 'auth' specified\");\n    if (!res.body.token || res.body.token.length == 0)\n        throw new Error(\"Empty token returned\");\n    if (!res.body.user || res.body.user.id !== \"ABCDEFG\")\n        throw new Error(\"Invalid user returned\");\n    const token = ((_a = res.body.token) === null || _a === void 0 ? void 0 : _a.toString()) || \"\";\n    const decoded = jwt.verify(token, config.jwtSecret);\n    const id = decoded['id'] || \"\";\n    if (!decoded || id != \"ABCDEFG\")\n        throw new Error(\"Invalid token\");\n})\n    .end(done);",
              "err": {},
              "uuid": "31576947-9975-4693-92f4-1806d122e5bc",
              "parentUUID": "29080907-714d-4b9d-8e4a-63805f0048ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when already have a token",
              "fullTitle": "POST /auth/login responds error when already have a token",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/login')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    email: \"lilianb@mail.fr\",\n    password: \"fromage\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"You already have a token\"\n}, done);",
              "err": {},
              "uuid": "80778ecc-7ff3-48d9-9142-c270d41684be",
              "parentUUID": "29080907-714d-4b9d-8e4a-63805f0048ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when email is invalid",
              "fullTitle": "POST /auth/login responds error when email is invalid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/login')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"paslabonneadresse@mail.fr\",\n    password: \"fromage\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name or password\"\n}, done);",
              "err": {},
              "uuid": "039137e6-379d-4a24-823c-26016d971fbe",
              "parentUUID": "29080907-714d-4b9d-8e4a-63805f0048ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when password is invalid",
              "fullTitle": "POST /auth/login responds error when password is invalid",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/login')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"lilianb@mail.fr\",\n    password: \"paslebonmdp\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name or password\"\n}, done);",
              "err": {},
              "uuid": "32e49d3c-7309-426f-a380-c20512328933",
              "parentUUID": "29080907-714d-4b9d-8e4a-63805f0048ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31576947-9975-4693-92f4-1806d122e5bc",
            "80778ecc-7ff3-48d9-9142-c270d41684be",
            "039137e6-379d-4a24-823c-26016d971fbe",
            "32e49d3c-7309-426f-a380-c20512328933"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 376,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "921c1920-163d-4cd7-92fc-3a71678383e1",
          "title": "POST /auth/password/change",
          "fullFile": "/home/yohan/Loaner/tests/routestests/auth_route_test.ts",
          "file": "/tests/routestests/auth_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /auth/password/change\"",
              "fullTitle": "POST /auth/password/change \"before each\" hook in \"POST /auth/password/change\"",
              "timedOut": false,
              "duration": 78,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "fb3d1e19-935b-4e97-9cf3-37486ff23f8a",
              "parentUUID": "921c1920-163d-4cd7-92fc-3a71678383e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error if new password is empty",
              "fullTitle": "POST /auth/password/change responds error if new password is empty",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/password/change')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"lilianb@mail.fr\",\n    oldPassword: \"fromage\",\n    newPassword: \"\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"New password can't be empty\"\n}, done);",
              "err": {},
              "uuid": "de451d7a-6492-4993-b34e-65e6e8eb1195",
              "parentUUID": "921c1920-163d-4cd7-92fc-3a71678383e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error if old password is incorrect",
              "fullTitle": "POST /auth/password/change responds error if old password is incorrect",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/password/change')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"lilianb@mail.fr\",\n    oldPassword: \"paslebon\",\n    newPassword: \"salade\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name or old password\"\n}, done);",
              "err": {},
              "uuid": "572353dc-f5fd-48c5-8e7e-c9d3d7f785ed",
              "parentUUID": "921c1920-163d-4cd7-92fc-3a71678383e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error if email is incorrect",
              "fullTitle": "POST /auth/password/change responds error if email is incorrect",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/password/change')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"paslebon@mail.fr\",\n    oldPassword: \"fromage\",\n    newPassword: \"salade\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name or old password\"\n}, done);",
              "err": {},
              "uuid": "cbf95360-5db0-4721-b2a2-2913d80c420b",
              "parentUUID": "921c1920-163d-4cd7-92fc-3a71678383e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /auth/password/change responds error with no token",
              "timedOut": false,
              "duration": 153,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "7f306478-5e90-41bd-baf3-b4660700754a",
              "parentUUID": "921c1920-163d-4cd7-92fc-3a71678383e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /auth/password/change responds error with invalid token",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "6982ff8e-4810-43f9-b164-36942a256a36",
              "parentUUID": "921c1920-163d-4cd7-92fc-3a71678383e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid user ID token",
              "fullTitle": "POST /auth/password/change responds error with invalid user ID token",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", token)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid user\"\n}, done);",
              "err": {},
              "uuid": "02ad6515-0d4b-4d03-9045-70413802491f",
              "parentUUID": "921c1920-163d-4cd7-92fc-3a71678383e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "password change works",
              "fullTitle": "POST /auth/password/change password change works",
              "timedOut": false,
              "duration": 298,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/password/change')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    email: \"lilianb@mail.fr\",\n    oldPassword: \"fromage\",\n    newPassword: \"salade\"\n})\n    .expect('Content-Type', /json/)\n    .expect(201, {\n    success: true,\n    user: {\n        id: \"ABCDEFG\",\n        firstName: \"Lilian\",\n        lastName: \"Bethus\",\n        email: \"lilianb@mail.fr\",\n        admin: true,\n        temporaryPassword: false\n    }\n}, done);",
              "err": {},
              "uuid": "592c1f89-9aef-429e-b498-d9ee0df26135",
              "parentUUID": "921c1920-163d-4cd7-92fc-3a71678383e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de451d7a-6492-4993-b34e-65e6e8eb1195",
            "572353dc-f5fd-48c5-8e7e-c9d3d7f785ed",
            "cbf95360-5db0-4721-b2a2-2913d80c420b",
            "7f306478-5e90-41bd-baf3-b4660700754a",
            "6982ff8e-4810-43f9-b164-36942a256a36",
            "02ad6515-0d4b-4d03-9045-70413802491f",
            "592c1f89-9aef-429e-b498-d9ee0df26135"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 838,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "754ed2bc-b3cf-4267-9fee-f07f12661d4b",
          "title": "PUT /category/add/:category_name",
          "fullFile": "/home/yohan/Loaner/tests/routestests/category_route_test.ts",
          "file": "/tests/routestests/category_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"PUT /category/add/:category_name\"",
              "fullTitle": "PUT /category/add/:category_name \"before each\" hook in \"PUT /category/add/:category_name\"",
              "timedOut": false,
              "duration": 73,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "5aad6323-ba85-4377-b55a-5dc85772ec43",
              "parentUUID": "754ed2bc-b3cf-4267-9fee-f07f12661d4b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when too long name is given",
              "fullTitle": "PUT /category/add/:category_name responds error when too long name is given",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/category/add/' + new Array(257).join(\"A\"))\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name\"\n}, done);",
              "err": {},
              "uuid": "09549256-b490-47ba-b6af-433445db1b95",
              "parentUUID": "754ed2bc-b3cf-4267-9fee-f07f12661d4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when category name already exists",
              "fullTitle": "PUT /category/add/:category_name responds error when category name already exists",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/category/add/Ordinateurs')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Category name already exists\"\n}, done);",
              "err": {},
              "uuid": "6c8995ba-9960-4bbe-986b-9383e1cdf166",
              "parentUUID": "754ed2bc-b3cf-4267-9fee-f07f12661d4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "PUT /category/add/:category_name responds error with no token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "a498b747-ea9f-439a-892e-9cf636c94bc4",
              "parentUUID": "754ed2bc-b3cf-4267-9fee-f07f12661d4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "PUT /category/add/:category_name responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "f98dfbaf-4792-44e3-be60-ad44177af7d0",
              "parentUUID": "754ed2bc-b3cf-4267-9fee-f07f12661d4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "PUT /category/add/:category_name responds error with not admin privileges token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "c1fd5e1e-b691-4f6c-9105-b81dfbded676",
              "parentUUID": "754ed2bc-b3cf-4267-9fee-f07f12661d4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "adding category works",
              "fullTitle": "PUT /category/add/:category_name adding category works",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/category/add/Test')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "96f1e827-e50b-4da3-b146-26c1fcb51b2e",
              "parentUUID": "754ed2bc-b3cf-4267-9fee-f07f12661d4b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "09549256-b490-47ba-b6af-433445db1b95",
            "6c8995ba-9960-4bbe-986b-9383e1cdf166",
            "a498b747-ea9f-439a-892e-9cf636c94bc4",
            "f98dfbaf-4792-44e3-be60-ad44177af7d0",
            "c1fd5e1e-b691-4f6c-9105-b81dfbded676",
            "96f1e827-e50b-4da3-b146-26c1fcb51b2e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 99,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4ae7bcd6-be34-4266-b7d8-00e9b8e905e2",
          "title": "POST /category/modify",
          "fullFile": "/home/yohan/Loaner/tests/routestests/category_route_test.ts",
          "file": "/tests/routestests/category_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /category/modify\"",
              "fullTitle": "POST /category/modify \"before each\" hook in \"POST /category/modify\"",
              "timedOut": false,
              "duration": 24,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "e9dbcf65-ad5d-48c7-b997-27bddd8515bb",
              "parentUUID": "4ae7bcd6-be34-4266-b7d8-00e9b8e905e2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when not existing category name is given",
              "fullTitle": "POST /category/modify responds error when not existing category name is given",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/category/modify')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    oldName: \"Existepas\",\n    newName: \"Existepasnonplus\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid category name\"\n}, done);",
              "err": {},
              "uuid": "1e1fc032-b6b3-45c6-a974-072393494118",
              "parentUUID": "4ae7bcd6-be34-4266-b7d8-00e9b8e905e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when old name is equals to new name",
              "fullTitle": "POST /category/modify responds error when old name is equals to new name",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/category/modify')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    oldName: \"Ordinateurs\",\n    newName: \"Ordinateurs\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Old name can't be the equal to new name\"\n}, done);",
              "err": {},
              "uuid": "39673843-2d33-4344-8cb1-31c44652e120",
              "parentUUID": "4ae7bcd6-be34-4266-b7d8-00e9b8e905e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when new name already exists",
              "fullTitle": "POST /category/modify responds error when new name already exists",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/category/modify')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    oldName: \"Ordinateurs\",\n    newName: \"Téléphones\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"New name is already set for a category\"\n}, done);",
              "err": {},
              "uuid": "a93829d0-fecf-4e2d-9f15-395b953a14ef",
              "parentUUID": "4ae7bcd6-be34-4266-b7d8-00e9b8e905e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /category/modify responds error with no token",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "7a7631a4-72b5-41d9-a02a-c135c5dfb935",
              "parentUUID": "4ae7bcd6-be34-4266-b7d8-00e9b8e905e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /category/modify responds error with invalid token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "d3b09f9e-55b4-4b2c-a1b8-3b8f94d1e40d",
              "parentUUID": "4ae7bcd6-be34-4266-b7d8-00e9b8e905e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "POST /category/modify responds error with not admin privileges token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "e84a8192-22c2-4a7a-82d6-b2a8550f7b22",
              "parentUUID": "4ae7bcd6-be34-4266-b7d8-00e9b8e905e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "modifying category works",
              "fullTitle": "POST /category/modify modifying category works",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/category/modify')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    oldName: \"Ordinateurs\",\n    newName: \"Courgette\"\n})\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "21683ff9-7db8-4fb4-b364-fca13f374ed3",
              "parentUUID": "4ae7bcd6-be34-4266-b7d8-00e9b8e905e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1e1fc032-b6b3-45c6-a974-072393494118",
            "39673843-2d33-4344-8cb1-31c44652e120",
            "a93829d0-fecf-4e2d-9f15-395b953a14ef",
            "7a7631a4-72b5-41d9-a02a-c135c5dfb935",
            "d3b09f9e-55b4-4b2c-a1b8-3b8f94d1e40d",
            "e84a8192-22c2-4a7a-82d6-b2a8550f7b22",
            "21683ff9-7db8-4fb4-b364-fca13f374ed3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 82,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "841cd182-ac4f-4d1a-a8bc-79b85affb7a2",
          "title": "POST /category/delete/:id_category",
          "fullFile": "/home/yohan/Loaner/tests/routestests/category_route_test.ts",
          "file": "/tests/routestests/category_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /category/delete/:id_category\"",
              "fullTitle": "POST /category/delete/:id_category \"before each\" hook in \"POST /category/delete/:id_category\"",
              "timedOut": false,
              "duration": 131,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "bde77dbd-39f4-4f1b-9b34-846e9084b44a",
              "parentUUID": "841cd182-ac4f-4d1a-a8bc-79b85affb7a2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when category ID is not a number",
              "fullTitle": "POST /category/delete/:id_category responds error when category ID is not a number",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/category/delete/PASUNNOMBRE')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Category ID is not a number\"\n}, done);",
              "err": {},
              "uuid": "28698a6e-7f34-44a1-8aff-3baeb186dfd3",
              "parentUUID": "841cd182-ac4f-4d1a-a8bc-79b85affb7a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when category ID doesnt exists",
              "fullTitle": "POST /category/delete/:id_category responds error when category ID doesnt exists",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/category/delete/99')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid category ID\"\n}, done);",
              "err": {},
              "uuid": "debbbcf4-bd9d-4f97-9e3f-80f601710849",
              "parentUUID": "841cd182-ac4f-4d1a-a8bc-79b85affb7a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /category/delete/:id_category responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "0ceeffce-016e-463c-9a0d-076b0a3a400e",
              "parentUUID": "841cd182-ac4f-4d1a-a8bc-79b85affb7a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /category/delete/:id_category responds error with invalid token",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "30d03e91-08b2-49f9-bb59-2e0d64e1d9be",
              "parentUUID": "841cd182-ac4f-4d1a-a8bc-79b85affb7a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "POST /category/delete/:id_category responds error with not admin privileges token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "74395a69-b8f6-404c-a9e6-c9dc86be71c6",
              "parentUUID": "841cd182-ac4f-4d1a-a8bc-79b85affb7a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleting category works",
              "fullTitle": "POST /category/delete/:id_category deleting category works",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/category/delete/1')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "08656620-64c3-42f9-884d-0abbd18f9f6d",
              "parentUUID": "841cd182-ac4f-4d1a-a8bc-79b85affb7a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "28698a6e-7f34-44a1-8aff-3baeb186dfd3",
            "debbbcf4-bd9d-4f97-9e3f-80f601710849",
            "0ceeffce-016e-463c-9a0d-076b0a3a400e",
            "30d03e91-08b2-49f9-bb59-2e0d64e1d9be",
            "74395a69-b8f6-404c-a9e6-c9dc86be71c6",
            "08656620-64c3-42f9-884d-0abbd18f9f6d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 73,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "25e7af48-172d-41b2-9593-d9ee1c4abe36",
          "title": "GET /devices/all",
          "fullFile": "/home/yohan/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /devices/all\"",
              "fullTitle": "GET /devices/all \"before all\" hook in \"GET /devices/all\"",
              "timedOut": false,
              "duration": 44,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "a063dab6-bdaa-4680-ab82-90254b4c4a98",
              "parentUUID": "25e7af48-172d-41b2-9593-d9ee1c4abe36",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds with json",
              "fullTitle": "GET /devices/all responds with json",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, done);",
              "err": {},
              "uuid": "0c8888b0-28c5-4943-ad47-ff290139a036",
              "parentUUID": "25e7af48-172d-41b2-9593-d9ee1c4abe36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /devices/all responds error with no token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "360e9e95-e14e-4065-93af-81b331e81bab",
              "parentUUID": "25e7af48-172d-41b2-9593-d9ee1c4abe36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /devices/all responds error with invalid token",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "2adaab19-89c1-49f4-9f8d-b9fa5695739a",
              "parentUUID": "25e7af48-172d-41b2-9593-d9ee1c4abe36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations",
              "fullTitle": "GET /devices/all responds with correct devices informations",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: [{\n                    ref: \"AN001\",\n                    categoryID: 1,\n                    categoryName: \"Téléphones\",\n                    name: \"Samsung Galaxy S1000\",\n                    version: \"1.0\",\n                    photo: \"https://media.ldlc.com/r1600/ld/products/00/05/30/35/LD0005303584_2.jpg\",\n                    phone: \"0123456789\",\n                    lockDays: [\n                        [\"2021-01-05\", \"2021-01-08\"],\n                        [\"2021-01-09\", \"2021-02-08\"]\n                    ]\n                }, {\n                    ref: \"AN002\",\n                    categoryID: 1,\n                    categoryName: \"Téléphones\",\n                    name: \"Huawei P80\",\n                    version: \"1.1\",\n                    photo: \"https://media.ldlc.com/r1600/ld/products/00/05/39/99/LD0005399909_2.jpg\",\n                    phone: \"1234567890\",\n                    lockDays: []\n                }]\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: [{\n                    ref: \"PC001\",\n                    categoryID: 2,\n                    categoryName: \"Ordinateurs\",\n                    name: \"Acer Pro Max\",\n                    version: \"1.0\",\n                    photo: \"https://static.acer.com/up/Resource/Acer/Laptops/Spin_5/Image/20180824/acer-Spin_5_SP513-53N-main.png\",\n                    phone: \"\",\n                    lockDays: [\n                        [\"2021-01-04\", \"2021-02-04\"]\n                    ]\n                }]\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "543281af-8112-4c9f-90dc-2908ea44df49",
              "parentUUID": "25e7af48-172d-41b2-9593-d9ee1c4abe36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0c8888b0-28c5-4943-ad47-ff290139a036",
            "360e9e95-e14e-4065-93af-81b331e81bab",
            "2adaab19-89c1-49f4-9f8d-b9fa5695739a",
            "543281af-8112-4c9f-90dc-2908ea44df49"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 94,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0852fc2c-4fa2-480f-a710-af36a6c42485",
          "title": "GET /devices/:device_ref",
          "fullFile": "/home/yohan/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /devices/:device_ref\"",
              "fullTitle": "GET /devices/:device_ref \"before all\" hook in \"GET /devices/:device_ref\"",
              "timedOut": false,
              "duration": 121,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "cc2fb41e-0901-41ac-a391-30393bf7d232",
              "parentUUID": "0852fc2c-4fa2-480f-a710-af36a6c42485",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds with json",
              "fullTitle": "GET /devices/:device_ref responds with json",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/AN001')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, done);",
              "err": {},
              "uuid": "6abc7113-6910-4cb0-b4f9-e49daf69d3e0",
              "parentUUID": "0852fc2c-4fa2-480f-a710-af36a6c42485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when device reference is invalid",
              "fullTitle": "GET /devices/:device_ref responds error when device reference is invalid",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/PASBON')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid device reference\"\n}, done);",
              "err": {},
              "uuid": "7054c897-52af-4d0d-9456-c7a9cbd0163f",
              "parentUUID": "0852fc2c-4fa2-480f-a710-af36a6c42485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /devices/:device_ref responds error with no token",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "b1951892-095e-4b04-a11d-b73f405af0a8",
              "parentUUID": "0852fc2c-4fa2-480f-a710-af36a6c42485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /devices/:device_ref responds error with invalid token",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "f046cfcc-81ed-478d-9ff9-8f3892347f43",
              "parentUUID": "0852fc2c-4fa2-480f-a710-af36a6c42485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations",
              "fullTitle": "GET /devices/:device_ref responds with correct devices informations",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/AN001')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal({\n        ref: \"AN001\",\n        categoryID: 1,\n        categoryName: \"Téléphones\",\n        name: \"Samsung Galaxy S1000\",\n        version: \"1.0\",\n        photo: \"https://media.ldlc.com/r1600/ld/products/00/05/30/35/LD0005303584_2.jpg\",\n        phone: \"0123456789\",\n        lockDays: [\n            [\"2021-01-05\", \"2021-01-08\"],\n            [\"2021-01-09\", \"2021-02-08\"]\n        ]\n    });\n})\n    .end(done);",
              "err": {},
              "uuid": "42403a63-8008-42b5-b100-ffb90b82497e",
              "parentUUID": "0852fc2c-4fa2-480f-a710-af36a6c42485",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6abc7113-6910-4cb0-b4f9-e49daf69d3e0",
            "7054c897-52af-4d0d-9456-c7a9cbd0163f",
            "b1951892-095e-4b04-a11d-b73f405af0a8",
            "f046cfcc-81ed-478d-9ff9-8f3892347f43",
            "42403a63-8008-42b5-b100-ffb90b82497e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 66,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dc4392a9-9b37-45a1-98f4-854dc2730da0",
          "title": "GET /devices/all?filter_name=filter_value&...",
          "fullFile": "/home/yohan/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /devices/all?filter_name=filter_value&...\"",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... \"before all\" hook in \"GET /devices/all?filter_name=filter_value&...\"",
              "timedOut": false,
              "duration": 127,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "d317d4f5-9084-4ab3-9474-25f415d3173c",
              "parentUUID": "dc4392a9-9b37-45a1-98f4-854dc2730da0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds nothing when device reference is invalid",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds nothing when device reference is invalid",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?ref=PABON')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: []\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: []\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "8fecd9d2-a58a-4552-9066-66a966ba1164",
              "parentUUID": "dc4392a9-9b37-45a1-98f4-854dc2730da0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds nothing when device name is invalid",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds nothing when device name is invalid",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?name=PABON')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: []\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: []\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "7fa7f408-8e9a-4fc5-8533-cfcb3e294079",
              "parentUUID": "dc4392a9-9b37-45a1-98f4-854dc2730da0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when device category is invalid",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds error when device category is invalid",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?category=PABON')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid category name\"\n}, done);",
              "err": {},
              "uuid": "47be59ea-1e0e-4c09-bc24-6b4204a30a9c",
              "parentUUID": "dc4392a9-9b37-45a1-98f4-854dc2730da0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds error with no token",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "30284398-5edd-457c-9236-6b9914e7809a",
              "parentUUID": "dc4392a9-9b37-45a1-98f4-854dc2730da0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds error with invalid token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "77fa7fa8-f673-44d4-a71e-d28081695dfc",
              "parentUUID": "dc4392a9-9b37-45a1-98f4-854dc2730da0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations with ref only",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds with correct devices informations with ref only",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?ref=AN001')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: [{\n                    ref: \"AN001\",\n                    categoryID: 1,\n                    categoryName: \"Téléphones\",\n                    name: \"Samsung Galaxy S1000\",\n                    version: \"1.0\",\n                    photo: \"https://media.ldlc.com/r1600/ld/products/00/05/30/35/LD0005303584_2.jpg\",\n                    phone: \"0123456789\",\n                    lockDays: [\n                        [\"2021-01-05\", \"2021-01-08\"],\n                        [\"2021-01-09\", \"2021-02-08\"]\n                    ]\n                }]\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: []\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "d08f1153-50f0-428a-a316-8cb65f901fda",
              "parentUUID": "dc4392a9-9b37-45a1-98f4-854dc2730da0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations with name only",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds with correct devices informations with name only",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?name=Samsung Galaxy S1000')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: [{\n                    ref: \"AN001\",\n                    categoryID: 1,\n                    categoryName: \"Téléphones\",\n                    name: \"Samsung Galaxy S1000\",\n                    version: \"1.0\",\n                    photo: \"https://media.ldlc.com/r1600/ld/products/00/05/30/35/LD0005303584_2.jpg\",\n                    phone: \"0123456789\",\n                    lockDays: [\n                        [\"2021-01-05\", \"2021-01-08\"],\n                        [\"2021-01-09\", \"2021-02-08\"]\n                    ]\n                }]\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: []\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "57a019d9-4992-43bd-be2a-b0c6ff06286c",
              "parentUUID": "dc4392a9-9b37-45a1-98f4-854dc2730da0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations with category only",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds with correct devices informations with category only",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?category=Ordinateurs')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: []\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: [{\n                    ref: \"PC001\",\n                    categoryID: 2,\n                    categoryName: \"Ordinateurs\",\n                    name: \"Acer Pro Max\",\n                    version: \"1.0\",\n                    photo: \"https://static.acer.com/up/Resource/Acer/Laptops/Spin_5/Image/20180824/acer-Spin_5_SP513-53N-main.png\",\n                    phone: \"\",\n                    lockDays: [[\"2021-01-04\", \"2021-02-04\"]]\n                }]\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "692ac98b-0586-4730-a996-3eb1f0b5bda5",
              "parentUUID": "dc4392a9-9b37-45a1-98f4-854dc2730da0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations with all filters",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds with correct devices informations with all filters",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?ref=PC001&name=Acer Pro Max&category=Ordinateurs')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: []\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: [{\n                    ref: \"PC001\",\n                    categoryID: 2,\n                    categoryName: \"Ordinateurs\",\n                    name: \"Acer Pro Max\",\n                    version: \"1.0\",\n                    photo: \"https://static.acer.com/up/Resource/Acer/Laptops/Spin_5/Image/20180824/acer-Spin_5_SP513-53N-main.png\",\n                    phone: \"\",\n                    lockDays: [[\"2021-01-04\", \"2021-02-04\"]]\n                }]\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "a9d718b4-dbdc-4b2e-acc8-6038569e88ea",
              "parentUUID": "dc4392a9-9b37-45a1-98f4-854dc2730da0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8fecd9d2-a58a-4552-9066-66a966ba1164",
            "7fa7f408-8e9a-4fc5-8533-cfcb3e294079",
            "47be59ea-1e0e-4c09-bc24-6b4204a30a9c",
            "30284398-5edd-457c-9236-6b9914e7809a",
            "77fa7fa8-f673-44d4-a71e-d28081695dfc",
            "d08f1153-50f0-428a-a316-8cb65f901fda",
            "57a019d9-4992-43bd-be2a-b0c6ff06286c",
            "692ac98b-0586-4730-a996-3eb1f0b5bda5",
            "a9d718b4-dbdc-4b2e-acc8-6038569e88ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
          "title": "POST /devices/borrow/:id_utilisateur",
          "fullFile": "/home/yohan/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /devices/borrow/:id_utilisateur\"",
              "fullTitle": "POST /devices/borrow/:id_utilisateur \"before each\" hook in \"POST /devices/borrow/:id_utilisateur\"",
              "timedOut": false,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "141ea83e-4dd8-46a1-bbdc-50de8ac9ccf0",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when startDate is after endDate",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when startDate is after endDate",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2021-02-30\", \"2021-02-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Start date is after end date\"\n}, done);",
              "err": {},
              "uuid": "41609d4b-1cee-40a1-92d5-500a6c36834d",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when no commands are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when no commands are given",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"No commands given\"\n}, done);",
              "err": {},
              "uuid": "3bf59f07-0bdd-4b46-92e1-bd73ec327149",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when no reference are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when no reference are given",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            loanDays: [\"2021-01-02\", \"2021-01-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"No reference given\"\n}, done);",
              "err": {},
              "uuid": "8f05be71-a32b-4660-843f-43b41d121661",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when no loanDays are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when no loanDays are given",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\"\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"No loanDays given\"\n}, done);",
              "err": {},
              "uuid": "ffd336aa-1753-4b69-b064-46b5f6d7429b",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when loanDays is not an array",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when loanDays is not an array",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: 67\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid loanDays\"\n}, done);",
              "err": {},
              "uuid": "cd081357-2654-4b18-8146-f44c5d5706c0",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when less than two loanDays are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when less than two loanDays are given",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2020-04-12\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid loanDays count\"\n}, done);",
              "err": {},
              "uuid": "38210d22-0a84-4a02-8fe2-d5c148b0866d",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when more than two loanDays are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when more than two loanDays are given",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2020-04-12\", \"2020-04-14\", \"2020-04-16\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid loanDays count\"\n}, done);",
              "err": {},
              "uuid": "b4f0b862-4b37-47f2-918b-a250a5f1b118",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when there already is a reservation in the given period",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when there already is a reservation in the given period",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2021-01-02\", \"2021-01-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Reservation already exists\"\n}, done);",
              "err": {},
              "uuid": "bd1ec0c5-206a-4850-90a8-87b9f420b7f2",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when start date is invalid",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when start date is invalid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"01-s\", \"2021-01-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid start date\"\n}, done);",
              "err": {},
              "uuid": "32e797bb-eb4a-4d17-a97f-ad0b0d8a5748",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when end date is invalid",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when end date is invalid",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2021-01-20\", \"20-s\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid end date\"\n}, done);",
              "err": {},
              "uuid": "ae17a543-cee8-46d0-875f-9548031e46ea",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "9cdbec96-1d80-497d-a0b9-f8bdf506e4a3",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error with invalid token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "850030dd-ad1f-4520-874d-b86e23fd6022",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid user ID token",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error with invalid user ID token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", token)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid user\"\n}, done);",
              "err": {},
              "uuid": "3d9e39d1-9b1d-49d6-ae73-917b2a6fa4e3",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "borrow devices works",
              "fullTitle": "POST /devices/borrow/:id_utilisateur borrow devices works",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2021-05-05\", \"2021-05-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "f99cdb3f-1f43-46b1-bf09-b5278b00aeb8",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "borrow multiple devices works",
              "fullTitle": "POST /devices/borrow/:id_utilisateur borrow multiple devices works",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [\n        {\n            reference: \"AN001\",\n            loanDays: [\"2021-05-05\", \"2021-05-15\"]\n        },\n        {\n            reference: \"AN002\",\n            loanDays: [\"2021-05-05\", \"2021-05-15\"]\n        }\n    ]\n})\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "7cddebbf-2657-4a72-b946-c142192a6a72",
              "parentUUID": "714ac355-6cb1-4ca0-8fa7-b6b9f231f19d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41609d4b-1cee-40a1-92d5-500a6c36834d",
            "3bf59f07-0bdd-4b46-92e1-bd73ec327149",
            "8f05be71-a32b-4660-843f-43b41d121661",
            "ffd336aa-1753-4b69-b064-46b5f6d7429b",
            "cd081357-2654-4b18-8146-f44c5d5706c0",
            "38210d22-0a84-4a02-8fe2-d5c148b0866d",
            "b4f0b862-4b37-47f2-918b-a250a5f1b118",
            "bd1ec0c5-206a-4850-90a8-87b9f420b7f2",
            "32e797bb-eb4a-4d17-a97f-ad0b0d8a5748",
            "ae17a543-cee8-46d0-875f-9548031e46ea",
            "9cdbec96-1d80-497d-a0b9-f8bdf506e4a3",
            "850030dd-ad1f-4520-874d-b86e23fd6022",
            "3d9e39d1-9b1d-49d6-ae73-917b2a6fa4e3",
            "f99cdb3f-1f43-46b1-bf09-b5278b00aeb8",
            "7cddebbf-2657-4a72-b946-c142192a6a72"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 138,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b6bdbf71-6bb9-4ed3-befd-54ae6470a3bc",
          "title": "PUT /devices/add/",
          "fullFile": "/home/yohan/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"PUT /devices/add/\"",
              "fullTitle": "PUT /devices/add/ \"before each\" hook in \"PUT /devices/add/\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "e9ff0354-87a8-47ca-9b40-d523f0d640b4",
              "parentUUID": "b6bdbf71-6bb9-4ed3-befd-54ae6470a3bc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when category name is invalid",
              "fullTitle": "PUT /devices/add/ responds error when category name is invalid",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"AN003\",\n    name: \"Honor 10\",\n    category: \"EXISTEPAS\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Invalid category name\"\n}, done);",
              "err": {},
              "uuid": "2e8f9826-15a7-46ff-bcb2-5b918518a208",
              "parentUUID": "b6bdbf71-6bb9-4ed3-befd-54ae6470a3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when reference is invalid",
              "fullTitle": "PUT /devices/add/ responds error when reference is invalid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"PASVALIDE\",\n    name: \"Honor 10\",\n    category: \"Téléphones\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Invalid reference\"\n}, done);",
              "err": {},
              "uuid": "2c11bdff-e172-490b-ba4d-5a0633ce3af7",
              "parentUUID": "b6bdbf71-6bb9-4ed3-befd-54ae6470a3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when reference is missing",
              "fullTitle": "PUT /devices/add/ responds error when reference is missing",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    name: \"Honor 10\",\n    category: \"Téléphones\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Missing reference\"\n}, done);",
              "err": {},
              "uuid": "3d5b198c-9ed9-40f6-a6d0-962dc326771e",
              "parentUUID": "b6bdbf71-6bb9-4ed3-befd-54ae6470a3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when category is missing",
              "fullTitle": "PUT /devices/add/ responds error when category is missing",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"AN003\",\n    name: \"Honor 10\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Missing category name\"\n}, done);",
              "err": {},
              "uuid": "15736053-ce13-4b4b-a3a8-e4e800fef133",
              "parentUUID": "b6bdbf71-6bb9-4ed3-befd-54ae6470a3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when reference already exists",
              "fullTitle": "PUT /devices/add/ responds error when reference already exists",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"AN001\",\n    name: \"Honor 10\",\n    category: \"Téléphones\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Device reference is already used\"\n}, done);",
              "err": {},
              "uuid": "36a8bcd3-12ad-4093-9fa5-c18ae5f8a857",
              "parentUUID": "b6bdbf71-6bb9-4ed3-befd-54ae6470a3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "PUT /devices/add/ responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "95590679-41d8-4f54-a4d3-d7ffbc2ce009",
              "parentUUID": "b6bdbf71-6bb9-4ed3-befd-54ae6470a3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "PUT /devices/add/ responds error with invalid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "a1d39751-9d13-4048-a6c7-564ea991e8dc",
              "parentUUID": "b6bdbf71-6bb9-4ed3-befd-54ae6470a3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "PUT /devices/add/ responds error with not admin privileges token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "dcedaffd-a327-4080-ac80-a7cd8134eadb",
              "parentUUID": "b6bdbf71-6bb9-4ed3-befd-54ae6470a3bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "adding device works",
              "fullTitle": "PUT /devices/add/ adding device works",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"AN003\",\n    name: \"Honor 10\",\n    category: \"Téléphones\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(201, done);",
              "err": {},
              "uuid": "cc1ad49e-4105-4325-9ce8-a612617bbff1",
              "parentUUID": "b6bdbf71-6bb9-4ed3-befd-54ae6470a3bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e8f9826-15a7-46ff-bcb2-5b918518a208",
            "2c11bdff-e172-490b-ba4d-5a0633ce3af7",
            "3d5b198c-9ed9-40f6-a6d0-962dc326771e",
            "15736053-ce13-4b4b-a3a8-e4e800fef133",
            "36a8bcd3-12ad-4093-9fa5-c18ae5f8a857",
            "95590679-41d8-4f54-a4d3-d7ffbc2ce009",
            "a1d39751-9d13-4048-a6c7-564ea991e8dc",
            "dcedaffd-a327-4080-ac80-a7cd8134eadb",
            "cc1ad49e-4105-4325-9ce8-a612617bbff1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 84,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1f579b03-4e0a-418a-b3c2-f937d3e0dca2",
          "title": "DELETE /devices/delete/:device_id",
          "fullFile": "/home/yohan/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"DELETE /devices/delete/:device_id\"",
              "fullTitle": "DELETE /devices/delete/:device_id \"before each\" hook in \"DELETE /devices/delete/:device_id\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "63ef5475-4633-4e15-b0bc-b6c267e4d43e",
              "parentUUID": "1f579b03-4e0a-418a-b3c2-f937d3e0dca2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when device reference is invalid",
              "fullTitle": "DELETE /devices/delete/:device_id responds error when device reference is invalid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/devices/delete/PASVALID')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect(400, {\n    error: true,\n    message: \"Invalid device reference\"\n}, done);",
              "err": {},
              "uuid": "5d8920ca-a31e-406f-aa58-fc0d2623d813",
              "parentUUID": "1f579b03-4e0a-418a-b3c2-f937d3e0dca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "DELETE /devices/delete/:device_id responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "fd758be2-925b-4150-976c-1dd05a761805",
              "parentUUID": "1f579b03-4e0a-418a-b3c2-f937d3e0dca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "DELETE /devices/delete/:device_id responds error with invalid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "ba488752-c334-43b9-8972-f95776991c5d",
              "parentUUID": "1f579b03-4e0a-418a-b3c2-f937d3e0dca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "DELETE /devices/delete/:device_id responds error with not admin privileges token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "2409737a-2825-4d37-84c4-71f5cccfebd1",
              "parentUUID": "1f579b03-4e0a-418a-b3c2-f937d3e0dca2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleting a device works",
              "fullTitle": "DELETE /devices/delete/:device_id deleting a device works",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/devices/delete/AN001')\n    .set(\"x-access-token\", helper.getToken())\n    .expect(201, done);",
              "err": {},
              "uuid": "b4f83763-c0fd-4395-b4c2-e9af30079114",
              "parentUUID": "1f579b03-4e0a-418a-b3c2-f937d3e0dca2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d8920ca-a31e-406f-aa58-fc0d2623d813",
            "fd758be2-925b-4150-976c-1dd05a761805",
            "ba488752-c334-43b9-8972-f95776991c5d",
            "2409737a-2825-4d37-84c4-71f5cccfebd1",
            "b4f83763-c0fd-4395-b4c2-e9af30079114"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f7e066f6-b37f-49c4-80e7-8ebd9ea24c3f",
          "title": "GET /user/all",
          "fullFile": "/home/yohan/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /user/all\"",
              "fullTitle": "GET /user/all \"before all\" hook in \"GET /user/all\"",
              "timedOut": false,
              "duration": 73,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "7178e0b4-2175-48c6-ba79-dcfcdbf4e880",
              "parentUUID": "f7e066f6-b37f-49c4-80e7-8ebd9ea24c3f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error with no token",
              "fullTitle": "GET /user/all responds error with no token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "e9e4c722-4e40-4a53-89b8-27a9ee91ef24",
              "parentUUID": "f7e066f6-b37f-49c4-80e7-8ebd9ea24c3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /user/all responds error with invalid token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "b540f69c-ace2-4793-8c5d-8d8cee94478e",
              "parentUUID": "f7e066f6-b37f-49c4-80e7-8ebd9ea24c3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "GET /user/all responds error with not admin privileges token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "f0941872-5c2e-441f-a6ba-ca5dfb37971e",
              "parentUUID": "f7e066f6-b37f-49c4-80e7-8ebd9ea24c3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with json",
              "fullTitle": "GET /user/all responds with json",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/all')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, done);",
              "err": {},
              "uuid": "67d9f074-4c5e-45f0-bbc4-fee3d258ece5",
              "parentUUID": "f7e066f6-b37f-49c4-80e7-8ebd9ea24c3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct users informations",
              "fullTitle": "GET /user/all responds with correct users informations",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/all')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, [{\n        id: \"ABCDEFG\",\n        firstName: \"Lilian\",\n        lastName: \"Bethus\",\n        email: \"lilianb@mail.fr\",\n        admin: true,\n        temporaryPassword: false\n    },\n    {\n        id: \"HIJKLMN\",\n        firstName: \"Milan\",\n        lastName: \"Pasquereau\",\n        email: \"mpsqr@mail.fr\",\n        admin: false,\n        temporaryPassword: false\n    }], done);",
              "err": {},
              "uuid": "6b5d66e3-fedd-41ec-93bc-f8cfd830ad55",
              "parentUUID": "f7e066f6-b37f-49c4-80e7-8ebd9ea24c3f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e9e4c722-4e40-4a53-89b8-27a9ee91ef24",
            "b540f69c-ace2-4793-8c5d-8d8cee94478e",
            "f0941872-5c2e-441f-a6ba-ca5dfb37971e",
            "67d9f074-4c5e-45f0-bbc4-fee3d258ece5",
            "6b5d66e3-fedd-41ec-93bc-f8cfd830ad55"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "594e7ea6-9583-415a-bd87-91e878794d35",
          "title": "GET /user/:userId",
          "fullFile": "/home/yohan/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /user/:userId\"",
              "fullTitle": "GET /user/:userId \"before all\" hook in \"GET /user/:userId\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "34f83b21-0e8f-4759-a5e2-ade150dfc3a2",
              "parentUUID": "594e7ea6-9583-415a-bd87-91e878794d35",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds with json",
              "fullTitle": "GET /user/:userId responds with json",
              "timedOut": false,
              "duration": 423,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, done);",
              "err": {},
              "uuid": "be97dee0-c7ec-4ac5-adb6-20255a396f02",
              "parentUUID": "594e7ea6-9583-415a-bd87-91e878794d35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct user informations",
              "fullTitle": "GET /user/:userId responds with correct user informations",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, {\n    id: \"ABCDEFG\",\n    firstName: \"Lilian\",\n    lastName: \"Bethus\",\n    email: \"lilianb@mail.fr\",\n    admin: true,\n    temporaryPassword: false\n}, done);",
              "err": {},
              "uuid": "b83c64c8-424e-4bef-972f-2233826ce2c9",
              "parentUUID": "594e7ea6-9583-415a-bd87-91e878794d35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid ID",
              "fullTitle": "GET /user/:userId responds error for invalid ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/invalid')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Cannot find results\"\n}, done);",
              "err": {},
              "uuid": "c79a25cb-4886-40e0-9439-7f47de2d9ea8",
              "parentUUID": "594e7ea6-9583-415a-bd87-91e878794d35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /user/:userId responds error with no token",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "4bf5b732-0fbb-4378-89f0-00d75517a7bf",
              "parentUUID": "594e7ea6-9583-415a-bd87-91e878794d35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /user/:userId responds error with invalid token",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "557c993d-7c64-4d6e-b3c9-30d824f1f724",
              "parentUUID": "594e7ea6-9583-415a-bd87-91e878794d35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "GET /user/:userId responds error with not admin privileges token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "ef973368-9101-4922-9fb1-aaa5bdb13d57",
              "parentUUID": "594e7ea6-9583-415a-bd87-91e878794d35",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "be97dee0-c7ec-4ac5-adb6-20255a396f02",
            "b83c64c8-424e-4bef-972f-2233826ce2c9",
            "c79a25cb-4886-40e0-9439-7f47de2d9ea8",
            "4bf5b732-0fbb-4378-89f0-00d75517a7bf",
            "557c993d-7c64-4d6e-b3c9-30d824f1f724",
            "ef973368-9101-4922-9fb1-aaa5bdb13d57"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 458,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ee93b486-b584-4fa4-82d5-6b584a093e05",
          "title": "PUT /user/add",
          "fullFile": "/home/yohan/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"PUT /user/add\"",
              "fullTitle": "PUT /user/add \"before each\" hook in \"PUT /user/add\"",
              "timedOut": false,
              "duration": 97,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "2c29fadc-074f-48e7-9413-ad18f5c74b87",
              "parentUUID": "ee93b486-b584-4fa4-82d5-6b584a093e05",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when trying to add user with already existing id",
              "fullTitle": "PUT /user/add responds error when trying to add user with already existing id",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"ABCDEFG\",\n    firstName: \"Marche\",\n    lastName: \"Pas\",\n    email: \"rien@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this ID already exists\"\n}, done);",
              "err": {},
              "uuid": "212e9c91-0694-430f-ba2f-ffc2c7fe51c7",
              "parentUUID": "ee93b486-b584-4fa4-82d5-6b584a093e05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid ID",
              "fullTitle": "PUT /user/add responds error for invalid ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"INVAL\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"jdupont@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid ID\"\n}, done);",
              "err": {},
              "uuid": "10791821-f7aa-44a8-a482-10e964ae8444",
              "parentUUID": "ee93b486-b584-4fa4-82d5-6b584a093e05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid email",
              "fullTitle": "PUT /user/add responds error for invalid email",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"TESTTE1\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"cecinestpasunmail.correct\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid email\"\n}, done);",
              "err": {},
              "uuid": "b8e6dd83-df46-4e62-b114-cd55f66618e9",
              "parentUUID": "ee93b486-b584-4fa4-82d5-6b584a093e05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid user with already existing email",
              "fullTitle": "PUT /user/add responds error for invalid user with already existing email",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"TESTTE2\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"lilianb@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this email already exists\"\n}, done);",
              "err": {},
              "uuid": "ae05e1b2-24af-4f32-a9fd-42c152eafd90",
              "parentUUID": "ee93b486-b584-4fa4-82d5-6b584a093e05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "PUT /user/add responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "57bd3041-72e7-4856-8aef-53481bc997f4",
              "parentUUID": "ee93b486-b584-4fa4-82d5-6b584a093e05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "PUT /user/add responds error with invalid token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "ee6b8d07-184a-49a7-b733-6f2db1211ba1",
              "parentUUID": "ee93b486-b584-4fa4-82d5-6b584a093e05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "PUT /user/add responds error with not admin privileges token",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "159b4930-3c00-4a61-a748-460410acbb2c",
              "parentUUID": "ee93b486-b584-4fa4-82d5-6b584a093e05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "user creation works",
              "fullTitle": "PUT /user/add user creation works",
              "timedOut": false,
              "duration": 202,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"TESTTE3\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"jdupont@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(201, () => {\n    supertest_1.default(server_1.app)\n        .get('/api/users/TESTTE3')\n        .set('Accept', 'application/json')\n        .set(\"x-access-token\", helper.getToken())\n        .expect('Content-Type', /json/)\n        .expect(200, {\n        id: \"TESTTE3\",\n        firstName: \"Jean\",\n        lastName: \"Dupont\",\n        email: \"jdupont@mail.fr\",\n        admin: false,\n        temporaryPassword: true\n    }, done);\n});",
              "err": {},
              "uuid": "719af549-2cce-409a-967c-d8e805655742",
              "parentUUID": "ee93b486-b584-4fa4-82d5-6b584a093e05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "212e9c91-0694-430f-ba2f-ffc2c7fe51c7",
            "10791821-f7aa-44a8-a482-10e964ae8444",
            "b8e6dd83-df46-4e62-b114-cd55f66618e9",
            "ae05e1b2-24af-4f32-a9fd-42c152eafd90",
            "57bd3041-72e7-4856-8aef-53481bc997f4",
            "ee6b8d07-184a-49a7-b733-6f2db1211ba1",
            "159b4930-3c00-4a61-a748-460410acbb2c",
            "719af549-2cce-409a-967c-d8e805655742"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 250,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fd309604-8905-4537-bd59-6fc1eb2ec57a",
          "title": "POST /user/modify",
          "fullFile": "/home/yohan/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /user/modify\"",
              "fullTitle": "POST /user/modify \"before each\" hook in \"POST /user/modify\"",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "a5690411-1b10-469b-bf42-4d64d21bab76",
              "parentUUID": "fd309604-8905-4537-bd59-6fc1eb2ec57a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error for invalid user ID",
              "fullTitle": "POST /user/modify responds error for invalid user ID",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/users/modify')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"INVALID\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"jdupont@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this ID doesn't exists\"\n}, done);",
              "err": {},
              "uuid": "6b14632b-0876-4885-801c-134ee1f404cc",
              "parentUUID": "fd309604-8905-4537-bd59-6fc1eb2ec57a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid user with already existing email",
              "fullTitle": "POST /user/modify responds error for invalid user with already existing email",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/users/modify')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"HIJKLMN\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"lilianb@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this email already exists\"\n}, done);",
              "err": {},
              "uuid": "13a028d5-f290-4d0a-a572-366e70db59fd",
              "parentUUID": "fd309604-8905-4537-bd59-6fc1eb2ec57a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /user/modify responds error with no token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "cd4c11a1-7ae5-4760-8dfd-c310eab3b70e",
              "parentUUID": "fd309604-8905-4537-bd59-6fc1eb2ec57a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /user/modify responds error with invalid token",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "809831ae-6b8d-45bb-a2ee-1f16ea8a4901",
              "parentUUID": "fd309604-8905-4537-bd59-6fc1eb2ec57a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "POST /user/modify responds error with not admin privileges token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "21b4aef0-feea-446a-8e9c-3330be43ac9f",
              "parentUUID": "fd309604-8905-4537-bd59-6fc1eb2ec57a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "user modification works",
              "fullTitle": "POST /user/modify user modification works",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/users/modify')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"HIJKLMN\",\n    firstName: \"M\",\n    lastName: \"P\",\n    email: \"psqrm@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(201, () => {\n    supertest_1.default(server_1.app)\n        .get('/api/users/HIJKLMN')\n        .set('Accept', 'application/json')\n        .set(\"x-access-token\", helper.getToken())\n        .expect('Content-Type', /json/)\n        .expect(200, {\n        id: \"HIJKLMN\",\n        firstName: \"M\",\n        lastName: \"P\",\n        email: \"psqrm@mail.fr\",\n        admin: false,\n        temporaryPassword: false\n    }, done);\n});",
              "err": {},
              "uuid": "4a03552e-df15-464b-97d6-713be5a013d9",
              "parentUUID": "fd309604-8905-4537-bd59-6fc1eb2ec57a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6b14632b-0876-4885-801c-134ee1f404cc",
            "13a028d5-f290-4d0a-a572-366e70db59fd",
            "cd4c11a1-7ae5-4760-8dfd-c310eab3b70e",
            "809831ae-6b8d-45bb-a2ee-1f16ea8a4901",
            "21b4aef0-feea-446a-8e9c-3330be43ac9f",
            "4a03552e-df15-464b-97d6-713be5a013d9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 69,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "704cc8d1-0eec-4080-a065-b946c8af8364",
          "title": "DELETE /user/delete/:userId",
          "fullFile": "/home/yohan/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"DELETE /user/delete/:userId\"",
              "fullTitle": "DELETE /user/delete/:userId \"before each\" hook in \"DELETE /user/delete/:userId\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "6eff9b94-2f81-4c6c-89ff-d4e70d48ee62",
              "parentUUID": "704cc8d1-0eec-4080-a065-b946c8af8364",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error with invalid user id",
              "fullTitle": "DELETE /user/delete/:userId responds error with invalid user id",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/users/delete/INVALID')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this ID doesn't exists\"\n}, done);",
              "err": {},
              "uuid": "00240a88-f85a-4d2a-a5e5-d022581a1172",
              "parentUUID": "704cc8d1-0eec-4080-a065-b946c8af8364",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "DELETE /user/delete/:userId responds error with no token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "1f63c83a-5d8d-463d-bd95-e6ff63a8c8c7",
              "parentUUID": "704cc8d1-0eec-4080-a065-b946c8af8364",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "DELETE /user/delete/:userId responds error with invalid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "10bd613c-efb1-43ba-afc7-92043272e0a3",
              "parentUUID": "704cc8d1-0eec-4080-a065-b946c8af8364",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "DELETE /user/delete/:userId responds error with not admin privileges token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "a69ce7ba-0b83-412c-b363-54a48066f7b3",
              "parentUUID": "704cc8d1-0eec-4080-a065-b946c8af8364",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "user deletion works",
              "fullTitle": "DELETE /user/delete/:userId user deletion works",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/users/delete/HIJKLMN')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(201, () => {\n    supertest_1.default(server_1.app)\n        .get('/api/users/HIJKLMN')\n        .set('Accept', 'application/json')\n        .set(\"x-access-token\", helper.getToken())\n        .expect('Content-Type', /json/)\n        .expect(400, {\n        error: true,\n        message: \"Cannot find results\"\n    }, done);\n});",
              "err": {},
              "uuid": "926c046a-cf8f-481a-981f-d92793e0ffcb",
              "parentUUID": "704cc8d1-0eec-4080-a065-b946c8af8364",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00240a88-f85a-4d2a-a5e5-d022581a1172",
            "1f63c83a-5d8d-463d-bd95-e6ff63a8c8c7",
            "10bd613c-efb1-43ba-afc7-92043272e0a3",
            "a69ce7ba-0b83-412c-b363-54a48066f7b3",
            "926c046a-cf8f-481a-981f-d92793e0ffcb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 46,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4f0aeae1-3ed0-4b2d-b640-ab6bbdf07fa4",
          "title": "GET /user/:userId/history",
          "fullFile": "/home/yohan/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"GET /user/:userId/history\"",
              "fullTitle": "GET /user/:userId/history \"before each\" hook in \"GET /user/:userId/history\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "20ba054b-97e4-4952-8090-079449fece49",
              "parentUUID": "4f0aeae1-3ed0-4b2d-b640-ab6bbdf07fa4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error with invalid user id",
              "fullTitle": "GET /user/:userId/history responds error with invalid user id",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/INVALID/history')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this ID doesn't exists\"\n}, done);",
              "err": {},
              "uuid": "346b82d9-c081-41a6-b89f-8df1d4929dad",
              "parentUUID": "4f0aeae1-3ed0-4b2d-b640-ab6bbdf07fa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /user/:userId/history responds error with no token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "a4868e0e-fd37-47ae-adc3-b947fdb06004",
              "parentUUID": "4f0aeae1-3ed0-4b2d-b640-ab6bbdf07fa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /user/:userId/history responds error with invalid token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "8ca0c5f4-f4bb-44e2-8eea-8d8d980a38a0",
              "parentUUID": "4f0aeae1-3ed0-4b2d-b640-ab6bbdf07fa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "GET /user/:userId/history responds error with not admin privileges token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "1f5d8d5d-6333-44f0-a9f8-88e02d21ec4c",
              "parentUUID": "4f0aeae1-3ed0-4b2d-b640-ab6bbdf07fa4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "user history works",
              "fullTitle": "GET /user/:userId/history user history works",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/ABCDEFG/history')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, [{\n        ID: 2,\n        endDate: \"2021-01-12\",\n        idUser: \"ABCDEFG\",\n        refDevice: \"PC001\",\n        returnDate: \"2021-02-04\",\n        startDate: \"2021-01-04\"\n    }], done);",
              "err": {},
              "uuid": "8921f4d2-952e-42a2-b95e-de7fc4e9dfba",
              "parentUUID": "4f0aeae1-3ed0-4b2d-b640-ab6bbdf07fa4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "346b82d9-c081-41a6-b89f-8df1d4929dad",
            "a4868e0e-fd37-47ae-adc3-b947fdb06004",
            "8ca0c5f4-f4bb-44e2-8eea-8d8d980a38a0",
            "1f5d8d5d-6333-44f0-a9f8-88e02d21ec4c",
            "8921f4d2-952e-42a2-b95e-de7fc4e9dfba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}