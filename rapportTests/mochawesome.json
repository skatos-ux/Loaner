{
  "stats": {
    "suites": 51,
    "tests": 194,
    "passes": 194,
    "pending": 0,
    "failures": 0,
    "start": "2021-01-09T17:58:37.015Z",
    "end": "2021-01-09T17:58:40.463Z",
    "duration": 3448,
    "testsRegistered": 201,
    "passPercent": 96.51741293532339,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 7,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "b8bffe3f-f9cf-4fea-b1ab-5cb0921c58a8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "The device must match an existing category",
          "fullTitle": "The device must match an existing category",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    const existingCategories = yield DAOcat.getAll();\n    let check = false;\n    //Testing that its category is member of the categories of the database\n    existingCategories.forEach(function (category) {\n        if (device.getCategoryID() == category.getID())\n            check = true;\n    });\n    assert.isTrue(check);\n});",
          "err": {},
          "uuid": "8fadb271-bfd5-4a8a-92be-70a81d9e04e4",
          "parentUUID": "b8bffe3f-f9cf-4fea-b1ab-5cb0921c58a8",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The device must have a five character reference",
          "fullTitle": "The device must have a five character reference",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    assert.equal(device.getRef().length, 5);\n});",
          "err": {},
          "uuid": "6d66b891-0d8b-4845-8f6c-0fdabb59da73",
          "parentUUID": "b8bffe3f-f9cf-4fea-b1ab-5cb0921c58a8",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The device must not have an empty name or a null name",
          "fullTitle": "The device must not have an empty name or a null name",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    assert.isNotNull(device.getName());\n    assert.isAbove(device.getName().length, 0);\n});",
          "err": {},
          "uuid": "45e7b87e-e6f1-4d73-81c7-6b49459b2f87",
          "parentUUID": "b8bffe3f-f9cf-4fea-b1ab-5cb0921c58a8",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The device must have a version number between 3 and 15 characters",
          "fullTitle": "The device must have a version number between 3 and 15 characters",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    assert.isAbove(device.getVersion().length, 2);\n    assert.isBelow(device.getVersion().length, 16);\n});",
          "err": {},
          "uuid": "c5555752-4a1b-4494-9934-fa85b8c036e4",
          "parentUUID": "b8bffe3f-f9cf-4fea-b1ab-5cb0921c58a8",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The device must have a correct version number",
          "fullTitle": "The device must have a correct version number",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(device.getVersion()).to.match(/^[0-9]*\\.[0-9]*$/);\n});",
          "err": {},
          "uuid": "6f9f9bf4-68b9-42a1-9694-7a968cb2b67e",
          "parentUUID": "b8bffe3f-f9cf-4fea-b1ab-5cb0921c58a8",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The device must have a grater version than 0.0",
          "fullTitle": "The device must have a grater version than 0.0",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    const numbers = device.getVersion().split('.');\n    assert.isAbove(parseInt(numbers[0]), 0);\n    assert.isAbove(parseInt(numbers[1]), -1);\n});",
          "err": {},
          "uuid": "f35cf4e8-9bf4-4e4a-bf63-1bd4f9c8f95c",
          "parentUUID": "b8bffe3f-f9cf-4fea-b1ab-5cb0921c58a8",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The device with a phone number must have a correct phone number",
          "fullTitle": "The device with a phone number must have a correct phone number",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    if (device.getPhone()) {\n        expect(device.getPhone()).to.match(/^\\+?[0-9]{0,15}$/);\n    }\n});",
          "err": {},
          "uuid": "865ec80b-ce91-47fd-85f4-63cac56414d6",
          "parentUUID": "b8bffe3f-f9cf-4fea-b1ab-5cb0921c58a8",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "72468e50-f31b-4498-88a4-b014f3266d20",
          "title": "Tests on dao_category.ts",
          "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_category_test.ts",
          "file": "/tests/daotests/dao_category_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests on dao_category.ts\"",
              "fullTitle": "Tests on dao_category.ts \"before all\" hook in \"Tests on dao_category.ts\"",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "bc1d5a80-345a-4ad8-b88d-810bc50bd2df",
              "parentUUID": "72468e50-f31b-4498-88a4-b014f3266d20",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ec5a5db6-b4a3-4fbd-aae7-bfe6be490462",
              "title": "Tests on getAll() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array of category",
                  "fullTitle": "Tests on dao_category.ts Tests on getAll() method The result type must be an array of category",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllCategories();\n    expect(Array.isArray(result)).to.equal(true);\n});",
                  "err": {},
                  "uuid": "14cc0e39-e4e8-4a5b-9d73-a4ac8eb4ceed",
                  "parentUUID": "ec5a5db6-b4a3-4fbd-aae7-bfe6be490462",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The result must not be empty, there have to be at least one category in the program",
                  "fullTitle": "Tests on dao_category.ts Tests on getAll() method The result must not be empty, there have to be at least one category in the program",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllCategories();\n    assert.isAbove(result.length, 0, \"There must be at least one category\");\n});",
                  "err": {},
                  "uuid": "33602509-bbd1-465b-bd8b-4ba515ee0991",
                  "parentUUID": "ec5a5db6-b4a3-4fbd-aae7-bfe6be490462",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The names of the categories must not exceed 255 characters",
                  "fullTitle": "Tests on dao_category.ts Tests on getAll() method The names of the categories must not exceed 255 characters",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllCategories();\n    result.forEach(function (category) {\n        assert.isBelow(category.getName().length, 255);\n    });\n});",
                  "err": {},
                  "uuid": "8cc82295-bbda-405f-adbe-7fe5d30ed8d0",
                  "parentUUID": "ec5a5db6-b4a3-4fbd-aae7-bfe6be490462",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ID of Categories must be strictly postives",
                  "fullTitle": "Tests on dao_category.ts Tests on getAll() method ID of Categories must be strictly postives",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllCategories();\n    result.forEach(function (category) {\n        assert.isAbove(category.getID(), 0);\n    });\n});",
                  "err": {},
                  "uuid": "12c6d5ad-c534-4052-8ec8-7286fe92b11a",
                  "parentUUID": "ec5a5db6-b4a3-4fbd-aae7-bfe6be490462",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14cc0e39-e4e8-4a5b-9d73-a4ac8eb4ceed",
                "33602509-bbd1-465b-bd8b-4ba515ee0991",
                "8cc82295-bbda-405f-adbe-7fe5d30ed8d0",
                "12c6d5ad-c534-4052-8ec8-7286fe92b11a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea4e518a-bf54-4bdc-8866-2bdefa13ff35",
              "title": "Tests on getByName() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be a category",
                  "fullTitle": "Tests on dao_category.ts Tests on getByName() method The result type must be a category",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetCategory(\"Téléphones\");\n    assert.isTrue(result instanceof category_1.default);\n});",
                  "err": {},
                  "uuid": "a92c1f19-9c0a-466f-8beb-cbd9b7403405",
                  "parentUUID": "ea4e518a-bf54-4bdc-8866-2bdefa13ff35",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The database must have the smartphone category",
                  "fullTitle": "Tests on dao_category.ts Tests on getByName() method The database must have the smartphone category",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetCategory(\"Téléphones\");\n    assert.isNotNull(result);\n});",
                  "err": {},
                  "uuid": "ad582ab8-edbd-4e3d-bddf-7e2a079fad48",
                  "parentUUID": "ea4e518a-bf54-4bdc-8866-2bdefa13ff35",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The names of the category must not have any number",
                  "fullTitle": "Tests on dao_category.ts Tests on getByName() method The names of the category must not have any number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetCategory(\"Téléphones\");\n    expect(result.getName()).not.to.match(/^([0-9_])$/);\n});",
                  "err": {},
                  "uuid": "d9f2bdf3-2d8b-4f1f-86d1-22e673cbf9df",
                  "parentUUID": "ea4e518a-bf54-4bdc-8866-2bdefa13ff35",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The names of the category must contain only letters or '-'",
                  "fullTitle": "Tests on dao_category.ts Tests on getByName() method The names of the category must contain only letters or '-'",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetCategory(\"Téléphones\");\n    expect(result.getName()).to.match(/^[a-zA-Z\\-éèà]{0,255}$/);\n});",
                  "err": {},
                  "uuid": "dec4e0e0-3846-4d44-9a8f-47255dc62f03",
                  "parentUUID": "ea4e518a-bf54-4bdc-8866-2bdefa13ff35",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a92c1f19-9c0a-466f-8beb-cbd9b7403405",
                "ad582ab8-edbd-4e3d-bddf-7e2a079fad48",
                "d9f2bdf3-2d8b-4f1f-86d1-22e673cbf9df",
                "dec4e0e0-3846-4d44-9a8f-47255dc62f03"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0411e990-4462-450a-8fcb-eb38ad37effb",
              "title": "Tests on getLastId() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "There must be at least one id, or there would be no categories",
                  "fullTitle": "Tests on dao_category.ts Tests on getLastId() method There must be at least one id, or there would be no categories",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetLastId();\n    assert.isNotNull(result);\n});",
                  "err": {},
                  "uuid": "9cbde2da-6dd9-4cdf-b23f-da3b5b5bfe84",
                  "parentUUID": "0411e990-4462-450a-8fcb-eb38ad37effb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Last Id created must be positive",
                  "fullTitle": "Tests on dao_category.ts Tests on getLastId() method Last Id created must be positive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetLastId();\n    assert.isAbove(result, 0);\n});",
                  "err": {},
                  "uuid": "66ebd4fd-0c15-4f88-9329-5caf9dc337fa",
                  "parentUUID": "0411e990-4462-450a-8fcb-eb38ad37effb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9cbde2da-6dd9-4cdf-b23f-da3b5b5bfe84",
                "66ebd4fd-0c15-4f88-9329-5caf9dc337fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ab485cf6-066e-448d-91dd-a2b4b45abd8a",
              "title": "Tests on addCategory() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A new category added should be seen in a SELECT request later",
                  "fullTitle": "Tests on dao_category.ts Tests on addCategory() method A new category added should be seen in a SELECT request later",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    DAOCategTested.addCategory(new category_1.default(9999, \"TestCategory\"));\n    const result = yield resultGetCategory(\"TestCategory\");\n    assert.isNotNull(result);\n    expect(result.getID()).to.equal(9999);\n    expect(result.getName()).to.equal(\"TestCategory\");\n});",
                  "err": {},
                  "uuid": "5d660b9f-017a-48e1-8396-ce4ac7aeb4e6",
                  "parentUUID": "ab485cf6-066e-448d-91dd-a2b4b45abd8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d660b9f-017a-48e1-8396-ce4ac7aeb4e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3cbe9d8a-58d1-4f4e-a8a5-542ec9e12489",
              "title": "Tests on deleteCategory() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A deleted category should not be in a query later",
                  "fullTitle": "Tests on dao_category.ts Tests on deleteCategory() method A deleted category should not be in a query later",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(yield DAOCategTested.deleteCategory.bind(DAOCategTested, 9999)).not.to.throw(Error);\n});",
                  "err": {},
                  "uuid": "f0da1fd5-17cd-40e4-b854-a7f16aa66779",
                  "parentUUID": "3cbe9d8a-58d1-4f4e-a8a5-542ec9e12489",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The category we tried to added, should throw an error at its deletion, or it is deleted from the database",
                  "fullTitle": "Tests on dao_category.ts Tests on deleteCategory() method The category we tried to added, should throw an error at its deletion, or it is deleted from the database",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOCategTested.deleteCategory(-1)).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "25bfad3a-5932-4dd7-b7e9-12c4e059f11b",
                  "parentUUID": "3cbe9d8a-58d1-4f4e-a8a5-542ec9e12489",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0da1fd5-17cd-40e4-b854-a7f16aa66779",
                "25bfad3a-5932-4dd7-b7e9-12c4e059f11b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d58256ae-7ced-4697-a4e5-b6a01c163778",
          "title": "Tests onf dao_device.ts",
          "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_device_test.ts",
          "file": "/tests/daotests/dao_device_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests onf dao_device.ts\"",
              "fullTitle": "Tests onf dao_device.ts \"before all\" hook in \"Tests onf dao_device.ts\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "032d63c8-4fce-44a5-92cd-0a01175376e7",
              "parentUUID": "d58256ae-7ced-4697-a4e5-b6a01c163778",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "92f8d3ab-60e2-4db6-a808-393d99f152a2",
              "title": "Tests on getAll() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array of devices",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The result type must be an array of devices",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    expect(Array.isArray(result)).to.equal(true);\n});",
                  "err": {},
                  "uuid": "868f7702-d7e0-4abe-884a-af97e55a29b1",
                  "parentUUID": "92f8d3ab-60e2-4db6-a808-393d99f152a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must match an existing category",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must match an existing category",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const existingCategories = yield DAOcat.getAll();\n    const result = yield resultAllDevices();\n    let check = false;\n    //Testing for every device that its category is member of the categories of the database\n    result.map((device) => {\n        existingCategories.map((category) => {\n            if (device.getCategoryID() == category.getID())\n                check = true;\n        });\n    });\n    assert.isTrue(check);\n});",
                  "err": {},
                  "uuid": "a99e143e-b4c4-46da-8e1a-4435d91fd1f8",
                  "parentUUID": "92f8d3ab-60e2-4db6-a808-393d99f152a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must have a five character reference",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must have a five character reference",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        assert.equal(device.getRef().length, 5);\n    });\n});",
                  "err": {},
                  "uuid": "55e856e7-b3b1-4dc0-b110-24affe85dff1",
                  "parentUUID": "92f8d3ab-60e2-4db6-a808-393d99f152a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must not have an empty name or a null name",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must not have an empty name or a null name",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        assert.isNotNull(device.getName());\n        assert.isAbove(device.getName().length, 0);\n    });\n});",
                  "err": {},
                  "uuid": "7be206c5-c668-4576-9ddf-ed9c225260ef",
                  "parentUUID": "92f8d3ab-60e2-4db6-a808-393d99f152a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must have a version number between 3 and 15 characters",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must have a version number between 3 and 15 characters",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        assert.isAbove(device.getVersion().length, 2);\n        assert.isBelow(device.getVersion().length, 16);\n    });\n});",
                  "err": {},
                  "uuid": "5e11cd44-2580-4fcf-ac04-9bd897e22ce2",
                  "parentUUID": "92f8d3ab-60e2-4db6-a808-393d99f152a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must have a correct version number",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must have a correct version number",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        expect(device.getVersion()).to.match(/^[0-9]*\\.[0-9]*$/);\n    });\n});",
                  "err": {},
                  "uuid": "c3429f17-9367-465a-b06e-f390b97d66e3",
                  "parentUUID": "92f8d3ab-60e2-4db6-a808-393d99f152a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must have a grater version than 0.0",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must have a grater version than 0.0",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        const numbers = device.getVersion().split('.');\n        assert.isAbove(parseInt(numbers[0]), 0);\n        assert.isAbove(parseInt(numbers[1]), -1);\n    });\n});",
                  "err": {},
                  "uuid": "7c144883-0f28-4c7e-8f0e-82a46ab4dad6",
                  "parentUUID": "92f8d3ab-60e2-4db6-a808-393d99f152a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices with a phone number must have a correct phone number",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices with a phone number must have a correct phone number",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        if (device.getPhone()) {\n            expect(device.getPhone()).to.match(/^\\+?[0-9]{0,15}$/);\n        }\n    });\n});",
                  "err": {},
                  "uuid": "b1071f60-d12a-4272-b349-c00e9579b72c",
                  "parentUUID": "92f8d3ab-60e2-4db6-a808-393d99f152a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "868f7702-d7e0-4abe-884a-af97e55a29b1",
                "a99e143e-b4c4-46da-8e1a-4435d91fd1f8",
                "55e856e7-b3b1-4dc0-b110-24affe85dff1",
                "7be206c5-c668-4576-9ddf-ed9c225260ef",
                "5e11cd44-2580-4fcf-ac04-9bd897e22ce2",
                "c3429f17-9367-465a-b06e-f390b97d66e3",
                "7c144883-0f28-4c7e-8f0e-82a46ab4dad6",
                "b1071f60-d12a-4272-b349-c00e9579b72c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 41,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6c49c3f4-657b-4e0c-af97-a4c1f0bdef17",
              "title": "Tests on addDevice() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Adding a compliant device should not throw exception, and the added device must be seen in queries",
                  "fullTitle": "Tests onf dao_device.ts Tests on addDevice() method Adding a compliant device should not throw exception, and the added device must be seen in queries",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    //This device is compliant to the specifications\n    expect(DAOTested.addDevice(new device_1.default(\"test1\", 1, \"Téléphones\", \"First test\", \"1.0\", \"\", \"0778787878\"))).not.to.be.rejected;\n    const result = yield DAOTested.get(\"test1\");\n    assert.isNotNull(result);\n    expect(result.getRef()).to.equal(\"test1\");\n    expect(result.getCategoryID()).to.equal(1);\n    expect(result.getName()).to.equal(\"First test\");\n    expect(result.getVersion()).to.equal(\"1.0\");\n    expect(result.getPhoto()).to.equal(\"\");\n    expect(result.getPhone()).to.equal(\"0778787878\");\n});",
                  "err": {},
                  "uuid": "8bf3efec-5915-4f0f-ae83-77d7f2f52d4f",
                  "parentUUID": "6c49c3f4-657b-4e0c-af97-a4c1f0bdef17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8bf3efec-5915-4f0f-ae83-77d7f2f52d4f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37ba55db-75ea-44cd-99fa-55c6342d1a4d",
              "title": "Tests on deleteDevice() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deleting the compliant device should not throw an error, and the devices should not be queryable",
                  "fullTitle": "Tests onf dao_device.ts Tests on deleteDevice() method Deleting the compliant device should not throw an error, and the devices should not be queryable",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.deleteDevice(\"test1\")).not.to.be.rejected;\n});",
                  "err": {},
                  "uuid": "48a42e56-5b28-4a07-bcc7-314525be5165",
                  "parentUUID": "37ba55db-75ea-44cd-99fa-55c6342d1a4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deleting all the invalid devices should throw an error, or they were created earlier",
                  "fullTitle": "Tests onf dao_device.ts Tests on deleteDevice() method Deleting all the invalid devices should throw an error, or they were created earlier",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.deleteDevice(\"test\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test33\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test4\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test5\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test6\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test7\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test8\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test9\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test10\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test11\")).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "bb770af5-fede-489f-b8ee-c65d9742f8fe",
                  "parentUUID": "37ba55db-75ea-44cd-99fa-55c6342d1a4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "48a42e56-5b28-4a07-bcc7-314525be5165",
                "bb770af5-fede-489f-b8ee-c65d9742f8fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a6fbda0f-ea0f-4a50-af84-95c7aaf0a7c3",
              "title": "Tests on borrowDevice() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Adding a reservation with existing ID throw an error",
                  "fullTitle": "Tests onf dao_device.ts Tests on borrowDevice() method Adding a reservation with existing ID throw an error",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const reservationID = yield DAObooking.getLastId();\n    expect(DAOTested.borrowDevice([new reservation_1.default(reservationID, \"TESTB\", \"ABCDEFG\", startDate, endDate)])).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "807a79a1-802d-4812-b2c6-9b2eda851c34",
                  "parentUUID": "a6fbda0f-ea0f-4a50-af84-95c7aaf0a7c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Booking a device should throw error",
                  "fullTitle": "Tests onf dao_device.ts Tests on borrowDevice() method Booking a device should throw error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const reservationID = yield DAObooking.getLastId();\n    expect(DAOTested.borrowDevice([new reservation_1.default(reservationID + 1, \"TESTB\", \"ABCDEFG\", startDate, endDate)])).to.not.be.rejected;\n});",
                  "err": {},
                  "uuid": "c1c85ce8-e02a-4524-93dd-8eb68480e737",
                  "parentUUID": "a6fbda0f-ea0f-4a50-af84-95c7aaf0a7c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "807a79a1-802d-4812-b2c6-9b2eda851c34",
                "c1c85ce8-e02a-4524-93dd-8eb68480e737"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e631459-ad4a-4546-b9d5-01d08f5f36e6",
              "title": "Tests on getDevicesByFilter() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Research with empty filters should throw error",
                  "fullTitle": "Tests onf dao_device.ts Tests on getDevicesByFilter() method Research with empty filters should throw error",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.getDevicesByFilter(\"\", \"\", -1)).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "7749b58f-3b58-4a86-90d0-a7da9836d54a",
                  "parentUUID": "0e631459-ad4a-4546-b9d5-01d08f5f36e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Checking if all the filters works well",
                  "fullTitle": "Tests onf dao_device.ts Tests on getDevicesByFilter() method Checking if all the filters works well",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield DAOTested.addDevice.bind(DAOTested, new device_1.default(\"test1\", 1, \"Téléphones\", \"Test filters\", \"1.0\", \"\", \"0778787878\"));\n    let result = yield DAOTested.getDevicesByFilter(\"Test filters\", \"\", -1);\n    result.forEach(function (device) {\n        assert.equal(device.getName(), \"Test filters\");\n    });\n    result = yield DAOTested.getDevicesByFilter(\"\", \"test1\", -1);\n    result.forEach(function (device) {\n        assert.equal(device.getRef(), \"test1\");\n    });\n    result = yield DAOTested.getDevicesByFilter(\"\", \"\", 1);\n    expect(result.map((device) => { return device.getName(); })).to.have.members([\"Huawei P80\", \"Samsung Galaxy S1000\"]);\n    yield DAOTested.deleteDevice.bind(DAOTested, \"test1\");\n});",
                  "err": {},
                  "uuid": "c04b3898-1c41-4373-8cb8-a4e23883686e",
                  "parentUUID": "0e631459-ad4a-4546-b9d5-01d08f5f36e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7749b58f-3b58-4a86-90d0-a7da9836d54a",
                "c04b3898-1c41-4373-8cb8-a4e23883686e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d6e1c7ef-9c20-4f85-ba5b-01111c4f8568",
          "title": "Tests on dao_reservation.ts",
          "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_reservation_test.ts",
          "file": "/tests/daotests/dao_reservation_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests on dao_reservation.ts\"",
              "fullTitle": "Tests on dao_reservation.ts \"before all\" hook in \"Tests on dao_reservation.ts\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "624aa532-61c6-4b6b-a9a7-54dbb4ebc0f6",
              "parentUUID": "d6e1c7ef-9c20-4f85-ba5b-01111c4f8568",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1d6183cb-4a9f-4cd1-9ec5-fc2d666f8b39",
              "title": "Tests on getLastid() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The Id must be positive",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getLastid() method The Id must be positive",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getLastId();\n    assert.isAbove(result, 0);\n});",
                  "err": {},
                  "uuid": "8367fbbf-9aa5-4c76-81ab-bc9c9b1b2326",
                  "parentUUID": "1d6183cb-4a9f-4cd1-9ec5-fc2d666f8b39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8367fbbf-9aa5-4c76-81ab-bc9c9b1b2326"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "233a24d0-bf23-4e1e-a261-ad5101414a50",
              "title": "Tests on historyDevice() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The users of a reservation must be registered",
                  "fullTitle": "Tests on dao_reservation.ts Tests on historyDevice() method The users of a reservation must be registered",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const users = yield DAOuser.getAll();\n    const result = yield DAOTested.historyDevice(\"AN001\");\n    let check = false;\n    result.forEach(function (booking) {\n        users.forEach(function (user) {\n            if (booking.getUserID() == user.getId())\n                check = true;\n        });\n    });\n    assert.isTrue(check);\n});",
                  "err": {},
                  "uuid": "714adc3d-08b2-4fac-b6bd-ed1eff3caee3",
                  "parentUUID": "233a24d0-bf23-4e1e-a261-ad5101414a50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices of a reservation must be registered",
                  "fullTitle": "Tests on dao_reservation.ts Tests on historyDevice() method The devices of a reservation must be registered",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const devices = yield DAOdevice.getAll();\n    const result = yield DAOTested.historyDevice(\"AN001\");\n    let check = false;\n    result.forEach(function (booking) {\n        devices.forEach(function (device) {\n            if (booking.getDevice().match(device.getRef()))\n                check = true;\n        });\n    });\n    assert.isTrue(check);\n});",
                  "err": {},
                  "uuid": "bd7b107a-1abe-4225-b67a-4677ded55d34",
                  "parentUUID": "233a24d0-bf23-4e1e-a261-ad5101414a50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The start date must be earlier than the two others",
                  "fullTitle": "Tests on dao_reservation.ts Tests on historyDevice() method The start date must be earlier than the two others",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.historyDevice(\"AN002\");\n    result.forEach(function (booking) {\n        assert.notDeepEqual(booking.getStartDate(), booking.getReturnDate());\n        assert.notDeepEqual(booking.getStartDate(), booking.getEndDate());\n        assert.isAbove(booking.getReturnDate().getTime(), booking.getStartDate().getTime());\n        assert.isAbove(booking.getEndDate().getTime(), booking.getStartDate().getTime());\n    });\n});",
                  "err": {},
                  "uuid": "c5b0c7b1-63c2-4c39-a772-cc83bf61e680",
                  "parentUUID": "233a24d0-bf23-4e1e-a261-ad5101414a50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "714adc3d-08b2-4fac-b6bd-ed1eff3caee3",
                "bd7b107a-1abe-4225-b67a-4677ded55d34",
                "c5b0c7b1-63c2-4c39-a772-cc83bf61e680"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6bd83f11-f1e4-4eb6-9f65-d210ab7a03d8",
              "title": "Tests on getUserHistory() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getUserHistory() method The result type must be an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUserHistory(\"HIJKLMN\");\n    assert.isTrue(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "3b48daf2-2df5-48a2-b9c0-6a20f6c4d622",
                  "parentUUID": "6bd83f11-f1e4-4eb6-9f65-d210ab7a03d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The id reservation must be positive",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getUserHistory() method The id reservation must be positive",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUserHistory(\"HIJKLMN\");\n    result.forEach((reservation) => {\n        assert.isAbove(reservation.getID(), 0);\n    });\n});",
                  "err": {},
                  "uuid": "cf56e4ed-0c8e-409d-82f1-eeeea9c44bc1",
                  "parentUUID": "6bd83f11-f1e4-4eb6-9f65-d210ab7a03d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The start date must be earlier than the two others",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getUserHistory() method The start date must be earlier than the two others",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUserHistory(\"ABCDEFG\");\n    result.forEach(function (booking) {\n        assert.notDeepEqual(booking.getStartDate(), booking.getReturnDate());\n        assert.notDeepEqual(booking.getStartDate(), booking.getEndDate());\n        if (!booking.getReturnDate()) {\n            assert.isAbove(booking.getReturnDate().getTime(), booking.getStartDate().getTime());\n        }\n        assert.isAbove(booking.getEndDate().getTime(), booking.getStartDate().getTime());\n    });\n});",
                  "err": {},
                  "uuid": "ffd7936e-3d44-42eb-96ac-b9e570182adf",
                  "parentUUID": "6bd83f11-f1e4-4eb6-9f65-d210ab7a03d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b48daf2-2df5-48a2-b9c0-6a20f6c4d622",
                "cf56e4ed-0c8e-409d-82f1-eeeea9c44bc1",
                "ffd7936e-3d44-42eb-96ac-b9e570182adf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "90c1d585-9ef4-45ac-a1d4-04d8ca7cee9d",
              "title": "Tests on getAllReservationsDevice() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getAllReservationsDevice() method The result type must be an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAllReservationsDevice(\"AN002\");\n    assert.isTrue(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "4caf3ace-6f12-449e-b6a5-c665e46ef93f",
                  "parentUUID": "90c1d585-9ef4-45ac-a1d4-04d8ca7cee9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The id reservation must be positive",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getAllReservationsDevice() method The id reservation must be positive",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAllReservationsDevice(\"AN002\");\n    result.forEach((reservation) => {\n        assert.isAbove(reservation.getID(), 0);\n    });\n});",
                  "err": {},
                  "uuid": "f5803210-6308-4af1-9e76-5e4aa4cce6f2",
                  "parentUUID": "90c1d585-9ef4-45ac-a1d4-04d8ca7cee9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The start date must be earlier than the two others",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getAllReservationsDevice() method The start date must be earlier than the two others",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAllReservationsDevice(\"AN002\");\n    result.forEach(function (booking) {\n        assert.notDeepEqual(booking.getStartDate(), booking.getReturnDate());\n        assert.notDeepEqual(booking.getStartDate(), booking.getEndDate());\n        assert.isAbove(booking.getReturnDate().getTime(), booking.getStartDate().getTime());\n        assert.isAbove(booking.getEndDate().getTime(), booking.getStartDate().getTime());\n    });\n});",
                  "err": {},
                  "uuid": "af9832e7-7230-48a7-85c7-d2497eed4e66",
                  "parentUUID": "90c1d585-9ef4-45ac-a1d4-04d8ca7cee9d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4caf3ace-6f12-449e-b6a5-c665e46ef93f",
                "f5803210-6308-4af1-9e76-5e4aa4cce6f2",
                "af9832e7-7230-48a7-85c7-d2497eed4e66"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e4272fbd-e952-4634-920b-e2b7479ecd66",
              "title": "Tests on hasReservationWithInfos() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "An existing reservation must be seen in the database",
                  "fullTitle": "Tests on dao_reservation.ts Tests on hasReservationWithInfos() method An existing reservation must be seen in the database",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.hasReservationWithInfos(\"AN001\", new Date(2021, 0, 5), new Date(2021, 0, 8));\n    expect(result).to.be.true;\n});",
                  "err": {},
                  "uuid": "de235c30-e420-4469-adee-3e1382a5b647",
                  "parentUUID": "e4272fbd-e952-4634-920b-e2b7479ecd66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "An inexisting reservation must not appear in the database",
                  "fullTitle": "Tests on dao_reservation.ts Tests on hasReservationWithInfos() method An inexisting reservation must not appear in the database",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(yield DAOTested.hasReservationWithInfos(\"AN003\", new Date(2021, 0, 5), new Date(2021, 0, 8))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN001\", new Date(2021, 0, 1), new Date(2021, 0, 4))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN001\", new Date(2021, 1, 9), new Date(2021, 1, 20))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN003\", new Date(2021, 0, 6), new Date(2021, 0, 8))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN003\", new Date(2021, 0, 5), new Date(2021, 1, 12))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN003\", new Date(2021, 2, 27), new Date(2021, 0, 8))).to.be.false;\n});",
                  "err": {},
                  "uuid": "59608d45-7374-4798-a469-a3c32fe3db40",
                  "parentUUID": "e4272fbd-e952-4634-920b-e2b7479ecd66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de235c30-e420-4469-adee-3e1382a5b647",
                "59608d45-7374-4798-a469-a3c32fe3db40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5fd857d8-7dba-46bc-880a-16fc2aee60d1",
          "title": "Tests on dao_user.ts",
          "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
          "file": "/tests/daotests/dao_user_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests on dao_user.ts\"",
              "fullTitle": "Tests on dao_user.ts \"before all\" hook in \"Tests on dao_user.ts\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "4bb4d263-dc7f-417a-839e-8ef40135681e",
              "parentUUID": "5fd857d8-7dba-46bc-880a-16fc2aee60d1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bc094bee-2996-4754-a4f6-662cef57d288",
              "title": "Tests on getAll() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array of user",
                  "fullTitle": "Tests on dao_user.ts Tests on getAll() method The result type must be an array of user",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAll();\n    expect(Array.isArray(result)).to.equal(true);\n});",
                  "err": {},
                  "uuid": "19e870a9-20f3-4cd1-ac1b-923cb880b86e",
                  "parentUUID": "bc094bee-2996-4754-a4f6-662cef57d288",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The users must have a 7 characters ID",
                  "fullTitle": "Tests on dao_user.ts Tests on getAll() method The users must have a 7 characters ID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAll();\n    result.map((user) => {\n        assert.equal(user.getId().length, 7);\n    });\n});",
                  "err": {},
                  "uuid": "99fffb4b-be16-46e8-b5f5-0f9a2cd7f261",
                  "parentUUID": "bc094bee-2996-4754-a4f6-662cef57d288",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The users must not have empty names or surname",
                  "fullTitle": "Tests on dao_user.ts Tests on getAll() method The users must not have empty names or surname",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAll();\n    result.map((user) => {\n        assert.isNotEmpty(user.getFirstName());\n        assert.isNotEmpty(user.getLastName());\n    });\n});",
                  "err": {},
                  "uuid": "8c555e3b-63e2-4b3f-8824-d18559b31466",
                  "parentUUID": "bc094bee-2996-4754-a4f6-662cef57d288",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The users must have a valid email",
                  "fullTitle": "Tests on dao_user.ts Tests on getAll() method The users must have a valid email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAll();\n    result.map((user) => {\n        assert.match(user.getEmail(), /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/);\n    });\n});",
                  "err": {},
                  "uuid": "ed035e7a-f8f5-4dbb-be9b-10165e907f59",
                  "parentUUID": "bc094bee-2996-4754-a4f6-662cef57d288",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19e870a9-20f3-4cd1-ac1b-923cb880b86e",
                "99fffb4b-be16-46e8-b5f5-0f9a2cd7f261",
                "8c555e3b-63e2-4b3f-8824-d18559b31466",
                "ed035e7a-f8f5-4dbb-be9b-10165e907f59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6eea14a0-6e73-409d-b318-36c71bb5f1af",
              "title": "Tests on getUser() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The user get must not have empty name or surname",
                  "fullTitle": "Tests on dao_user.ts Tests on getUser() method The user get must not have empty name or surname",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUser(\"ABCDEFG\");\n    assert.isNotEmpty(result.getFirstName());\n    assert.isNotEmpty(result.getLastName());\n});",
                  "err": {},
                  "uuid": "0751714d-fe37-4961-90dd-01f54c81272d",
                  "parentUUID": "6eea14a0-6e73-409d-b318-36c71bb5f1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The user must have a valid email",
                  "fullTitle": "Tests on dao_user.ts Tests on getUser() method The user must have a valid email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUser(\"ABCDEFG\");\n    assert.match(result.getEmail(), /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/);\n});",
                  "err": {},
                  "uuid": "2fa76012-4be8-4fa9-956d-9b6a6ccacfe9",
                  "parentUUID": "6eea14a0-6e73-409d-b318-36c71bb5f1af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0751714d-fe37-4961-90dd-01f54c81272d",
                "2fa76012-4be8-4fa9-956d-9b6a6ccacfe9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4cc32ca1-f5c9-43f0-b71f-3a4c117b0b9a",
              "title": "Tests on getLastId() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The last id must not be empty",
                  "fullTitle": "Tests on dao_user.ts Tests on getLastId() method The last id must not be empty",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getLastId();\n    assert.isNotEmpty(result.getId());\n});",
                  "err": {},
                  "uuid": "7899bacf-cc6b-40be-a60d-5da7534ab98a",
                  "parentUUID": "4cc32ca1-f5c9-43f0-b71f-3a4c117b0b9a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7899bacf-cc6b-40be-a60d-5da7534ab98a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4cf15ee-7845-43fd-bffe-64e5b56df608",
              "title": "Tests on addUser() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "An added user must be seen in a query",
                  "fullTitle": "Tests on dao_user.ts Tests on addUser() method An added user must be seen in a query",
                  "timedOut": false,
                  "duration": 136,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.addUser(usertest, \"test\")).not.to.be.rejected;\n    const result = yield DAOTested.getUser(\"EEEEEEE\");\n    assert.equal(result.getFirstName(), \"Tester\");\n    assert.equal(result.getLastName(), \"Testing\");\n    assert.equal(result.getEmail(), \"Testtest@gmail.com\");\n    assert.isFalse(result.isAdmin());\n});",
                  "err": {},
                  "uuid": "354cb19c-b8c3-40de-956d-63419cc4ec78",
                  "parentUUID": "b4cf15ee-7845-43fd-bffe-64e5b56df608",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "354cb19c-b8c3-40de-956d-63419cc4ec78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 136,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2b73874-c0da-444b-993d-ffa42a67db47",
              "title": "Tests on updateUser() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The modifications made on a user must be seen in queries later",
                  "fullTitle": "Tests on dao_user.ts Tests on updateUser() method The modifications made on a user must be seen in queries later",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    usertest.setAdmin(true);\n    usertest.setEmail(\"secondtest@gmail.com\");\n    usertest.setFirstName(\"Yohan\");\n    usertest.setLastName(\"Rousseau\");\n    usertest.setTemporaryPassword(true);\n    expect(DAOTested.updateUser(usertest)).not.to.be.rejected;\n    const result = yield DAOTested.getUser(usertest.getId());\n    assert.equal(result.getFirstName(), \"Yohan\");\n    assert.equal(result.getLastName(), \"Rousseau\");\n    assert.equal(result.getEmail(), \"secondtest@gmail.com\");\n    assert.isTrue(result.isAdmin());\n    assert.isTrue(result.hasTemporaryPassword());\n});",
                  "err": {},
                  "uuid": "0c459e25-0cf2-4626-a0f7-8e54f9931ca3",
                  "parentUUID": "a2b73874-c0da-444b-993d-ffa42a67db47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c459e25-0cf2-4626-a0f7-8e54f9931ca3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0559fe3e-f618-493a-ba8f-a7049e8d7453",
              "title": "Tests on authenticate",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Checking the actual password should not throw error",
                  "fullTitle": "Tests on dao_user.ts Tests on authenticate Checking the actual password should not throw error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.checkUser(usertest.getEmail(), \"test\")).not.to.be.rejected;\n});",
                  "err": {},
                  "uuid": "8c2fde94-6028-4c3d-918e-89d741550bc2",
                  "parentUUID": "0559fe3e-f618-493a-ba8f-a7049e8d7453",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Changing the password and checking it should not throw error",
                  "fullTitle": "Tests on dao_user.ts Tests on authenticate Changing the password and checking it should not throw error",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.changePassword(usertest.getEmail(), \"newtest\")).not.to.be.rejected;\n    expect(DAOTested.checkUser(usertest.getEmail(), \"newtest\")).not.to.be.rejected;\n});",
                  "err": {},
                  "uuid": "ae048f02-7f43-455f-b515-4d8a8333dd50",
                  "parentUUID": "0559fe3e-f618-493a-ba8f-a7049e8d7453",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c2fde94-6028-4c3d-918e-89d741550bc2",
                "ae048f02-7f43-455f-b515-4d8a8333dd50"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "481c883e-a9c6-4e54-b0ef-0eaa518ed97a",
              "title": "Tests on deleteUser() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A deleted user cannot be seen in a query",
                  "fullTitle": "Tests on dao_user.ts Tests on deleteUser() method A deleted user cannot be seen in a query",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.deleteUser(usertest.getId())).not.to.be.rejected;\n    expect(DAOTested.getUser(usertest.getId())).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "4cfd030c-5f30-4026-b162-c1d5536bfc31",
                  "parentUUID": "481c883e-a9c6-4e54-b0ef-0eaa518ed97a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4cfd030c-5f30-4026-b162-c1d5536bfc31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8e1cb29e-01ac-4276-9d94-d5b220a23f25",
          "title": "Tests on category.ts",
          "fullFile": "/Users/easycash/Loaner/tests/modeltests/categorytest.ts",
          "file": "/tests/modeltests/categorytest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Category Creation",
              "fullTitle": "Tests on category.ts Category Creation",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.assert.equal(catTested.getID(), 1);\nchai_1.assert.equal(catTested.getName(), \"Test\");\nchai_1.assert.isArray(catTested.getDevices());",
              "err": {},
              "uuid": "3a376b49-f66c-41ac-bf4c-38a3218d4f77",
              "parentUUID": "8e1cb29e-01ac-4276-9d94-d5b220a23f25",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Id Modification",
              "fullTitle": "Tests on category.ts Id Modification",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "catTested.setID(2);\nchai_1.assert.equal(catTested.getID(), 2);",
              "err": {},
              "uuid": "6779e914-af33-454a-bfc5-43cc56fb4193",
              "parentUUID": "8e1cb29e-01ac-4276-9d94-d5b220a23f25",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Name Modification",
              "fullTitle": "Tests on category.ts Name Modification",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "catTested.setName(\"Lafont\");\nchai_1.assert.equal(catTested.getName(), \"Lafont\");",
              "err": {},
              "uuid": "ffb4fa55-faeb-4dc0-9aa5-59779af07254",
              "parentUUID": "8e1cb29e-01ac-4276-9d94-d5b220a23f25",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c440a592-7896-45af-ade6-f19811078d90",
              "title": "Testing the exceptions",
              "fullFile": "/Users/easycash/Loaner/tests/modeltests/categorytest.ts",
              "file": "/tests/modeltests/categorytest.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Setting too long names should throw exception",
                  "fullTitle": "Tests on category.ts Testing the exceptions Setting too long names should throw exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringTest = \"testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestvtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestvtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest\";\nchai_1.expect(catTested.setName.bind(catTested, stringTest)).to.throw(Error);",
                  "err": {},
                  "uuid": "567b04f6-c5b9-4689-b579-2b47dcafa823",
                  "parentUUID": "c440a592-7896-45af-ade6-f19811078d90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting empty names should throw exception",
                  "fullTitle": "Tests on category.ts Testing the exceptions Setting empty names should throw exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringTest = \"\";\nchai_1.expect(catTested.setName.bind(catTested, stringTest)).to.throw(Error);",
                  "err": {},
                  "uuid": "6f7c724e-eba5-4f3c-a625-d33aa6c4fbb0",
                  "parentUUID": "c440a592-7896-45af-ade6-f19811078d90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "567b04f6-c5b9-4689-b579-2b47dcafa823",
                "6f7c724e-eba5-4f3c-a625-d33aa6c4fbb0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "3a376b49-f66c-41ac-bf4c-38a3218d4f77",
            "6779e914-af33-454a-bfc5-43cc56fb4193",
            "ffb4fa55-faeb-4dc0-9aa5-59779af07254"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6885cb60-7ebf-4b3c-9ff2-7cda8b4cfa24",
          "title": "Test on device.ts",
          "fullFile": "/Users/easycash/Loaner/tests/modeltests/devicetests.ts",
          "file": "/tests/modeltests/devicetests.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Device Creation test",
              "fullTitle": "Test on device.ts Device Creation test",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.assert.equal(devTested.getRef(), \"test1\");\nchai_1.assert.equal(devTested.getCategoryID(), 2);\nchai_1.assert.equal(devTested.getCategoryName(), \"Ordinateur\");\nchai_1.assert.equal(devTested.getName(), \"PremierTest\");\nchai_1.assert.equal(devTested.getVersion(), \"1.0\");\nchai_1.assert.equal(devTested.getPhoto(), \"url\");\nchai_1.assert.equal(devTested.getPhone(), \"0707070707\");\nchai_1.assert.isTrue(Array.isArray(devTested.getLockDays()));",
              "err": {},
              "uuid": "ada17ae3-d3d4-458e-a0f0-e57a7cf827c4",
              "parentUUID": "6885cb60-7ebf-4b3c-9ff2-7cda8b4cfa24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Device Modification test",
              "fullTitle": "Test on device.ts Device Modification test",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "devTested.setRef(\"modif\");\n//devTested.setCategory(\"Phone\");\ndevTested.setName(\"ModifTest\");\ndevTested.setVersion(\"1.1\");\ndevTested.setPhoto(\"url2\");\ndevTested.setPhone(\"0707070708\");\nchai_1.assert.equal(devTested.getRef(), \"modif\");\n//assert.equal(devTested.getCategory(),\"Phone\");\nchai_1.assert.equal(devTested.getName(), \"ModifTest\");\nchai_1.assert.equal(devTested.getVersion(), \"1.1\");\nchai_1.assert.equal(devTested.getPhoto(), \"url2\");\nchai_1.assert.equal(devTested.getPhone(), \"0707070708\");",
              "err": {},
              "uuid": "f7d2d462-6458-4462-8d88-feefb9537279",
              "parentUUID": "6885cb60-7ebf-4b3c-9ff2-7cda8b4cfa24",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "7ee03f23-3b1d-4920-ae0d-54854f3020fd",
              "title": "Constructor tests",
              "fullFile": "/Users/easycash/Loaner/tests/modeltests/devicetests.ts",
              "file": "/tests/modeltests/devicetests.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create a device with invalid references should throw error",
                  "fullTitle": "Test on device.ts Constructor tests Create a device with invalid references should throw error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(() => new device_1.default(\"test\", 1, \"Téléphones\", \"Second test\", \"1.0\", \"\", \"0778787878\")).to.throw(Error);\nchai_1.expect(() => new device_1.default(\"test33\", 1, \"Téléphones\", \"Third test\", \"1.0\", \"\", \"0778787878\")).to.throw(Error);",
                  "err": {},
                  "uuid": "8785db1c-4965-4acd-adc9-b6e589ddf0c3",
                  "parentUUID": "7ee03f23-3b1d-4920-ae0d-54854f3020fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a device with an invalid phone number should throw an error",
                  "fullTitle": "Test on device.ts Constructor tests Create a device with an invalid phone number should throw an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    chai_1.expect(() => new device_1.default(\"test8\", 1, \"Téléphones\", \"Phone Number test\", \"1.0\", \"\", \"+337787878787878787878787878\")).to.throw(Error);\n    chai_1.expect(() => new device_1.default(\"test9\", 1, \"Téléphones\", \"Phone Number test\", \"1.0\", \"\", \"++3377878787878\")).to.throw(Error);\n    chai_1.expect(() => new device_1.default(\"test10\", 1, \"Téléphones\", \"Phone Number test\", \"1.0\", \"\", \"842+54161654196\")).to.throw(Error);\n    chai_1.expect(() => new device_1.default(\"test11\", 1, \"Téléphones\", \"Phone Number test\", \"1.0\", \"\", \"te\")).to.throw(Error);\n});",
                  "err": {},
                  "uuid": "58fbed14-822f-4a57-a34a-9f656f912728",
                  "parentUUID": "7ee03f23-3b1d-4920-ae0d-54854f3020fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8785db1c-4965-4acd-adc9-b6e589ddf0c3",
                "58fbed14-822f-4a57-a34a-9f656f912728"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "273f5c39-0371-44df-8542-f1912d35b090",
              "title": "Testing the exceptions",
              "fullFile": "/Users/easycash/Loaner/tests/modeltests/devicetests.ts",
              "file": "/tests/modeltests/devicetests.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Setting a reference with higher or lower lenght than 5 should throw error",
                  "fullTitle": "Test on device.ts Testing the exceptions Setting a reference with higher or lower lenght than 5 should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringRef = \"reftest\";\nchai_1.expect(devTested.setRef.bind(devTested, stringRef)).to.throw(\"Invalid reference\");",
                  "err": {},
                  "uuid": "bfd42212-1bbc-4303-ab5d-ffab502a6701",
                  "parentUUID": "273f5c39-0371-44df-8542-f1912d35b090",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting a wrong size Name should throw error",
                  "fullTitle": "Test on device.ts Testing the exceptions Setting a wrong size Name should throw error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let stringName = \"\";\nchai_1.expect(devTested.setName.bind(devTested, stringName)).to.throw(\"Invalid name\");\nstringName = \"trentre et plus de noms pour le test\";\nchai_1.expect(devTested.setName.bind(devTested, stringName)).to.throw(\"Invalid name\");",
                  "err": {},
                  "uuid": "83b758da-9d9a-42f9-ac32-69866a22d8cf",
                  "parentUUID": "273f5c39-0371-44df-8542-f1912d35b090",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting a wrong version number size should throw an error",
                  "fullTitle": "Test on device.ts Testing the exceptions Setting a wrong version number size should throw an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let stringVersion = \"1\";\nchai_1.expect(devTested.setVersion.bind(devTested, stringVersion)).to.throw(\"Invalid version\");\nstringVersion = \"11\";\nchai_1.expect(devTested.setVersion.bind(devTested, stringVersion)).to.throw(\"Invalid version\");\nstringVersion = \"8888888888.88888888888888888888\";\nchai_1.expect(devTested.setVersion.bind(devTested, stringVersion)).to.throw(\"Invalid version\");",
                  "err": {},
                  "uuid": "e3c67a39-f740-4fb3-9966-fd15025ab9a6",
                  "parentUUID": "273f5c39-0371-44df-8542-f1912d35b090",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting a too long phone number size should throw an error",
                  "fullTitle": "Test on device.ts Testing the exceptions Setting a too long phone number size should throw an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringVersion = \"123456789102487\"; //15 caracters maximum, to respect the +999787878787 form\nchai_1.expect(devTested.setPhone.bind(devTested, stringVersion)).to.throw(\"Invalid phone\");",
                  "err": {},
                  "uuid": "d0981805-1d87-4093-a39b-104e63c97acd",
                  "parentUUID": "273f5c39-0371-44df-8542-f1912d35b090",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfd42212-1bbc-4303-ab5d-ffab502a6701",
                "83b758da-9d9a-42f9-ac32-69866a22d8cf",
                "e3c67a39-f740-4fb3-9966-fd15025ab9a6",
                "d0981805-1d87-4093-a39b-104e63c97acd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "ada17ae3-d3d4-458e-a0f0-e57a7cf827c4",
            "f7d2d462-6458-4462-8d88-feefb9537279"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fb2d22c3-2456-4d59-b785-28ac22e3746e",
          "title": "Tests on reservation.ts",
          "fullFile": "/Users/easycash/Loaner/tests/modeltests/reservationtest.ts",
          "file": "/tests/modeltests/reservationtest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Reservation creation",
              "fullTitle": "Tests on reservation.ts Reservation creation",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservation = new reservation_1.default(1, deviceRef, userId, startDate, endDate, returnDate);\nchai_1.assert.equal(reservation.getID(), 1);\nchai_1.assert.equal(reservation.getDevice(), deviceRef);\nchai_1.assert.equal(reservation.getUserID(), userId);\nchai_1.assert.equal(reservation.getStartDate().toISOString(), startDateISO);\nchai_1.assert.equal(reservation.getEndDate().toISOString(), endDateISO);\nchai_1.assert.isTrue(reservation.hasReturnDate());\nchai_1.assert.equal(reservation.getReturnDate().toISOString(), returnDateISO);",
              "err": {},
              "uuid": "296d3af2-9a0f-492e-94de-d4d48eb286fd",
              "parentUUID": "fb2d22c3-2456-4d59-b785-28ac22e3746e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reservation creation without return date",
              "fullTitle": "Tests on reservation.ts Reservation creation without return date",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservation = new reservation_1.default(1, deviceRef, userId, startDate, endDate);\nchai_1.assert.equal(reservation.getID(), 1);\nchai_1.assert.equal(reservation.getDevice(), deviceRef);\nchai_1.assert.equal(reservation.getUserID(), userId);\nchai_1.assert.equal(reservation.getStartDate().toISOString(), startDateISO);\nchai_1.assert.equal(reservation.getEndDate().toISOString(), endDateISO);\nchai_1.assert.isFalse(reservation.hasReturnDate());\nchai_1.expect(reservation.getReturnDate).to.throw(Error);",
              "err": {},
              "uuid": "409ef2fe-67fb-43b5-8ddc-6ae695b11ffd",
              "parentUUID": "fb2d22c3-2456-4d59-b785-28ac22e3746e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid ID throw an error",
              "fullTitle": "Tests on reservation.ts Invalid ID throw an error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => new reservation_1.default(-1, deviceRef, userId, startDate, endDate)).to.throw(\"Invalid ID\");",
              "err": {},
              "uuid": "38bba89e-afd9-46f7-a8ea-3f7b9329735e",
              "parentUUID": "fb2d22c3-2456-4d59-b785-28ac22e3746e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid device reference throw an error",
              "fullTitle": "Tests on reservation.ts Invalid device reference throw an error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => new reservation_1.default(1, \"PASVALIDE\", userId, startDate, endDate)).to.throw(\"Invalid device reference\");",
              "err": {},
              "uuid": "deee9547-9e6b-4113-a257-cdd65cd7b0df",
              "parentUUID": "fb2d22c3-2456-4d59-b785-28ac22e3746e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid user id throw an error",
              "fullTitle": "Tests on reservation.ts Invalid user id throw an error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => new reservation_1.default(1, deviceRef, \"INVAL\", startDate, endDate)).to.throw(\"Invalid user id\");",
              "err": {},
              "uuid": "bfbe565a-2397-4bd8-a965-0cd2901587e2",
              "parentUUID": "fb2d22c3-2456-4d59-b785-28ac22e3746e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid start date throw an error",
              "fullTitle": "Tests on reservation.ts Invalid start date throw an error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errMsg = \"Invalid start date\";\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, \"jenefaispas10caracteresdelong\", endDate)).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, \"0123456789\", endDate)).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, \"0-20-0\", endDate)).to.throw(errMsg);",
              "err": {},
              "uuid": "a44db875-2b00-4a02-a4f6-e38f04865f69",
              "parentUUID": "fb2d22c3-2456-4d59-b785-28ac22e3746e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid end date throw an error",
              "fullTitle": "Tests on reservation.ts Invalid end date throw an error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errMsg = \"Invalid end date\";\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, \"jenefaispas10caracteresdelong\")).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, \"0123456789\")).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, \"0-20-0\")).to.throw(errMsg);",
              "err": {},
              "uuid": "fcd41822-e1de-41dd-8486-ee97aaed2783",
              "parentUUID": "fb2d22c3-2456-4d59-b785-28ac22e3746e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid return date throw an error",
              "fullTitle": "Tests on reservation.ts Invalid return date throw an error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errMsg = \"Invalid return date\";\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, endDate, \"jenefaispas10caracteresdelong\")).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, endDate, \"0123456789\")).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, endDate, \"0-20-0\")).to.throw(errMsg);",
              "err": {},
              "uuid": "f38a382e-dd91-4cc6-b385-36f04c6e0bb5",
              "parentUUID": "fb2d22c3-2456-4d59-b785-28ac22e3746e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return date can be empty",
              "fullTitle": "Tests on reservation.ts Return date can be empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservation = new reservation_1.default(1, deviceRef, userId, startDate, endDate, \"\");\nchai_1.assert.isFalse(reservation.hasReturnDate());",
              "err": {},
              "uuid": "c02787a2-5a7c-4d11-8f11-ef79b917a822",
              "parentUUID": "fb2d22c3-2456-4d59-b785-28ac22e3746e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Method convertDate works",
              "fullTitle": "Tests on reservation.ts Method convertDate works",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.assert.equal(reservation_1.default.convertDate(new Date(startDateISO)), startDate);\nchai_1.assert.equal(reservation_1.default.convertDate(new Date(endDateISO)), endDate);\nchai_1.assert.equal(reservation_1.default.convertDate(new Date(returnDateISO)), returnDate);",
              "err": {},
              "uuid": "12df68a4-4a32-42f9-bb82-0ba98f5f23db",
              "parentUUID": "fb2d22c3-2456-4d59-b785-28ac22e3746e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Generate correct lockDays",
              "fullTitle": "Tests on reservation.ts Generate correct lockDays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservation1 = new reservation_1.default(1, deviceRef, userId, startDate, endDate);\nchai_1.expect(reservation1.getLockDays()).to.deep.equal([startDate, endDate]);\nconst reservation2 = new reservation_1.default(1, deviceRef, userId, startDate, returnDate);\nchai_1.expect(reservation2.getLockDays()).to.deep.equal([startDate, returnDate]);",
              "err": {},
              "uuid": "d776db89-9b92-4730-b229-ff246c3bb954",
              "parentUUID": "fb2d22c3-2456-4d59-b785-28ac22e3746e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "296d3af2-9a0f-492e-94de-d4d48eb286fd",
            "409ef2fe-67fb-43b5-8ddc-6ae695b11ffd",
            "38bba89e-afd9-46f7-a8ea-3f7b9329735e",
            "deee9547-9e6b-4113-a257-cdd65cd7b0df",
            "bfbe565a-2397-4bd8-a965-0cd2901587e2",
            "a44db875-2b00-4a02-a4f6-e38f04865f69",
            "fcd41822-e1de-41dd-8486-ee97aaed2783",
            "f38a382e-dd91-4cc6-b385-36f04c6e0bb5",
            "c02787a2-5a7c-4d11-8f11-ef79b917a822",
            "12df68a4-4a32-42f9-bb82-0ba98f5f23db",
            "d776db89-9b92-4730-b229-ff246c3bb954"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f364d2bb-15c4-48e1-8a28-b104cc923f5d",
          "title": "Tests on user.ts",
          "fullFile": "/Users/easycash/Loaner/tests/modeltests/usertest.ts",
          "file": "/tests/modeltests/usertest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "User Creation test",
              "fullTitle": "Tests on user.ts User Creation test",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.assert.equal(userTested.getId(), \"0000001\");\nchai_1.assert.equal(userTested.getFirstName(), \"Test\");\nchai_1.assert.equal(userTested.getLastName(), \"UserTest\");\nchai_1.assert.equal(userTested.getEmail(), \"test@gmail.com\");\nchai_1.assert.equal(userTested.isAdmin(), false);",
              "err": {},
              "uuid": "7b976438-c7dd-468a-97e6-36f49169b9d3",
              "parentUUID": "f364d2bb-15c4-48e1-8a28-b104cc923f5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Device Modification test",
              "fullTitle": "Tests on user.ts Device Modification test",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userTested.setId(\"0000002\");\nuserTested.setFirstName(\"Milan\");\nuserTested.setLastName(\"Bourbe\");\nuserTested.setEmail(\"MilanBourbe@guez.com\");\nuserTested.setAdmin(true);\nchai_1.assert.equal(userTested.getId(), \"0000002\");\nchai_1.assert.equal(userTested.getFirstName(), \"Milan\");\nchai_1.assert.equal(userTested.getLastName(), \"Bourbe\");\nchai_1.assert.equal(userTested.getEmail(), \"MilanBourbe@guez.com\");\nchai_1.assert.equal(userTested.isAdmin(), true);",
              "err": {},
              "uuid": "d490370b-228b-4bf5-a3dd-7a8993ed908c",
              "parentUUID": "f364d2bb-15c4-48e1-8a28-b104cc923f5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "f0e93afd-2eaa-47ff-b08e-564d790dec4b",
              "title": "Testing exceptions",
              "fullFile": "/Users/easycash/Loaner/tests/modeltests/usertest.ts",
              "file": "/tests/modeltests/usertest.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Setting an ID lower than 0 should throw an error",
                  "fullTitle": "Tests on user.ts Testing exceptions Setting an ID lower than 0 should throw an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(userTested.setId.bind(userTested, \"-1\")).to.throw(Error);",
                  "err": {},
                  "uuid": "34b3d4d3-7d70-49f5-a47e-9028f1215b65",
                  "parentUUID": "f0e93afd-2eaa-47ff-b08e-564d790dec4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting an empty firstname should throw an error",
                  "fullTitle": "Tests on user.ts Testing exceptions Setting an empty firstname should throw an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(userTested.setFirstName.bind(userTested, \"\")).to.throw(Error);",
                  "err": {},
                  "uuid": "7580111a-f465-4456-8aa6-dc57d51f3214",
                  "parentUUID": "f0e93afd-2eaa-47ff-b08e-564d790dec4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting an empty Lastname should throw an error",
                  "fullTitle": "Tests on user.ts Testing exceptions Setting an empty Lastname should throw an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(userTested.setLastName.bind(userTested, \"\")).to.throw(Error);",
                  "err": {},
                  "uuid": "de9305c2-a324-48df-a156-9831f487113b",
                  "parentUUID": "f0e93afd-2eaa-47ff-b08e-564d790dec4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting an invalid email form should throw an error",
                  "fullTitle": "Tests on user.ts Testing exceptions Setting an invalid email form should throw an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(userTested.setEmail.bind(userTested, \"test@test@test.fr\")).to.throw(Error);\nchai_1.expect(userTested.setEmail.bind(userTested, \"testtesttest.fr\")).to.throw(Error);\nchai_1.expect(userTested.setEmail.bind(userTested, \"test@.test@test.fr\")).to.throw(Error);\nchai_1.expect(userTested.setEmail.bind(userTested, \"test.test@testfr\")).to.throw(Error);",
                  "err": {},
                  "uuid": "62a58bea-3034-47a6-86ef-9bec53229b4f",
                  "parentUUID": "f0e93afd-2eaa-47ff-b08e-564d790dec4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34b3d4d3-7d70-49f5-a47e-9028f1215b65",
                "7580111a-f465-4456-8aa6-dc57d51f3214",
                "de9305c2-a324-48df-a156-9831f487113b",
                "62a58bea-3034-47a6-86ef-9bec53229b4f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "7b976438-c7dd-468a-97e6-36f49169b9d3",
            "d490370b-228b-4bf5-a3dd-7a8993ed908c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e3edee66-5abb-4810-9cc4-cf28d8bd6e66",
          "title": "POST /auth/login",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/auth_route_test.ts",
          "file": "/tests/routestests/auth_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"POST /auth/login\"",
              "fullTitle": "POST /auth/login \"before all\" hook in \"POST /auth/login\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "0057e31c-40d1-443e-b441-680151fc4b13",
              "parentUUID": "e3edee66-5abb-4810-9cc4-cf28d8bd6e66",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "authentification works",
              "fullTitle": "POST /auth/login authentification works",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/login')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"lilianb@mail.fr\",\n    password: \"fromage\"\n})\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    var _a;\n    if (!res.body.auth)\n        throw new Error(\"No field 'auth' specified\");\n    if (!res.body.token || res.body.token.length == 0)\n        throw new Error(\"Empty token returned\");\n    if (!res.body.user || res.body.user.id !== \"ABCDEFG\")\n        throw new Error(\"Invalid user returned\");\n    const token = ((_a = res.body.token) === null || _a === void 0 ? void 0 : _a.toString()) || \"\";\n    const decoded = jwt.verify(token, config.jwtSecret);\n    const id = decoded['id'] || \"\";\n    if (!decoded || id != \"ABCDEFG\")\n        throw new Error(\"Invalid token\");\n})\n    .end(done);",
              "err": {},
              "uuid": "a65833b6-e13e-4361-8cde-41c4da486216",
              "parentUUID": "e3edee66-5abb-4810-9cc4-cf28d8bd6e66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when already have a token",
              "fullTitle": "POST /auth/login responds error when already have a token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/login')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    email: \"lilianb@mail.fr\",\n    password: \"fromage\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"You already have a token\"\n}, done);",
              "err": {},
              "uuid": "ddcc3b94-b54f-40f1-98f8-aaf1ca85b12b",
              "parentUUID": "e3edee66-5abb-4810-9cc4-cf28d8bd6e66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when email is invalid",
              "fullTitle": "POST /auth/login responds error when email is invalid",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/login')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"paslabonneadresse@mail.fr\",\n    password: \"fromage\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name or password\"\n}, done);",
              "err": {},
              "uuid": "973e953d-fc1b-4ba5-bc63-00daa35d34d1",
              "parentUUID": "e3edee66-5abb-4810-9cc4-cf28d8bd6e66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when password is invalid",
              "fullTitle": "POST /auth/login responds error when password is invalid",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/login')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"lilianb@mail.fr\",\n    password: \"paslebonmdp\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name or password\"\n}, done);",
              "err": {},
              "uuid": "ed588bff-62c3-4d6f-a811-29528885b7e8",
              "parentUUID": "e3edee66-5abb-4810-9cc4-cf28d8bd6e66",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a65833b6-e13e-4361-8cde-41c4da486216",
            "ddcc3b94-b54f-40f1-98f8-aaf1ca85b12b",
            "973e953d-fc1b-4ba5-bc63-00daa35d34d1",
            "ed588bff-62c3-4d6f-a811-29528885b7e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 255,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "58b25a7e-13df-4c2e-9314-4b74976dad27",
          "title": "POST /auth/password/change",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/auth_route_test.ts",
          "file": "/tests/routestests/auth_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /auth/password/change\"",
              "fullTitle": "POST /auth/password/change \"before each\" hook in \"POST /auth/password/change\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "3ec331e7-f022-452d-a239-8f9a4440b0d8",
              "parentUUID": "58b25a7e-13df-4c2e-9314-4b74976dad27",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error if new password is empty",
              "fullTitle": "POST /auth/password/change responds error if new password is empty",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/password/change')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"lilianb@mail.fr\",\n    oldPassword: \"fromage\",\n    newPassword: \"\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"New password can't be empty\"\n}, done);",
              "err": {},
              "uuid": "391b46f0-b1c5-4141-a0fa-fc19e8a66444",
              "parentUUID": "58b25a7e-13df-4c2e-9314-4b74976dad27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error if old password is incorrect",
              "fullTitle": "POST /auth/password/change responds error if old password is incorrect",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/password/change')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"lilianb@mail.fr\",\n    oldPassword: \"paslebon\",\n    newPassword: \"salade\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name or old password\"\n}, done);",
              "err": {},
              "uuid": "d8d79233-11a2-4b5c-bbf5-ff43e41000b7",
              "parentUUID": "58b25a7e-13df-4c2e-9314-4b74976dad27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error if email is incorrect",
              "fullTitle": "POST /auth/password/change responds error if email is incorrect",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/password/change')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"paslebon@mail.fr\",\n    oldPassword: \"fromage\",\n    newPassword: \"salade\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name or old password\"\n}, done);",
              "err": {},
              "uuid": "5eceb551-0a3d-44d7-8297-492d49dd88b4",
              "parentUUID": "58b25a7e-13df-4c2e-9314-4b74976dad27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /auth/password/change responds error with no token",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "a8f9117e-382c-4b3b-8ecf-206e454bb423",
              "parentUUID": "58b25a7e-13df-4c2e-9314-4b74976dad27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /auth/password/change responds error with invalid token",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "6c9484b1-816c-4cf6-a95a-86af455a6406",
              "parentUUID": "58b25a7e-13df-4c2e-9314-4b74976dad27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid user ID token",
              "fullTitle": "POST /auth/password/change responds error with invalid user ID token",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", token)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid user\"\n}, done);",
              "err": {},
              "uuid": "25cbd84e-fd18-4d13-b72c-66093105638c",
              "parentUUID": "58b25a7e-13df-4c2e-9314-4b74976dad27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "password change works",
              "fullTitle": "POST /auth/password/change password change works",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/password/change')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    email: \"lilianb@mail.fr\",\n    oldPassword: \"fromage\",\n    newPassword: \"salade\"\n})\n    .expect('Content-Type', /json/)\n    .expect(201, {\n    success: true,\n    user: {\n        id: \"ABCDEFG\",\n        firstName: \"Lilian\",\n        lastName: \"Bethus\",\n        email: \"lilianb@mail.fr\",\n        admin: true,\n        temporaryPassword: false\n    }\n}, done);",
              "err": {},
              "uuid": "2a98bd21-a642-4ed0-acad-ae1eff509737",
              "parentUUID": "58b25a7e-13df-4c2e-9314-4b74976dad27",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "391b46f0-b1c5-4141-a0fa-fc19e8a66444",
            "d8d79233-11a2-4b5c-bbf5-ff43e41000b7",
            "5eceb551-0a3d-44d7-8297-492d49dd88b4",
            "a8f9117e-382c-4b3b-8ecf-206e454bb423",
            "6c9484b1-816c-4cf6-a95a-86af455a6406",
            "25cbd84e-fd18-4d13-b72c-66093105638c",
            "2a98bd21-a642-4ed0-acad-ae1eff509737"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 637,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "625b94da-2c02-42ea-a130-296efb86bf6c",
          "title": "PUT /category/add/:category_name",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/category_route_test.ts",
          "file": "/tests/routestests/category_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"PUT /category/add/:category_name\"",
              "fullTitle": "PUT /category/add/:category_name \"before each\" hook in \"PUT /category/add/:category_name\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "b4d054d5-3886-4241-8e68-b09d34a77dad",
              "parentUUID": "625b94da-2c02-42ea-a130-296efb86bf6c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when too long name is given",
              "fullTitle": "PUT /category/add/:category_name responds error when too long name is given",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/category/add/' + new Array(257).join(\"A\"))\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name\"\n}, done);",
              "err": {},
              "uuid": "7d82cc36-67be-4426-9101-b1287e307bfc",
              "parentUUID": "625b94da-2c02-42ea-a130-296efb86bf6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when category name already exists",
              "fullTitle": "PUT /category/add/:category_name responds error when category name already exists",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/category/add/Ordinateurs')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Category name already exists\"\n}, done);",
              "err": {},
              "uuid": "3fe146cd-5766-4df0-ac74-d1a50758b7c8",
              "parentUUID": "625b94da-2c02-42ea-a130-296efb86bf6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "PUT /category/add/:category_name responds error with no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "0a0b7079-033c-46d8-b0c8-e8135dd61f4a",
              "parentUUID": "625b94da-2c02-42ea-a130-296efb86bf6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "PUT /category/add/:category_name responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "49420a50-780e-4eed-bdd1-a380408737df",
              "parentUUID": "625b94da-2c02-42ea-a130-296efb86bf6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "PUT /category/add/:category_name responds error with not admin privileges token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "02b8f4d8-c098-429d-8711-208546a4df92",
              "parentUUID": "625b94da-2c02-42ea-a130-296efb86bf6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "adding category works",
              "fullTitle": "PUT /category/add/:category_name adding category works",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/category/add/Test')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "f531a480-ff14-440b-82fe-46994fdd9f3f",
              "parentUUID": "625b94da-2c02-42ea-a130-296efb86bf6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d82cc36-67be-4426-9101-b1287e307bfc",
            "3fe146cd-5766-4df0-ac74-d1a50758b7c8",
            "0a0b7079-033c-46d8-b0c8-e8135dd61f4a",
            "49420a50-780e-4eed-bdd1-a380408737df",
            "02b8f4d8-c098-429d-8711-208546a4df92",
            "f531a480-ff14-440b-82fe-46994fdd9f3f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8bcdd01f-7256-4f94-be8e-941422fdfd0d",
          "title": "POST /category/modify",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/category_route_test.ts",
          "file": "/tests/routestests/category_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /category/modify\"",
              "fullTitle": "POST /category/modify \"before each\" hook in \"POST /category/modify\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "a241a120-adfe-4f39-bc21-51900d4a7a78",
              "parentUUID": "8bcdd01f-7256-4f94-be8e-941422fdfd0d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when not existing category name is given",
              "fullTitle": "POST /category/modify responds error when not existing category name is given",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/category/modify')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    oldName: \"Existepas\",\n    newName: \"Existepasnonplus\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid category name\"\n}, done);",
              "err": {},
              "uuid": "e5af5536-34b8-4bf9-9511-74eb6b240d6a",
              "parentUUID": "8bcdd01f-7256-4f94-be8e-941422fdfd0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when old name is equals to new name",
              "fullTitle": "POST /category/modify responds error when old name is equals to new name",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/category/modify')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    oldName: \"Ordinateurs\",\n    newName: \"Ordinateurs\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Old name can't be the equal to new name\"\n}, done);",
              "err": {},
              "uuid": "206a56ec-83ba-4cbc-890e-375bc53c06f6",
              "parentUUID": "8bcdd01f-7256-4f94-be8e-941422fdfd0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when new name already exists",
              "fullTitle": "POST /category/modify responds error when new name already exists",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/category/modify')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    oldName: \"Ordinateurs\",\n    newName: \"Téléphones\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"New name is already set for a category\"\n}, done);",
              "err": {},
              "uuid": "b6250aac-02c4-4872-8e8e-e01fca5b1cff",
              "parentUUID": "8bcdd01f-7256-4f94-be8e-941422fdfd0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /category/modify responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "04a65821-b7ca-4c03-a377-ad2bae0149d6",
              "parentUUID": "8bcdd01f-7256-4f94-be8e-941422fdfd0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /category/modify responds error with invalid token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "5b92eef2-0e50-43b4-8862-e119a4fa740c",
              "parentUUID": "8bcdd01f-7256-4f94-be8e-941422fdfd0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "POST /category/modify responds error with not admin privileges token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "3b70b65c-31e1-407b-bfaa-647a1e38ac9c",
              "parentUUID": "8bcdd01f-7256-4f94-be8e-941422fdfd0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "modifying category works",
              "fullTitle": "POST /category/modify modifying category works",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/category/modify')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    oldName: \"Ordinateurs\",\n    newName: \"Courgette\"\n})\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "4ad28d38-cb29-41de-86c0-4c92f076a196",
              "parentUUID": "8bcdd01f-7256-4f94-be8e-941422fdfd0d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e5af5536-34b8-4bf9-9511-74eb6b240d6a",
            "206a56ec-83ba-4cbc-890e-375bc53c06f6",
            "b6250aac-02c4-4872-8e8e-e01fca5b1cff",
            "04a65821-b7ca-4c03-a377-ad2bae0149d6",
            "5b92eef2-0e50-43b4-8862-e119a4fa740c",
            "3b70b65c-31e1-407b-bfaa-647a1e38ac9c",
            "4ad28d38-cb29-41de-86c0-4c92f076a196"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "755082c3-98fc-4b0a-b33e-8bc3dcb595ca",
          "title": "POST /category/delete/:id_category",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/category_route_test.ts",
          "file": "/tests/routestests/category_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /category/delete/:id_category\"",
              "fullTitle": "POST /category/delete/:id_category \"before each\" hook in \"POST /category/delete/:id_category\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "7b8adb6d-5e64-4b31-8273-cd8db7cf04ad",
              "parentUUID": "755082c3-98fc-4b0a-b33e-8bc3dcb595ca",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when category ID is not a number",
              "fullTitle": "POST /category/delete/:id_category responds error when category ID is not a number",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/category/delete/PASUNNOMBRE')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Category ID is not a number\"\n}, done);",
              "err": {},
              "uuid": "055bff17-615b-4523-9338-e33e50f6f38f",
              "parentUUID": "755082c3-98fc-4b0a-b33e-8bc3dcb595ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when category ID doesnt exists",
              "fullTitle": "POST /category/delete/:id_category responds error when category ID doesnt exists",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/category/delete/99')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid category ID\"\n}, done);",
              "err": {},
              "uuid": "3917d905-845e-47f4-8a87-3858b91c809f",
              "parentUUID": "755082c3-98fc-4b0a-b33e-8bc3dcb595ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /category/delete/:id_category responds error with no token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "1bd35a16-42b4-4514-b858-04cb533b4b2e",
              "parentUUID": "755082c3-98fc-4b0a-b33e-8bc3dcb595ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /category/delete/:id_category responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "abd71f8b-edaf-4558-a0fc-a904e849ea2a",
              "parentUUID": "755082c3-98fc-4b0a-b33e-8bc3dcb595ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "POST /category/delete/:id_category responds error with not admin privileges token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "3ece37ad-ce0f-4a37-ab07-9999835ab7db",
              "parentUUID": "755082c3-98fc-4b0a-b33e-8bc3dcb595ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleting category works",
              "fullTitle": "POST /category/delete/:id_category deleting category works",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/category/delete/1')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "8597fe58-0c39-4437-bb70-87267afc6bb2",
              "parentUUID": "755082c3-98fc-4b0a-b33e-8bc3dcb595ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "055bff17-615b-4523-9338-e33e50f6f38f",
            "3917d905-845e-47f4-8a87-3858b91c809f",
            "1bd35a16-42b4-4514-b858-04cb533b4b2e",
            "abd71f8b-edaf-4558-a0fc-a904e849ea2a",
            "3ece37ad-ce0f-4a37-ab07-9999835ab7db",
            "8597fe58-0c39-4437-bb70-87267afc6bb2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ac557c52-f731-42e3-9d5d-2429b4628df4",
          "title": "GET /devices/all",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /devices/all\"",
              "fullTitle": "GET /devices/all \"before all\" hook in \"GET /devices/all\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "c7d28958-44f9-40c7-b418-aa09230e32bd",
              "parentUUID": "ac557c52-f731-42e3-9d5d-2429b4628df4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds with json",
              "fullTitle": "GET /devices/all responds with json",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, done);",
              "err": {},
              "uuid": "e07a3313-ddd4-48c2-9e75-5392c68296bb",
              "parentUUID": "ac557c52-f731-42e3-9d5d-2429b4628df4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /devices/all responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "fb05453b-2787-4f73-9ea4-7e4666dbc43e",
              "parentUUID": "ac557c52-f731-42e3-9d5d-2429b4628df4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /devices/all responds error with invalid token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "af253ffb-21fb-4517-9e29-b10cac905546",
              "parentUUID": "ac557c52-f731-42e3-9d5d-2429b4628df4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations",
              "fullTitle": "GET /devices/all responds with correct devices informations",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: [{\n                    ref: \"AN001\",\n                    categoryID: 1,\n                    categoryName: \"Téléphones\",\n                    name: \"Samsung Galaxy S1000\",\n                    version: \"1.0\",\n                    photo: \"https://media.ldlc.com/r1600/ld/products/00/05/30/35/LD0005303584_2.jpg\",\n                    phone: \"0123456789\",\n                    lockDays: [\n                        [\"2021-01-05\", \"2021-01-08\"],\n                        [\"2021-01-09\", \"2021-02-08\"]\n                    ]\n                }, {\n                    ref: \"AN002\",\n                    categoryID: 1,\n                    categoryName: \"Téléphones\",\n                    name: \"Huawei P80\",\n                    version: \"1.1\",\n                    photo: \"https://media.ldlc.com/r1600/ld/products/00/05/39/99/LD0005399909_2.jpg\",\n                    phone: \"1234567890\",\n                    lockDays: []\n                }]\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: [{\n                    ref: \"PC001\",\n                    categoryID: 2,\n                    categoryName: \"Ordinateurs\",\n                    name: \"Acer Pro Max\",\n                    version: \"1.0\",\n                    photo: \"https://static.acer.com/up/Resource/Acer/Laptops/Spin_5/Image/20180824/acer-Spin_5_SP513-53N-main.png\",\n                    phone: \"\",\n                    lockDays: [\n                        [\"2021-01-04\", \"2021-02-04\"]\n                    ]\n                }]\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "b256e2b1-fdce-41a7-b989-3c04133faeac",
              "parentUUID": "ac557c52-f731-42e3-9d5d-2429b4628df4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e07a3313-ddd4-48c2-9e75-5392c68296bb",
            "fb05453b-2787-4f73-9ea4-7e4666dbc43e",
            "af253ffb-21fb-4517-9e29-b10cac905546",
            "b256e2b1-fdce-41a7-b989-3c04133faeac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "60a9fe89-40ab-4aa4-9917-4dfe8d729bb9",
          "title": "GET /devices/:device_ref",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /devices/:device_ref\"",
              "fullTitle": "GET /devices/:device_ref \"before all\" hook in \"GET /devices/:device_ref\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "47fa0d2e-1e4c-47b9-91a0-d580a0e1c094",
              "parentUUID": "60a9fe89-40ab-4aa4-9917-4dfe8d729bb9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds with json",
              "fullTitle": "GET /devices/:device_ref responds with json",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/AN001')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, done);",
              "err": {},
              "uuid": "6e668700-a6d9-4919-aa7f-82d86f27b476",
              "parentUUID": "60a9fe89-40ab-4aa4-9917-4dfe8d729bb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when device reference is invalid",
              "fullTitle": "GET /devices/:device_ref responds error when device reference is invalid",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/PASBON')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid device reference\"\n}, done);",
              "err": {},
              "uuid": "dbb5ae65-2239-4841-8985-d8bab41ca076",
              "parentUUID": "60a9fe89-40ab-4aa4-9917-4dfe8d729bb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /devices/:device_ref responds error with no token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "4e28a691-9cda-4dc6-9b5f-c94316e18bb6",
              "parentUUID": "60a9fe89-40ab-4aa4-9917-4dfe8d729bb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /devices/:device_ref responds error with invalid token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "8f0524dd-9758-409d-9766-26697d69a37d",
              "parentUUID": "60a9fe89-40ab-4aa4-9917-4dfe8d729bb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations",
              "fullTitle": "GET /devices/:device_ref responds with correct devices informations",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/AN001')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal({\n        ref: \"AN001\",\n        categoryID: 1,\n        categoryName: \"Téléphones\",\n        name: \"Samsung Galaxy S1000\",\n        version: \"1.0\",\n        photo: \"https://media.ldlc.com/r1600/ld/products/00/05/30/35/LD0005303584_2.jpg\",\n        phone: \"0123456789\",\n        lockDays: [\n            [\"2021-01-05\", \"2021-01-08\"],\n            [\"2021-01-09\", \"2021-02-08\"]\n        ]\n    });\n})\n    .end(done);",
              "err": {},
              "uuid": "8e609410-88bd-43e9-9138-42f641c40629",
              "parentUUID": "60a9fe89-40ab-4aa4-9917-4dfe8d729bb9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6e668700-a6d9-4919-aa7f-82d86f27b476",
            "dbb5ae65-2239-4841-8985-d8bab41ca076",
            "4e28a691-9cda-4dc6-9b5f-c94316e18bb6",
            "8f0524dd-9758-409d-9766-26697d69a37d",
            "8e609410-88bd-43e9-9138-42f641c40629"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1d158e80-4ffe-4be5-b17d-77fc64ede95e",
          "title": "GET /devices/all?filter_name=filter_value&...",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /devices/all?filter_name=filter_value&...\"",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... \"before all\" hook in \"GET /devices/all?filter_name=filter_value&...\"",
              "timedOut": false,
              "duration": 30,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "abf97292-8eca-488d-b8ff-a4ec690eb09f",
              "parentUUID": "1d158e80-4ffe-4be5-b17d-77fc64ede95e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds nothing when device reference is invalid",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds nothing when device reference is invalid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?ref=PABON')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: []\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: []\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "83803aa0-296e-4a84-af2b-d6842ff8f5df",
              "parentUUID": "1d158e80-4ffe-4be5-b17d-77fc64ede95e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds nothing when device name is invalid",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds nothing when device name is invalid",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?name=PABON')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: []\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: []\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "22d4c491-6d5a-47d0-9f5b-64c20d094a86",
              "parentUUID": "1d158e80-4ffe-4be5-b17d-77fc64ede95e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when device category is invalid",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds error when device category is invalid",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?category=PABON')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid category name\"\n}, done);",
              "err": {},
              "uuid": "8def44db-5374-4b1f-beb9-ea82581179a0",
              "parentUUID": "1d158e80-4ffe-4be5-b17d-77fc64ede95e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "f1f01218-2f4c-4360-8c7d-8ca4b1ead979",
              "parentUUID": "1d158e80-4ffe-4be5-b17d-77fc64ede95e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds error with invalid token",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "0711e915-62e5-4e54-bb88-026440a6c842",
              "parentUUID": "1d158e80-4ffe-4be5-b17d-77fc64ede95e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations with ref only",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds with correct devices informations with ref only",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?ref=AN001')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: [{\n                    ref: \"AN001\",\n                    categoryID: 1,\n                    categoryName: \"Téléphones\",\n                    name: \"Samsung Galaxy S1000\",\n                    version: \"1.0\",\n                    photo: \"https://media.ldlc.com/r1600/ld/products/00/05/30/35/LD0005303584_2.jpg\",\n                    phone: \"0123456789\",\n                    lockDays: [\n                        [\"2021-01-05\", \"2021-01-08\"],\n                        [\"2021-01-09\", \"2021-02-08\"]\n                    ]\n                }]\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: []\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "374b492f-a6fe-419f-8fa1-e8968ecede3a",
              "parentUUID": "1d158e80-4ffe-4be5-b17d-77fc64ede95e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations with name only",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds with correct devices informations with name only",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?name=Samsung Galaxy S1000')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: [{\n                    ref: \"AN001\",\n                    categoryID: 1,\n                    categoryName: \"Téléphones\",\n                    name: \"Samsung Galaxy S1000\",\n                    version: \"1.0\",\n                    photo: \"https://media.ldlc.com/r1600/ld/products/00/05/30/35/LD0005303584_2.jpg\",\n                    phone: \"0123456789\",\n                    lockDays: [\n                        [\"2021-01-05\", \"2021-01-08\"],\n                        [\"2021-01-09\", \"2021-02-08\"]\n                    ]\n                }]\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: []\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "06c2f5c9-f998-4913-a8e8-314a132354ae",
              "parentUUID": "1d158e80-4ffe-4be5-b17d-77fc64ede95e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations with category only",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds with correct devices informations with category only",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?category=Ordinateurs')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: []\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: [{\n                    ref: \"PC001\",\n                    categoryID: 2,\n                    categoryName: \"Ordinateurs\",\n                    name: \"Acer Pro Max\",\n                    version: \"1.0\",\n                    photo: \"https://static.acer.com/up/Resource/Acer/Laptops/Spin_5/Image/20180824/acer-Spin_5_SP513-53N-main.png\",\n                    phone: \"\",\n                    lockDays: [[\"2021-01-04\", \"2021-02-04\"]]\n                }]\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "692a99c8-bd63-4f73-8a73-459c261d05bb",
              "parentUUID": "1d158e80-4ffe-4be5-b17d-77fc64ede95e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations with all filters",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds with correct devices informations with all filters",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?ref=PC001&name=Acer Pro Max&category=Ordinateurs')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: []\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: [{\n                    ref: \"PC001\",\n                    categoryID: 2,\n                    categoryName: \"Ordinateurs\",\n                    name: \"Acer Pro Max\",\n                    version: \"1.0\",\n                    photo: \"https://static.acer.com/up/Resource/Acer/Laptops/Spin_5/Image/20180824/acer-Spin_5_SP513-53N-main.png\",\n                    phone: \"\",\n                    lockDays: [[\"2021-01-04\", \"2021-02-04\"]]\n                }]\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "d8e8d26d-ddf0-4ba9-bdbf-e1d0053c6131",
              "parentUUID": "1d158e80-4ffe-4be5-b17d-77fc64ede95e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "83803aa0-296e-4a84-af2b-d6842ff8f5df",
            "22d4c491-6d5a-47d0-9f5b-64c20d094a86",
            "8def44db-5374-4b1f-beb9-ea82581179a0",
            "f1f01218-2f4c-4360-8c7d-8ca4b1ead979",
            "0711e915-62e5-4e54-bb88-026440a6c842",
            "374b492f-a6fe-419f-8fa1-e8968ecede3a",
            "06c2f5c9-f998-4913-a8e8-314a132354ae",
            "692a99c8-bd63-4f73-8a73-459c261d05bb",
            "d8e8d26d-ddf0-4ba9-bdbf-e1d0053c6131"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 54,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fafa9f82-e733-4461-b7cc-906d58f91775",
          "title": "POST /devices/borrow/:id_utilisateur",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /devices/borrow/:id_utilisateur\"",
              "fullTitle": "POST /devices/borrow/:id_utilisateur \"before each\" hook in \"POST /devices/borrow/:id_utilisateur\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "0c98b9ea-a404-4bfe-bdc1-b615ea654aaa",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when startDate is after endDate",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when startDate is after endDate",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2021-02-30\", \"2021-02-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Start date is after end date\"\n}, done);",
              "err": {},
              "uuid": "2f09d78e-7484-4607-a6d8-07cfb95191d3",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when no commands are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when no commands are given",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"No commands given\"\n}, done);",
              "err": {},
              "uuid": "792982ba-9807-4276-94e4-78d137ceaa2f",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when no reference are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when no reference are given",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            loanDays: [\"2021-01-02\", \"2021-01-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"No reference given\"\n}, done);",
              "err": {},
              "uuid": "aeeb3159-d79f-4225-96cc-10a0a0d9216b",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when no loanDays are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when no loanDays are given",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\"\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"No loanDays given\"\n}, done);",
              "err": {},
              "uuid": "989b384c-d21b-4c81-91a7-fd3520e94caf",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when loanDays is not an array",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when loanDays is not an array",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: 67\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid loanDays\"\n}, done);",
              "err": {},
              "uuid": "689b7f84-3bf7-413a-a496-ca301d1d7e72",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when less than two loanDays are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when less than two loanDays are given",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2020-04-12\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid loanDays count\"\n}, done);",
              "err": {},
              "uuid": "e1fce995-4a56-41cc-b8b7-3041af288be9",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when more than two loanDays are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when more than two loanDays are given",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2020-04-12\", \"2020-04-14\", \"2020-04-16\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid loanDays count\"\n}, done);",
              "err": {},
              "uuid": "106cbace-5b71-4c0c-8c4b-9262356dcf33",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when there already is a reservation in the given period",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when there already is a reservation in the given period",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2021-01-02\", \"2021-01-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Reservation already exists\"\n}, done);",
              "err": {},
              "uuid": "58a1f830-f65c-47c9-b828-ffef2579834b",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when start date is invalid",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when start date is invalid",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"01-s\", \"2021-01-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid start date\"\n}, done);",
              "err": {},
              "uuid": "611f1ce0-1c99-43b4-8d6b-8c689ef8b008",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when end date is invalid",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when end date is invalid",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2021-01-20\", \"20-s\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid end date\"\n}, done);",
              "err": {},
              "uuid": "37874d4c-ba9c-492d-8ff0-6cd06afdd1f5",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error with no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "9a631bb9-4eb2-4e10-9144-181f9cd423bb",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error with invalid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "8eb6cd10-4837-4efe-9329-a0a3762f6cdf",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid user ID token",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error with invalid user ID token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", token)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid user\"\n}, done);",
              "err": {},
              "uuid": "3de66ed0-2d9e-402f-a2dc-3ccca4bb3630",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "borrow devices works",
              "fullTitle": "POST /devices/borrow/:id_utilisateur borrow devices works",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2021-05-05\", \"2021-05-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "0f4d4dad-f1e0-4cc1-8634-7f92d8542c8f",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "borrow multiple devices works",
              "fullTitle": "POST /devices/borrow/:id_utilisateur borrow multiple devices works",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [\n        {\n            reference: \"AN001\",\n            loanDays: [\"2021-05-05\", \"2021-05-15\"]\n        },\n        {\n            reference: \"AN002\",\n            loanDays: [\"2021-05-05\", \"2021-05-15\"]\n        }\n    ]\n})\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "cc8e5f18-43c8-455a-8eaa-9163011b45b8",
              "parentUUID": "fafa9f82-e733-4461-b7cc-906d58f91775",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f09d78e-7484-4607-a6d8-07cfb95191d3",
            "792982ba-9807-4276-94e4-78d137ceaa2f",
            "aeeb3159-d79f-4225-96cc-10a0a0d9216b",
            "989b384c-d21b-4c81-91a7-fd3520e94caf",
            "689b7f84-3bf7-413a-a496-ca301d1d7e72",
            "e1fce995-4a56-41cc-b8b7-3041af288be9",
            "106cbace-5b71-4c0c-8c4b-9262356dcf33",
            "58a1f830-f65c-47c9-b828-ffef2579834b",
            "611f1ce0-1c99-43b4-8d6b-8c689ef8b008",
            "37874d4c-ba9c-492d-8ff0-6cd06afdd1f5",
            "9a631bb9-4eb2-4e10-9144-181f9cd423bb",
            "8eb6cd10-4837-4efe-9329-a0a3762f6cdf",
            "3de66ed0-2d9e-402f-a2dc-3ccca4bb3630",
            "0f4d4dad-f1e0-4cc1-8634-7f92d8542c8f",
            "cc8e5f18-43c8-455a-8eaa-9163011b45b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 92,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cf2f0ccb-4ab5-46c9-9d0d-cdd3443a4eb0",
          "title": "PUT /devices/add/",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"PUT /devices/add/\"",
              "fullTitle": "PUT /devices/add/ \"before each\" hook in \"PUT /devices/add/\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "d5d58500-3c72-401f-b5d1-95937f4ee992",
              "parentUUID": "cf2f0ccb-4ab5-46c9-9d0d-cdd3443a4eb0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when category name is invalid",
              "fullTitle": "PUT /devices/add/ responds error when category name is invalid",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"AN003\",\n    name: \"Honor 10\",\n    category: \"EXISTEPAS\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Invalid category name\"\n}, done);",
              "err": {},
              "uuid": "57c2be19-2a78-47a6-80cf-c42a267a0ea0",
              "parentUUID": "cf2f0ccb-4ab5-46c9-9d0d-cdd3443a4eb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when reference is invalid",
              "fullTitle": "PUT /devices/add/ responds error when reference is invalid",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"PASVALIDE\",\n    name: \"Honor 10\",\n    category: \"Téléphones\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Invalid reference\"\n}, done);",
              "err": {},
              "uuid": "2c0adf40-7312-4821-99a6-8686e646caf0",
              "parentUUID": "cf2f0ccb-4ab5-46c9-9d0d-cdd3443a4eb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when reference is missing",
              "fullTitle": "PUT /devices/add/ responds error when reference is missing",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    name: \"Honor 10\",\n    category: \"Téléphones\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Missing reference\"\n}, done);",
              "err": {},
              "uuid": "97ed37fe-8b85-4d57-b506-d40728128c84",
              "parentUUID": "cf2f0ccb-4ab5-46c9-9d0d-cdd3443a4eb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when category is missing",
              "fullTitle": "PUT /devices/add/ responds error when category is missing",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"AN003\",\n    name: \"Honor 10\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Missing category name\"\n}, done);",
              "err": {},
              "uuid": "1388cc0f-c5dd-4b67-a36e-a0f2423e9a87",
              "parentUUID": "cf2f0ccb-4ab5-46c9-9d0d-cdd3443a4eb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when reference already exists",
              "fullTitle": "PUT /devices/add/ responds error when reference already exists",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"AN001\",\n    name: \"Honor 10\",\n    category: \"Téléphones\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Device reference is already used\"\n}, done);",
              "err": {},
              "uuid": "10f0fcb6-9148-4c3b-a4bd-98c26d939ff4",
              "parentUUID": "cf2f0ccb-4ab5-46c9-9d0d-cdd3443a4eb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "PUT /devices/add/ responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "32e9e87c-dcdb-4eb2-b683-5bfc56cb0e6c",
              "parentUUID": "cf2f0ccb-4ab5-46c9-9d0d-cdd3443a4eb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "PUT /devices/add/ responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "23a3405e-686f-4b93-b6d5-03fe6d551174",
              "parentUUID": "cf2f0ccb-4ab5-46c9-9d0d-cdd3443a4eb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "PUT /devices/add/ responds error with not admin privileges token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "04ed70ea-ab2e-4b8a-b541-64ebe6f7d80e",
              "parentUUID": "cf2f0ccb-4ab5-46c9-9d0d-cdd3443a4eb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "adding device works",
              "fullTitle": "PUT /devices/add/ adding device works",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"AN003\",\n    name: \"Honor 10\",\n    category: \"Téléphones\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(201, done);",
              "err": {},
              "uuid": "513dd168-5b12-4148-bd7b-a73a8b4da553",
              "parentUUID": "cf2f0ccb-4ab5-46c9-9d0d-cdd3443a4eb0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "57c2be19-2a78-47a6-80cf-c42a267a0ea0",
            "2c0adf40-7312-4821-99a6-8686e646caf0",
            "97ed37fe-8b85-4d57-b506-d40728128c84",
            "1388cc0f-c5dd-4b67-a36e-a0f2423e9a87",
            "10f0fcb6-9148-4c3b-a4bd-98c26d939ff4",
            "32e9e87c-dcdb-4eb2-b683-5bfc56cb0e6c",
            "23a3405e-686f-4b93-b6d5-03fe6d551174",
            "04ed70ea-ab2e-4b8a-b541-64ebe6f7d80e",
            "513dd168-5b12-4148-bd7b-a73a8b4da553"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cdb69553-fbcc-4b7f-990e-d358291cff44",
          "title": "DELETE /devices/delete/:device_id",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"DELETE /devices/delete/:device_id\"",
              "fullTitle": "DELETE /devices/delete/:device_id \"before each\" hook in \"DELETE /devices/delete/:device_id\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "92d1811d-523e-42ef-b5a2-284ccbe30060",
              "parentUUID": "cdb69553-fbcc-4b7f-990e-d358291cff44",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when device reference is invalid",
              "fullTitle": "DELETE /devices/delete/:device_id responds error when device reference is invalid",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/devices/delete/PASVALID')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect(400, {\n    error: true,\n    message: \"Invalid device reference\"\n}, done);",
              "err": {},
              "uuid": "65780fe8-1df1-46b2-a7f3-be122f272b9d",
              "parentUUID": "cdb69553-fbcc-4b7f-990e-d358291cff44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "DELETE /devices/delete/:device_id responds error with no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "02ef311a-d04d-41b9-b09b-31736a9dd4b8",
              "parentUUID": "cdb69553-fbcc-4b7f-990e-d358291cff44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "DELETE /devices/delete/:device_id responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "f93a8e69-92ca-457f-8941-ad15c2bf77fb",
              "parentUUID": "cdb69553-fbcc-4b7f-990e-d358291cff44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "DELETE /devices/delete/:device_id responds error with not admin privileges token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "e1cbeb8a-d139-442c-aba2-bed727d4234a",
              "parentUUID": "cdb69553-fbcc-4b7f-990e-d358291cff44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleting a device works",
              "fullTitle": "DELETE /devices/delete/:device_id deleting a device works",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/devices/delete/AN001')\n    .set(\"x-access-token\", helper.getToken())\n    .expect(201, done);",
              "err": {},
              "uuid": "6e908513-f553-4e95-85ce-ae66942f4b15",
              "parentUUID": "cdb69553-fbcc-4b7f-990e-d358291cff44",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "65780fe8-1df1-46b2-a7f3-be122f272b9d",
            "02ef311a-d04d-41b9-b09b-31736a9dd4b8",
            "f93a8e69-92ca-457f-8941-ad15c2bf77fb",
            "e1cbeb8a-d139-442c-aba2-bed727d4234a",
            "6e908513-f553-4e95-85ce-ae66942f4b15"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fd12425f-29e5-46a6-9876-7b4d2c1a86c3",
          "title": "GET /user/all",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /user/all\"",
              "fullTitle": "GET /user/all \"before all\" hook in \"GET /user/all\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "69001161-b287-4656-a78c-ee3d23bb1da7",
              "parentUUID": "fd12425f-29e5-46a6-9876-7b4d2c1a86c3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error with no token",
              "fullTitle": "GET /user/all responds error with no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "8f66d8a9-8a40-439d-a52b-6cabd493d2c6",
              "parentUUID": "fd12425f-29e5-46a6-9876-7b4d2c1a86c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /user/all responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "cf0fb687-25d4-4a26-b405-bdbd56e7f725",
              "parentUUID": "fd12425f-29e5-46a6-9876-7b4d2c1a86c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "GET /user/all responds error with not admin privileges token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "293a75be-f15d-4ce6-bc08-f27aa120a09c",
              "parentUUID": "fd12425f-29e5-46a6-9876-7b4d2c1a86c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with json",
              "fullTitle": "GET /user/all responds with json",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/all')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, done);",
              "err": {},
              "uuid": "3a950fbe-9bba-42cb-b732-1725a43ace0b",
              "parentUUID": "fd12425f-29e5-46a6-9876-7b4d2c1a86c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct users informations",
              "fullTitle": "GET /user/all responds with correct users informations",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/all')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, [{\n        id: \"ABCDEFG\",\n        firstName: \"Lilian\",\n        lastName: \"Bethus\",\n        email: \"lilianb@mail.fr\",\n        admin: true,\n        temporaryPassword: false\n    },\n    {\n        id: \"HIJKLMN\",\n        firstName: \"Milan\",\n        lastName: \"Pasquereau\",\n        email: \"mpsqr@mail.fr\",\n        admin: false,\n        temporaryPassword: false\n    }], done);",
              "err": {},
              "uuid": "ed76e019-0b18-4dcc-82cd-cc9b56c54324",
              "parentUUID": "fd12425f-29e5-46a6-9876-7b4d2c1a86c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f66d8a9-8a40-439d-a52b-6cabd493d2c6",
            "cf0fb687-25d4-4a26-b405-bdbd56e7f725",
            "293a75be-f15d-4ce6-bc08-f27aa120a09c",
            "3a950fbe-9bba-42cb-b732-1725a43ace0b",
            "ed76e019-0b18-4dcc-82cd-cc9b56c54324"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "68bb4624-03a7-4d0f-93c2-b721df03dacd",
          "title": "GET /user/:userId",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /user/:userId\"",
              "fullTitle": "GET /user/:userId \"before all\" hook in \"GET /user/:userId\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "bc641233-2de5-4ab3-a92e-98a037c64cb3",
              "parentUUID": "68bb4624-03a7-4d0f-93c2-b721df03dacd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds with json",
              "fullTitle": "GET /user/:userId responds with json",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, done);",
              "err": {},
              "uuid": "4bb4ceb9-db74-4f23-a5ad-6d3296f7aac5",
              "parentUUID": "68bb4624-03a7-4d0f-93c2-b721df03dacd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct user informations",
              "fullTitle": "GET /user/:userId responds with correct user informations",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, {\n    id: \"ABCDEFG\",\n    firstName: \"Lilian\",\n    lastName: \"Bethus\",\n    email: \"lilianb@mail.fr\",\n    admin: true,\n    temporaryPassword: false\n}, done);",
              "err": {},
              "uuid": "747cd369-a3f7-41b5-829c-4fb48ca86445",
              "parentUUID": "68bb4624-03a7-4d0f-93c2-b721df03dacd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid ID",
              "fullTitle": "GET /user/:userId responds error for invalid ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/invalid')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Cannot find results\"\n}, done);",
              "err": {},
              "uuid": "c60ea6eb-5cc7-4631-af67-df3741c93904",
              "parentUUID": "68bb4624-03a7-4d0f-93c2-b721df03dacd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /user/:userId responds error with no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "ecfc473f-ccec-469b-aec4-6edd0c263823",
              "parentUUID": "68bb4624-03a7-4d0f-93c2-b721df03dacd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /user/:userId responds error with invalid token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "801fa93f-b561-40ce-a934-27dfa01468eb",
              "parentUUID": "68bb4624-03a7-4d0f-93c2-b721df03dacd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "GET /user/:userId responds error with not admin privileges token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "55336681-1c58-411d-8b01-4977b80bf477",
              "parentUUID": "68bb4624-03a7-4d0f-93c2-b721df03dacd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4bb4ceb9-db74-4f23-a5ad-6d3296f7aac5",
            "747cd369-a3f7-41b5-829c-4fb48ca86445",
            "c60ea6eb-5cc7-4631-af67-df3741c93904",
            "ecfc473f-ccec-469b-aec4-6edd0c263823",
            "801fa93f-b561-40ce-a934-27dfa01468eb",
            "55336681-1c58-411d-8b01-4977b80bf477"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2d66434c-eed3-4085-b486-be2619d5a626",
          "title": "PUT /user/add",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"PUT /user/add\"",
              "fullTitle": "PUT /user/add \"before each\" hook in \"PUT /user/add\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "1e75abc0-8983-47e3-99fc-ce4137c597ab",
              "parentUUID": "2d66434c-eed3-4085-b486-be2619d5a626",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when trying to add user with already existing id",
              "fullTitle": "PUT /user/add responds error when trying to add user with already existing id",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"ABCDEFG\",\n    firstName: \"Marche\",\n    lastName: \"Pas\",\n    email: \"rien@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this ID already exists\"\n}, done);",
              "err": {},
              "uuid": "d87f1d7d-9850-4f64-8b76-d741feb1276f",
              "parentUUID": "2d66434c-eed3-4085-b486-be2619d5a626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid ID",
              "fullTitle": "PUT /user/add responds error for invalid ID",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"INVAL\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"jdupont@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid ID\"\n}, done);",
              "err": {},
              "uuid": "6698b6e6-3ca9-4930-b1ac-0448f6847766",
              "parentUUID": "2d66434c-eed3-4085-b486-be2619d5a626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid email",
              "fullTitle": "PUT /user/add responds error for invalid email",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"TESTTE1\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"cecinestpasunmail.correct\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid email\"\n}, done);",
              "err": {},
              "uuid": "3a4ead47-2283-4a9f-a2f3-5fca015b7b8b",
              "parentUUID": "2d66434c-eed3-4085-b486-be2619d5a626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid user with already existing email",
              "fullTitle": "PUT /user/add responds error for invalid user with already existing email",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"TESTTE2\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"lilianb@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this email already exists\"\n}, done);",
              "err": {},
              "uuid": "3bd89fa1-be0a-4bff-8f42-fc8b2da4b9ba",
              "parentUUID": "2d66434c-eed3-4085-b486-be2619d5a626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "PUT /user/add responds error with no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "ea61b90d-4876-4d92-b421-bc31a49e6891",
              "parentUUID": "2d66434c-eed3-4085-b486-be2619d5a626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "PUT /user/add responds error with invalid token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "757b5f4a-900a-47ec-a06c-140fdf16a5eb",
              "parentUUID": "2d66434c-eed3-4085-b486-be2619d5a626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "PUT /user/add responds error with not admin privileges token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "484ee6f4-24be-4b9d-9be6-eeda9e5a0a27",
              "parentUUID": "2d66434c-eed3-4085-b486-be2619d5a626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "user creation works",
              "fullTitle": "PUT /user/add user creation works",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"TESTTE3\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"jdupont@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(201, () => {\n    supertest_1.default(server_1.app)\n        .get('/api/users/TESTTE3')\n        .set('Accept', 'application/json')\n        .set(\"x-access-token\", helper.getToken())\n        .expect('Content-Type', /json/)\n        .expect(200, {\n        id: \"TESTTE3\",\n        firstName: \"Jean\",\n        lastName: \"Dupont\",\n        email: \"jdupont@mail.fr\",\n        admin: false,\n        temporaryPassword: true\n    }, done);\n});",
              "err": {},
              "uuid": "43751814-a111-45fa-8404-9e23295657a9",
              "parentUUID": "2d66434c-eed3-4085-b486-be2619d5a626",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d87f1d7d-9850-4f64-8b76-d741feb1276f",
            "6698b6e6-3ca9-4930-b1ac-0448f6847766",
            "3a4ead47-2283-4a9f-a2f3-5fca015b7b8b",
            "3bd89fa1-be0a-4bff-8f42-fc8b2da4b9ba",
            "ea61b90d-4876-4d92-b421-bc31a49e6891",
            "757b5f4a-900a-47ec-a06c-140fdf16a5eb",
            "484ee6f4-24be-4b9d-9be6-eeda9e5a0a27",
            "43751814-a111-45fa-8404-9e23295657a9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 158,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "13a81132-4558-4cd7-9223-60f7811b11c6",
          "title": "POST /user/modify",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /user/modify\"",
              "fullTitle": "POST /user/modify \"before each\" hook in \"POST /user/modify\"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "501fcbbd-53aa-46ad-875b-66232b57cb26",
              "parentUUID": "13a81132-4558-4cd7-9223-60f7811b11c6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error for invalid user ID",
              "fullTitle": "POST /user/modify responds error for invalid user ID",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/users/modify')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"INVALID\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"jdupont@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this ID doesn't exists\"\n}, done);",
              "err": {},
              "uuid": "58e90932-c051-4e2c-893c-9d788fba4783",
              "parentUUID": "13a81132-4558-4cd7-9223-60f7811b11c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid user with already existing email",
              "fullTitle": "POST /user/modify responds error for invalid user with already existing email",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/users/modify')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"HIJKLMN\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"lilianb@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this email already exists\"\n}, done);",
              "err": {},
              "uuid": "c68633d0-49c9-4584-aa89-788c920d1402",
              "parentUUID": "13a81132-4558-4cd7-9223-60f7811b11c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /user/modify responds error with no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "88f4a873-f5e8-4915-91df-e33ffc0803d9",
              "parentUUID": "13a81132-4558-4cd7-9223-60f7811b11c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /user/modify responds error with invalid token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "5fb62e96-6c84-495b-9e1a-8e2a8a6877f5",
              "parentUUID": "13a81132-4558-4cd7-9223-60f7811b11c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "POST /user/modify responds error with not admin privileges token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "2d23e308-51d4-4b9f-895c-60bcd75bf351",
              "parentUUID": "13a81132-4558-4cd7-9223-60f7811b11c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "user modification works",
              "fullTitle": "POST /user/modify user modification works",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/users/modify')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"HIJKLMN\",\n    firstName: \"M\",\n    lastName: \"P\",\n    email: \"psqrm@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(201, () => {\n    supertest_1.default(server_1.app)\n        .get('/api/users/HIJKLMN')\n        .set('Accept', 'application/json')\n        .set(\"x-access-token\", helper.getToken())\n        .expect('Content-Type', /json/)\n        .expect(200, {\n        id: \"HIJKLMN\",\n        firstName: \"M\",\n        lastName: \"P\",\n        email: \"psqrm@mail.fr\",\n        admin: false,\n        temporaryPassword: false\n    }, done);\n});",
              "err": {},
              "uuid": "7ce5583f-022a-4212-bc89-5bbf79d9f2e9",
              "parentUUID": "13a81132-4558-4cd7-9223-60f7811b11c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "58e90932-c051-4e2c-893c-9d788fba4783",
            "c68633d0-49c9-4584-aa89-788c920d1402",
            "88f4a873-f5e8-4915-91df-e33ffc0803d9",
            "5fb62e96-6c84-495b-9e1a-8e2a8a6877f5",
            "2d23e308-51d4-4b9f-895c-60bcd75bf351",
            "7ce5583f-022a-4212-bc89-5bbf79d9f2e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 44,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "11934487-e289-4f3b-87c4-cf34ca606f5f",
          "title": "DELETE /user/delete/:userId",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"DELETE /user/delete/:userId\"",
              "fullTitle": "DELETE /user/delete/:userId \"before each\" hook in \"DELETE /user/delete/:userId\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "6d0380ca-65cf-4af3-aaa7-10f8ed6fe7da",
              "parentUUID": "11934487-e289-4f3b-87c4-cf34ca606f5f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error with invalid user id",
              "fullTitle": "DELETE /user/delete/:userId responds error with invalid user id",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/users/delete/INVALID')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this ID doesn't exists\"\n}, done);",
              "err": {},
              "uuid": "9330b985-e76e-40de-88cf-30cbaf8fbe4b",
              "parentUUID": "11934487-e289-4f3b-87c4-cf34ca606f5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "DELETE /user/delete/:userId responds error with no token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "936485b2-ee87-4e83-99bd-fd7262b89f7f",
              "parentUUID": "11934487-e289-4f3b-87c4-cf34ca606f5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "DELETE /user/delete/:userId responds error with invalid token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "f10f5ea7-6435-4d1a-97d6-269c93fc7b8b",
              "parentUUID": "11934487-e289-4f3b-87c4-cf34ca606f5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "DELETE /user/delete/:userId responds error with not admin privileges token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "5f80cf4b-6083-4644-ba61-ac8ceac73b4f",
              "parentUUID": "11934487-e289-4f3b-87c4-cf34ca606f5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "user deletion works",
              "fullTitle": "DELETE /user/delete/:userId user deletion works",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/users/delete/HIJKLMN')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(201, () => {\n    supertest_1.default(server_1.app)\n        .get('/api/users/HIJKLMN')\n        .set('Accept', 'application/json')\n        .set(\"x-access-token\", helper.getToken())\n        .expect('Content-Type', /json/)\n        .expect(400, {\n        error: true,\n        message: \"Cannot find results\"\n    }, done);\n});",
              "err": {},
              "uuid": "41ddaacf-7e32-4c51-b69c-32c018325c0a",
              "parentUUID": "11934487-e289-4f3b-87c4-cf34ca606f5f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9330b985-e76e-40de-88cf-30cbaf8fbe4b",
            "936485b2-ee87-4e83-99bd-fd7262b89f7f",
            "f10f5ea7-6435-4d1a-97d6-269c93fc7b8b",
            "5f80cf4b-6083-4644-ba61-ac8ceac73b4f",
            "41ddaacf-7e32-4c51-b69c-32c018325c0a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "81e125b3-4e87-4fdf-8fd3-8a532afd97a0",
          "title": "GET /user/:userId/history",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"GET /user/:userId/history\"",
              "fullTitle": "GET /user/:userId/history \"before each\" hook in \"GET /user/:userId/history\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "6f3ce9df-5aae-407b-9426-5b44f8ea8324",
              "parentUUID": "81e125b3-4e87-4fdf-8fd3-8a532afd97a0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error with invalid user id",
              "fullTitle": "GET /user/:userId/history responds error with invalid user id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/INVALID/history')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this ID doesn't exists\"\n}, done);",
              "err": {},
              "uuid": "d79697fc-f58b-43ee-a9cc-0a6eae4f0122",
              "parentUUID": "81e125b3-4e87-4fdf-8fd3-8a532afd97a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /user/:userId/history responds error with no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "6f33fa78-5e42-4c11-8fed-e915f027a83c",
              "parentUUID": "81e125b3-4e87-4fdf-8fd3-8a532afd97a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /user/:userId/history responds error with invalid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "413fffa4-4047-4c8d-bfeb-6a5199212741",
              "parentUUID": "81e125b3-4e87-4fdf-8fd3-8a532afd97a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "GET /user/:userId/history responds error with not admin privileges token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "1ff36d88-6ffc-4c36-b779-f944354ef46b",
              "parentUUID": "81e125b3-4e87-4fdf-8fd3-8a532afd97a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "user history works",
              "fullTitle": "GET /user/:userId/history user history works",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/ABCDEFG/history')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, [{\n        ID: 2,\n        endDate: \"2021-01-12\",\n        idUser: \"ABCDEFG\",\n        refDevice: \"PC001\",\n        returnDate: \"2021-02-04\",\n        startDate: \"2021-01-04\"\n    }], done);",
              "err": {},
              "uuid": "3cdc9505-5da9-4c07-ac64-ef0eccc25db5",
              "parentUUID": "81e125b3-4e87-4fdf-8fd3-8a532afd97a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d79697fc-f58b-43ee-a9cc-0a6eae4f0122",
            "6f33fa78-5e42-4c11-8fed-e915f027a83c",
            "413fffa4-4047-4c8d-bfeb-6a5199212741",
            "1ff36d88-6ffc-4c36-b779-f944354ef46b",
            "3cdc9505-5da9-4c07-ac64-ef0eccc25db5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "8fadb271-bfd5-4a8a-92be-70a81d9e04e4",
        "6d66b891-0d8b-4845-8f6c-0fdabb59da73",
        "45e7b87e-e6f1-4d73-81c7-6b49459b2f87",
        "c5555752-4a1b-4494-9934-fa85b8c036e4",
        "6f9f9bf4-68b9-42a1-9694-7a968cb2b67e",
        "f35cf4e8-9bf4-4e4a-bf63-1bd4f9c8f95c",
        "865ec80b-ce91-47fd-85f4-63cac56414d6"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}