{
  "stats": {
    "suites": 51,
    "tests": 194,
    "passes": 194,
    "pending": 0,
    "failures": 0,
    "start": "2021-01-09T18:18:43.352Z",
    "end": "2021-01-09T18:18:46.917Z",
    "duration": 3565,
    "testsRegistered": 201,
    "passPercent": 96.51741293532339,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 7,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "61adb505-cbee-47d8-ae3f-ef383ef7b81e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "The device must match an existing category",
          "fullTitle": "The device must match an existing category",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    const existingCategories = yield DAOcat.getAll();\n    let check = false;\n    //Testing that its category is member of the categories of the database\n    existingCategories.forEach(function (category) {\n        if (device.getCategoryID() == category.getID())\n            check = true;\n    });\n    assert.isTrue(check);\n});",
          "err": {},
          "uuid": "8a7f810b-0023-4c34-adce-e2b61dc4b02b",
          "parentUUID": "61adb505-cbee-47d8-ae3f-ef383ef7b81e",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The device must have a five character reference",
          "fullTitle": "The device must have a five character reference",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    assert.equal(device.getRef().length, 5);\n});",
          "err": {},
          "uuid": "bcf65328-4b9e-4fc2-a699-c19a8e7acb31",
          "parentUUID": "61adb505-cbee-47d8-ae3f-ef383ef7b81e",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The device must not have an empty name or a null name",
          "fullTitle": "The device must not have an empty name or a null name",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    assert.isNotNull(device.getName());\n    assert.isAbove(device.getName().length, 0);\n});",
          "err": {},
          "uuid": "7923cea4-475c-470e-a6a5-dd5c92c505d6",
          "parentUUID": "61adb505-cbee-47d8-ae3f-ef383ef7b81e",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The device must have a version number between 3 and 15 characters",
          "fullTitle": "The device must have a version number between 3 and 15 characters",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    assert.isAbove(device.getVersion().length, 2);\n    assert.isBelow(device.getVersion().length, 16);\n});",
          "err": {},
          "uuid": "487a3d08-bbec-4299-a912-603ecba131a2",
          "parentUUID": "61adb505-cbee-47d8-ae3f-ef383ef7b81e",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The device must have a correct version number",
          "fullTitle": "The device must have a correct version number",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(device.getVersion()).to.match(/^[0-9]*\\.[0-9]*$/);\n});",
          "err": {},
          "uuid": "1ee06864-5cd3-49b1-bd23-77c9bb1365c2",
          "parentUUID": "61adb505-cbee-47d8-ae3f-ef383ef7b81e",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The device must have a grater version than 0.0",
          "fullTitle": "The device must have a grater version than 0.0",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    const numbers = device.getVersion().split('.');\n    assert.isAbove(parseInt(numbers[0]), 0);\n    assert.isAbove(parseInt(numbers[1]), -1);\n});",
          "err": {},
          "uuid": "7b240da6-9e92-4456-906f-9b91f9b474a6",
          "parentUUID": "61adb505-cbee-47d8-ae3f-ef383ef7b81e",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The device with a phone number must have a correct phone number",
          "fullTitle": "The device with a phone number must have a correct phone number",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    if (device.getPhone()) {\n        expect(device.getPhone()).to.match(/^\\+?[0-9]{0,15}$/);\n    }\n});",
          "err": {},
          "uuid": "0bf69de8-bff7-4d80-a994-1dc973d9a30d",
          "parentUUID": "61adb505-cbee-47d8-ae3f-ef383ef7b81e",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "5211f0ec-4a02-4304-8ceb-4fd6ce5221ee",
          "title": "Tests on dao_category.ts",
          "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_category_test.ts",
          "file": "/tests/daotests/dao_category_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests on dao_category.ts\"",
              "fullTitle": "Tests on dao_category.ts \"before all\" hook in \"Tests on dao_category.ts\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "bb7ab925-3627-4381-a26f-548fce63d0cd",
              "parentUUID": "5211f0ec-4a02-4304-8ceb-4fd6ce5221ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1c0a6fde-657e-4cfc-a807-9e0e4d1a7d81",
              "title": "Tests on getAll() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array of category",
                  "fullTitle": "Tests on dao_category.ts Tests on getAll() method The result type must be an array of category",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllCategories();\n    expect(Array.isArray(result)).to.equal(true);\n});",
                  "err": {},
                  "uuid": "9f15e565-e392-4137-87d8-357a46d3b8c7",
                  "parentUUID": "1c0a6fde-657e-4cfc-a807-9e0e4d1a7d81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The result must not be empty, there have to be at least one category in the program",
                  "fullTitle": "Tests on dao_category.ts Tests on getAll() method The result must not be empty, there have to be at least one category in the program",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllCategories();\n    assert.isAbove(result.length, 0, \"There must be at least one category\");\n});",
                  "err": {},
                  "uuid": "8db6f995-8efa-4a08-b2b0-df110fe52766",
                  "parentUUID": "1c0a6fde-657e-4cfc-a807-9e0e4d1a7d81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The names of the categories must not exceed 255 characters",
                  "fullTitle": "Tests on dao_category.ts Tests on getAll() method The names of the categories must not exceed 255 characters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllCategories();\n    result.forEach(function (category) {\n        assert.isBelow(category.getName().length, 255);\n    });\n});",
                  "err": {},
                  "uuid": "ad519871-2a8f-4e04-a6a0-de9b22c4a1e2",
                  "parentUUID": "1c0a6fde-657e-4cfc-a807-9e0e4d1a7d81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ID of Categories must be strictly postives",
                  "fullTitle": "Tests on dao_category.ts Tests on getAll() method ID of Categories must be strictly postives",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllCategories();\n    result.forEach(function (category) {\n        assert.isAbove(category.getID(), 0);\n    });\n});",
                  "err": {},
                  "uuid": "901f98d8-fb38-48e5-b7cb-ef24c11766bd",
                  "parentUUID": "1c0a6fde-657e-4cfc-a807-9e0e4d1a7d81",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f15e565-e392-4137-87d8-357a46d3b8c7",
                "8db6f995-8efa-4a08-b2b0-df110fe52766",
                "ad519871-2a8f-4e04-a6a0-de9b22c4a1e2",
                "901f98d8-fb38-48e5-b7cb-ef24c11766bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b01148c6-15e7-40be-8fca-c58ddda49553",
              "title": "Tests on getByName() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be a category",
                  "fullTitle": "Tests on dao_category.ts Tests on getByName() method The result type must be a category",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetCategory(\"Téléphones\");\n    assert.isTrue(result instanceof category_1.default);\n});",
                  "err": {},
                  "uuid": "1c4c7bbd-7904-4347-9c5b-48325d0bbfa9",
                  "parentUUID": "b01148c6-15e7-40be-8fca-c58ddda49553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The database must have the smartphone category",
                  "fullTitle": "Tests on dao_category.ts Tests on getByName() method The database must have the smartphone category",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetCategory(\"Téléphones\");\n    assert.isNotNull(result);\n});",
                  "err": {},
                  "uuid": "009f8b54-97e5-4711-abc3-5bfe7436985a",
                  "parentUUID": "b01148c6-15e7-40be-8fca-c58ddda49553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The names of the category must not have any number",
                  "fullTitle": "Tests on dao_category.ts Tests on getByName() method The names of the category must not have any number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetCategory(\"Téléphones\");\n    expect(result.getName()).not.to.match(/^([0-9_])$/);\n});",
                  "err": {},
                  "uuid": "d99107e5-ba29-4233-a597-13a4d8b1cf6c",
                  "parentUUID": "b01148c6-15e7-40be-8fca-c58ddda49553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The names of the category must contain only letters or '-'",
                  "fullTitle": "Tests on dao_category.ts Tests on getByName() method The names of the category must contain only letters or '-'",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetCategory(\"Téléphones\");\n    expect(result.getName()).to.match(/^[a-zA-Z\\-éèà]{0,255}$/);\n});",
                  "err": {},
                  "uuid": "cae11cec-75c3-47a2-b715-a12a74391f05",
                  "parentUUID": "b01148c6-15e7-40be-8fca-c58ddda49553",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c4c7bbd-7904-4347-9c5b-48325d0bbfa9",
                "009f8b54-97e5-4711-abc3-5bfe7436985a",
                "d99107e5-ba29-4233-a597-13a4d8b1cf6c",
                "cae11cec-75c3-47a2-b715-a12a74391f05"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50a8eacf-134e-434d-a5cb-984f33a4d922",
              "title": "Tests on getLastId() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "There must be at least one id, or there would be no categories",
                  "fullTitle": "Tests on dao_category.ts Tests on getLastId() method There must be at least one id, or there would be no categories",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetLastId();\n    assert.isNotNull(result);\n});",
                  "err": {},
                  "uuid": "a7a920f5-94d6-4f72-8fb0-9d3a449ca8ad",
                  "parentUUID": "50a8eacf-134e-434d-a5cb-984f33a4d922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Last Id created must be positive",
                  "fullTitle": "Tests on dao_category.ts Tests on getLastId() method Last Id created must be positive",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultGetLastId();\n    assert.isAbove(result, 0);\n});",
                  "err": {},
                  "uuid": "221254f6-3ff3-490d-ae2a-8fd8b30d2ce1",
                  "parentUUID": "50a8eacf-134e-434d-a5cb-984f33a4d922",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7a920f5-94d6-4f72-8fb0-9d3a449ca8ad",
                "221254f6-3ff3-490d-ae2a-8fd8b30d2ce1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb9a7bdd-d118-4deb-82f5-59df8a1177ff",
              "title": "Tests on addCategory() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A new category added should be seen in a SELECT request later",
                  "fullTitle": "Tests on dao_category.ts Tests on addCategory() method A new category added should be seen in a SELECT request later",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    DAOCategTested.addCategory(new category_1.default(9999, \"TestCategory\"));\n    const result = yield resultGetCategory(\"TestCategory\");\n    assert.isNotNull(result);\n    expect(result.getID()).to.equal(9999);\n    expect(result.getName()).to.equal(\"TestCategory\");\n});",
                  "err": {},
                  "uuid": "ed40868d-d6ae-4403-81ac-bfc87c865b9f",
                  "parentUUID": "bb9a7bdd-d118-4deb-82f5-59df8a1177ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed40868d-d6ae-4403-81ac-bfc87c865b9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2102fae-f1a5-4ba1-aa02-85b28d182a93",
              "title": "Tests on deleteCategory() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_category_test.ts",
              "file": "/tests/daotests/dao_category_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A deleted category should not be in a query later",
                  "fullTitle": "Tests on dao_category.ts Tests on deleteCategory() method A deleted category should not be in a query later",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(yield DAOCategTested.deleteCategory.bind(DAOCategTested, 9999)).not.to.throw(Error);\n});",
                  "err": {},
                  "uuid": "65cd217e-ab21-43e6-a3fa-67b12ac79d0b",
                  "parentUUID": "a2102fae-f1a5-4ba1-aa02-85b28d182a93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The category we tried to added, should throw an error at its deletion, or it is deleted from the database",
                  "fullTitle": "Tests on dao_category.ts Tests on deleteCategory() method The category we tried to added, should throw an error at its deletion, or it is deleted from the database",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOCategTested.deleteCategory(-1)).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "2b582f0e-90e5-4d39-8ec7-88b9b6906809",
                  "parentUUID": "a2102fae-f1a5-4ba1-aa02-85b28d182a93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65cd217e-ab21-43e6-a3fa-67b12ac79d0b",
                "2b582f0e-90e5-4d39-8ec7-88b9b6906809"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f42ebea8-e7ec-4691-a224-98ab01300f9c",
          "title": "Tests onf dao_device.ts",
          "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_device_test.ts",
          "file": "/tests/daotests/dao_device_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests onf dao_device.ts\"",
              "fullTitle": "Tests onf dao_device.ts \"before all\" hook in \"Tests onf dao_device.ts\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "0bd576ce-3eb2-4626-8cd5-94612cd78f14",
              "parentUUID": "f42ebea8-e7ec-4691-a224-98ab01300f9c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "890a0a90-177a-4408-8806-b1e0264536b4",
              "title": "Tests on getAll() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array of devices",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The result type must be an array of devices",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    expect(Array.isArray(result)).to.equal(true);\n});",
                  "err": {},
                  "uuid": "b902837a-1d6a-46cb-8b0c-6a68bd523b33",
                  "parentUUID": "890a0a90-177a-4408-8806-b1e0264536b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must match an existing category",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must match an existing category",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const existingCategories = yield DAOcat.getAll();\n    const result = yield resultAllDevices();\n    let check = false;\n    //Testing for every device that its category is member of the categories of the database\n    result.map((device) => {\n        existingCategories.map((category) => {\n            if (device.getCategoryID() == category.getID())\n                check = true;\n        });\n    });\n    assert.isTrue(check);\n});",
                  "err": {},
                  "uuid": "0a73feb8-244d-47fc-9f12-c9b0fc7b3094",
                  "parentUUID": "890a0a90-177a-4408-8806-b1e0264536b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must have a five character reference",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must have a five character reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        assert.equal(device.getRef().length, 5);\n    });\n});",
                  "err": {},
                  "uuid": "167b0455-b4a3-419c-be0d-26b6d7b424d4",
                  "parentUUID": "890a0a90-177a-4408-8806-b1e0264536b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must not have an empty name or a null name",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must not have an empty name or a null name",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        assert.isNotNull(device.getName());\n        assert.isAbove(device.getName().length, 0);\n    });\n});",
                  "err": {},
                  "uuid": "73d10db0-0e70-42cc-9ced-3226a31e3862",
                  "parentUUID": "890a0a90-177a-4408-8806-b1e0264536b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must have a version number between 3 and 15 characters",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must have a version number between 3 and 15 characters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        assert.isAbove(device.getVersion().length, 2);\n        assert.isBelow(device.getVersion().length, 16);\n    });\n});",
                  "err": {},
                  "uuid": "2366ce92-7b57-48d6-9d62-4d0fd5dccde8",
                  "parentUUID": "890a0a90-177a-4408-8806-b1e0264536b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must have a correct version number",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must have a correct version number",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        expect(device.getVersion()).to.match(/^[0-9]*\\.[0-9]*$/);\n    });\n});",
                  "err": {},
                  "uuid": "67f37250-ad5e-43c3-ad4f-bb470ca474e1",
                  "parentUUID": "890a0a90-177a-4408-8806-b1e0264536b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices must have a grater version than 0.0",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices must have a grater version than 0.0",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        const numbers = device.getVersion().split('.');\n        assert.isAbove(parseInt(numbers[0]), 0);\n        assert.isAbove(parseInt(numbers[1]), -1);\n    });\n});",
                  "err": {},
                  "uuid": "c1258f03-c6da-4660-bba7-19c43cbd5404",
                  "parentUUID": "890a0a90-177a-4408-8806-b1e0264536b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices with a phone number must have a correct phone number",
                  "fullTitle": "Tests onf dao_device.ts Tests on getAll() method The devices with a phone number must have a correct phone number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield resultAllDevices();\n    result.forEach(function (device) {\n        if (device.getPhone()) {\n            expect(device.getPhone()).to.match(/^\\+?[0-9]{0,15}$/);\n        }\n    });\n});",
                  "err": {},
                  "uuid": "35bdb1b3-3007-444f-ae5c-c212357be8d1",
                  "parentUUID": "890a0a90-177a-4408-8806-b1e0264536b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b902837a-1d6a-46cb-8b0c-6a68bd523b33",
                "0a73feb8-244d-47fc-9f12-c9b0fc7b3094",
                "167b0455-b4a3-419c-be0d-26b6d7b424d4",
                "73d10db0-0e70-42cc-9ced-3226a31e3862",
                "2366ce92-7b57-48d6-9d62-4d0fd5dccde8",
                "67f37250-ad5e-43c3-ad4f-bb470ca474e1",
                "c1258f03-c6da-4660-bba7-19c43cbd5404",
                "35bdb1b3-3007-444f-ae5c-c212357be8d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fcb8bb0c-7164-4c89-84af-c4c3e03ee330",
              "title": "Tests on addDevice() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Adding a compliant device should not throw exception, and the added device must be seen in queries",
                  "fullTitle": "Tests onf dao_device.ts Tests on addDevice() method Adding a compliant device should not throw exception, and the added device must be seen in queries",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    //This device is compliant to the specifications\n    expect(DAOTested.addDevice(new device_1.default(\"test1\", 1, \"Téléphones\", \"First test\", \"1.0\", \"\", \"0778787878\"))).not.to.be.rejected;\n    const result = yield DAOTested.get(\"test1\");\n    assert.isNotNull(result);\n    expect(result.getRef()).to.equal(\"test1\");\n    expect(result.getCategoryID()).to.equal(1);\n    expect(result.getName()).to.equal(\"First test\");\n    expect(result.getVersion()).to.equal(\"1.0\");\n    expect(result.getPhoto()).to.equal(\"\");\n    expect(result.getPhone()).to.equal(\"0778787878\");\n});",
                  "err": {},
                  "uuid": "01a6d33f-6511-4848-a78d-870c8de81c62",
                  "parentUUID": "fcb8bb0c-7164-4c89-84af-c4c3e03ee330",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01a6d33f-6511-4848-a78d-870c8de81c62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c0d6c43-247d-4148-aeb6-2b842590d2bb",
              "title": "Tests on deleteDevice() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deleting the compliant device should not throw an error, and the devices should not be queryable",
                  "fullTitle": "Tests onf dao_device.ts Tests on deleteDevice() method Deleting the compliant device should not throw an error, and the devices should not be queryable",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.deleteDevice(\"test1\")).not.to.be.rejected;\n});",
                  "err": {},
                  "uuid": "b39f0b89-7849-485a-bd69-809dcc2ad2c8",
                  "parentUUID": "1c0d6c43-247d-4148-aeb6-2b842590d2bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deleting all the invalid devices should throw an error, or they were created earlier",
                  "fullTitle": "Tests onf dao_device.ts Tests on deleteDevice() method Deleting all the invalid devices should throw an error, or they were created earlier",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.deleteDevice(\"test\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test33\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test4\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test5\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test6\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test7\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test8\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test9\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test10\")).to.be.rejected;\n    expect(DAOTested.deleteDevice(\"test11\")).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "69684503-549d-4a54-97a2-8a6b89c2db6c",
                  "parentUUID": "1c0d6c43-247d-4148-aeb6-2b842590d2bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b39f0b89-7849-485a-bd69-809dcc2ad2c8",
                "69684503-549d-4a54-97a2-8a6b89c2db6c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "32704e10-51da-47a3-955b-729122b3c704",
              "title": "Tests on borrowDevice() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Adding a reservation with existing ID throw an error",
                  "fullTitle": "Tests onf dao_device.ts Tests on borrowDevice() method Adding a reservation with existing ID throw an error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const reservationID = yield DAObooking.getLastId();\n    expect(DAOTested.borrowDevice([new reservation_1.default(reservationID, \"TESTB\", \"ABCDEFG\", startDate, endDate)])).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "65510a9c-0df8-4f47-8256-c16e852bb91c",
                  "parentUUID": "32704e10-51da-47a3-955b-729122b3c704",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Booking a device should throw error",
                  "fullTitle": "Tests onf dao_device.ts Tests on borrowDevice() method Booking a device should throw error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const reservationID = yield DAObooking.getLastId();\n    expect(DAOTested.borrowDevice([new reservation_1.default(reservationID + 1, \"TESTB\", \"ABCDEFG\", startDate, endDate)])).to.not.be.rejected;\n});",
                  "err": {},
                  "uuid": "080f6914-d810-4401-8242-d7b41fe2ff13",
                  "parentUUID": "32704e10-51da-47a3-955b-729122b3c704",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65510a9c-0df8-4f47-8256-c16e852bb91c",
                "080f6914-d810-4401-8242-d7b41fe2ff13"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7397746b-8130-4687-9f53-18056b1d4868",
              "title": "Tests on getDevicesByFilter() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_device_test.ts",
              "file": "/tests/daotests/dao_device_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Research with empty filters should throw error",
                  "fullTitle": "Tests onf dao_device.ts Tests on getDevicesByFilter() method Research with empty filters should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.getDevicesByFilter(\"\", \"\", -1)).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "119c58bf-8435-48f4-96af-4c5a836dfd16",
                  "parentUUID": "7397746b-8130-4687-9f53-18056b1d4868",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Checking if all the filters works well",
                  "fullTitle": "Tests onf dao_device.ts Tests on getDevicesByFilter() method Checking if all the filters works well",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield DAOTested.addDevice.bind(DAOTested, new device_1.default(\"test1\", 1, \"Téléphones\", \"Test filters\", \"1.0\", \"\", \"0778787878\"));\n    let result = yield DAOTested.getDevicesByFilter(\"Test filters\", \"\", -1);\n    result.forEach(function (device) {\n        assert.equal(device.getName(), \"Test filters\");\n    });\n    result = yield DAOTested.getDevicesByFilter(\"\", \"test1\", -1);\n    result.forEach(function (device) {\n        assert.equal(device.getRef(), \"test1\");\n    });\n    result = yield DAOTested.getDevicesByFilter(\"\", \"\", 1);\n    expect(result.map((device) => { return device.getName(); })).to.have.members([\"Huawei P80\", \"Samsung Galaxy S1000\"]);\n    yield DAOTested.deleteDevice.bind(DAOTested, \"test1\");\n});",
                  "err": {},
                  "uuid": "a78bec2f-4d3b-4faf-9ff7-535723e186cf",
                  "parentUUID": "7397746b-8130-4687-9f53-18056b1d4868",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "119c58bf-8435-48f4-96af-4c5a836dfd16",
                "a78bec2f-4d3b-4faf-9ff7-535723e186cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7e99b1d8-7489-4622-9d5a-bbef4799ef5d",
          "title": "Tests on dao_reservation.ts",
          "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_reservation_test.ts",
          "file": "/tests/daotests/dao_reservation_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests on dao_reservation.ts\"",
              "fullTitle": "Tests on dao_reservation.ts \"before all\" hook in \"Tests on dao_reservation.ts\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "05126070-326a-4fe2-bde2-fb102bca192f",
              "parentUUID": "7e99b1d8-7489-4622-9d5a-bbef4799ef5d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "44f8e66d-7f87-427c-a054-e35b3bedbc75",
              "title": "Tests on getLastid() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The Id must be positive",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getLastid() method The Id must be positive",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getLastId();\n    assert.isAbove(result, 0);\n});",
                  "err": {},
                  "uuid": "cf2c0b48-9d05-4edb-b283-8269f2633dbd",
                  "parentUUID": "44f8e66d-7f87-427c-a054-e35b3bedbc75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf2c0b48-9d05-4edb-b283-8269f2633dbd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "950dcc62-5279-4658-8f52-50f7be2c05e3",
              "title": "Tests on historyDevice() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The users of a reservation must be registered",
                  "fullTitle": "Tests on dao_reservation.ts Tests on historyDevice() method The users of a reservation must be registered",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const users = yield DAOuser.getAll();\n    const result = yield DAOTested.historyDevice(\"AN001\");\n    let check = false;\n    result.forEach(function (booking) {\n        users.forEach(function (user) {\n            if (booking.getUserID() == user.getId())\n                check = true;\n        });\n    });\n    assert.isTrue(check);\n});",
                  "err": {},
                  "uuid": "fd65f108-2cc7-4643-80a7-c87fe7785bc3",
                  "parentUUID": "950dcc62-5279-4658-8f52-50f7be2c05e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The devices of a reservation must be registered",
                  "fullTitle": "Tests on dao_reservation.ts Tests on historyDevice() method The devices of a reservation must be registered",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const devices = yield DAOdevice.getAll();\n    const result = yield DAOTested.historyDevice(\"AN001\");\n    let check = false;\n    result.forEach(function (booking) {\n        devices.forEach(function (device) {\n            if (booking.getDevice().match(device.getRef()))\n                check = true;\n        });\n    });\n    assert.isTrue(check);\n});",
                  "err": {},
                  "uuid": "8b3a7635-948c-4f32-873a-dcdb8449e71d",
                  "parentUUID": "950dcc62-5279-4658-8f52-50f7be2c05e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The start date must be earlier than the two others",
                  "fullTitle": "Tests on dao_reservation.ts Tests on historyDevice() method The start date must be earlier than the two others",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.historyDevice(\"AN002\");\n    result.forEach(function (booking) {\n        assert.notDeepEqual(booking.getStartDate(), booking.getReturnDate());\n        assert.notDeepEqual(booking.getStartDate(), booking.getEndDate());\n        assert.isAbove(booking.getReturnDate().getTime(), booking.getStartDate().getTime());\n        assert.isAbove(booking.getEndDate().getTime(), booking.getStartDate().getTime());\n    });\n});",
                  "err": {},
                  "uuid": "af5902b4-415c-4d4d-93cc-2fb0f019cdf3",
                  "parentUUID": "950dcc62-5279-4658-8f52-50f7be2c05e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd65f108-2cc7-4643-80a7-c87fe7785bc3",
                "8b3a7635-948c-4f32-873a-dcdb8449e71d",
                "af5902b4-415c-4d4d-93cc-2fb0f019cdf3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b8d8e96b-5129-4b4b-a2b4-0f94945480fd",
              "title": "Tests on getUserHistory() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getUserHistory() method The result type must be an array",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUserHistory(\"HIJKLMN\");\n    assert.isTrue(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "5c14648b-534b-4392-94e1-de2edff55f4b",
                  "parentUUID": "b8d8e96b-5129-4b4b-a2b4-0f94945480fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The id reservation must be positive",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getUserHistory() method The id reservation must be positive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUserHistory(\"HIJKLMN\");\n    result.forEach((reservation) => {\n        assert.isAbove(reservation.getID(), 0);\n    });\n});",
                  "err": {},
                  "uuid": "1af842a6-7c06-455b-95c1-7a75ef3dd487",
                  "parentUUID": "b8d8e96b-5129-4b4b-a2b4-0f94945480fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The start date must be earlier than the two others",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getUserHistory() method The start date must be earlier than the two others",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUserHistory(\"ABCDEFG\");\n    result.forEach(function (booking) {\n        assert.notDeepEqual(booking.getStartDate(), booking.getReturnDate());\n        assert.notDeepEqual(booking.getStartDate(), booking.getEndDate());\n        if (!booking.getReturnDate()) {\n            assert.isAbove(booking.getReturnDate().getTime(), booking.getStartDate().getTime());\n        }\n        assert.isAbove(booking.getEndDate().getTime(), booking.getStartDate().getTime());\n    });\n});",
                  "err": {},
                  "uuid": "ae732f22-e77c-438b-adfa-80bdadd3ac65",
                  "parentUUID": "b8d8e96b-5129-4b4b-a2b4-0f94945480fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c14648b-534b-4392-94e1-de2edff55f4b",
                "1af842a6-7c06-455b-95c1-7a75ef3dd487",
                "ae732f22-e77c-438b-adfa-80bdadd3ac65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3c7a422-9106-4ac7-8abf-fa685a34c905",
              "title": "Tests on getAllReservationsDevice() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getAllReservationsDevice() method The result type must be an array",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAllReservationsDevice(\"AN002\");\n    assert.isTrue(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "d12aea3a-7d5e-4593-b0bd-edcf11f0b5c4",
                  "parentUUID": "b3c7a422-9106-4ac7-8abf-fa685a34c905",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The id reservation must be positive",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getAllReservationsDevice() method The id reservation must be positive",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAllReservationsDevice(\"AN002\");\n    result.forEach((reservation) => {\n        assert.isAbove(reservation.getID(), 0);\n    });\n});",
                  "err": {},
                  "uuid": "828c3380-926d-4a7f-9dda-ff891e8851fa",
                  "parentUUID": "b3c7a422-9106-4ac7-8abf-fa685a34c905",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The start date must be earlier than the two others",
                  "fullTitle": "Tests on dao_reservation.ts Tests on getAllReservationsDevice() method The start date must be earlier than the two others",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAllReservationsDevice(\"AN002\");\n    result.forEach(function (booking) {\n        assert.notDeepEqual(booking.getStartDate(), booking.getReturnDate());\n        assert.notDeepEqual(booking.getStartDate(), booking.getEndDate());\n        assert.isAbove(booking.getReturnDate().getTime(), booking.getStartDate().getTime());\n        assert.isAbove(booking.getEndDate().getTime(), booking.getStartDate().getTime());\n    });\n});",
                  "err": {},
                  "uuid": "f65831d5-e610-42c8-a100-f38ad2d64c87",
                  "parentUUID": "b3c7a422-9106-4ac7-8abf-fa685a34c905",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d12aea3a-7d5e-4593-b0bd-edcf11f0b5c4",
                "828c3380-926d-4a7f-9dda-ff891e8851fa",
                "f65831d5-e610-42c8-a100-f38ad2d64c87"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cb3aab01-abc4-4530-b093-83e30b237c95",
              "title": "Tests on hasReservationWithInfos() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_reservation_test.ts",
              "file": "/tests/daotests/dao_reservation_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "An existing reservation must be seen in the database",
                  "fullTitle": "Tests on dao_reservation.ts Tests on hasReservationWithInfos() method An existing reservation must be seen in the database",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.hasReservationWithInfos(\"AN001\", new Date(2021, 0, 5), new Date(2021, 0, 8));\n    expect(result).to.be.true;\n});",
                  "err": {},
                  "uuid": "07574a86-22dc-4b28-8ba5-e9a6014ea8c0",
                  "parentUUID": "cb3aab01-abc4-4530-b093-83e30b237c95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "An inexisting reservation must not appear in the database",
                  "fullTitle": "Tests on dao_reservation.ts Tests on hasReservationWithInfos() method An inexisting reservation must not appear in the database",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(yield DAOTested.hasReservationWithInfos(\"AN003\", new Date(2021, 0, 5), new Date(2021, 0, 8))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN001\", new Date(2021, 0, 1), new Date(2021, 0, 4))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN001\", new Date(2021, 1, 9), new Date(2021, 1, 20))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN003\", new Date(2021, 0, 6), new Date(2021, 0, 8))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN003\", new Date(2021, 0, 5), new Date(2021, 1, 12))).to.be.false;\n    expect(yield DAOTested.hasReservationWithInfos(\"AN003\", new Date(2021, 2, 27), new Date(2021, 0, 8))).to.be.false;\n});",
                  "err": {},
                  "uuid": "bd1925e5-8e50-4d76-ba3c-cea300aec67f",
                  "parentUUID": "cb3aab01-abc4-4530-b093-83e30b237c95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07574a86-22dc-4b28-8ba5-e9a6014ea8c0",
                "bd1925e5-8e50-4d76-ba3c-cea300aec67f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d24bc878-8dcd-40b3-bf93-2edef9fd9590",
          "title": "Tests on dao_user.ts",
          "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
          "file": "/tests/daotests/dao_user_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests on dao_user.ts\"",
              "fullTitle": "Tests on dao_user.ts \"before all\" hook in \"Tests on dao_user.ts\"",
              "timedOut": false,
              "duration": 24,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "afffe01f-2220-4d74-a084-b7741f04e48d",
              "parentUUID": "d24bc878-8dcd-40b3-bf93-2edef9fd9590",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7297429c-0068-4657-9e77-8db10e858244",
              "title": "Tests on getAll() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The result type must be an array of user",
                  "fullTitle": "Tests on dao_user.ts Tests on getAll() method The result type must be an array of user",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAll();\n    expect(Array.isArray(result)).to.equal(true);\n});",
                  "err": {},
                  "uuid": "dccc1f66-ba9f-4877-a7a8-578609170005",
                  "parentUUID": "7297429c-0068-4657-9e77-8db10e858244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The users must have a 7 characters ID",
                  "fullTitle": "Tests on dao_user.ts Tests on getAll() method The users must have a 7 characters ID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAll();\n    result.map((user) => {\n        assert.equal(user.getId().length, 7);\n    });\n});",
                  "err": {},
                  "uuid": "f6dd1a41-4ae5-4b0f-971c-c24470592a80",
                  "parentUUID": "7297429c-0068-4657-9e77-8db10e858244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The users must not have empty names or surname",
                  "fullTitle": "Tests on dao_user.ts Tests on getAll() method The users must not have empty names or surname",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAll();\n    result.map((user) => {\n        assert.isNotEmpty(user.getFirstName());\n        assert.isNotEmpty(user.getLastName());\n    });\n});",
                  "err": {},
                  "uuid": "9dc5c16b-224d-4018-b953-bbef85953f45",
                  "parentUUID": "7297429c-0068-4657-9e77-8db10e858244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The users must have a valid email",
                  "fullTitle": "Tests on dao_user.ts Tests on getAll() method The users must have a valid email",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getAll();\n    result.map((user) => {\n        assert.match(user.getEmail(), /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/);\n    });\n});",
                  "err": {},
                  "uuid": "676591ee-0994-480c-a399-cee6cced6096",
                  "parentUUID": "7297429c-0068-4657-9e77-8db10e858244",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dccc1f66-ba9f-4877-a7a8-578609170005",
                "f6dd1a41-4ae5-4b0f-971c-c24470592a80",
                "9dc5c16b-224d-4018-b953-bbef85953f45",
                "676591ee-0994-480c-a399-cee6cced6096"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bd7e1391-7529-4bbe-a46d-444c59549d43",
              "title": "Tests on getUser() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The user get must not have empty name or surname",
                  "fullTitle": "Tests on dao_user.ts Tests on getUser() method The user get must not have empty name or surname",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUser(\"ABCDEFG\");\n    assert.isNotEmpty(result.getFirstName());\n    assert.isNotEmpty(result.getLastName());\n});",
                  "err": {},
                  "uuid": "2706ee60-8523-406b-bb24-dc0a5c3fc620",
                  "parentUUID": "bd7e1391-7529-4bbe-a46d-444c59549d43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The user must have a valid email",
                  "fullTitle": "Tests on dao_user.ts Tests on getUser() method The user must have a valid email",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getUser(\"ABCDEFG\");\n    assert.match(result.getEmail(), /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/);\n});",
                  "err": {},
                  "uuid": "80d52d3f-b0d1-4782-94c6-6bbf80edb6e0",
                  "parentUUID": "bd7e1391-7529-4bbe-a46d-444c59549d43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2706ee60-8523-406b-bb24-dc0a5c3fc620",
                "80d52d3f-b0d1-4782-94c6-6bbf80edb6e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4723cdcb-5f1d-475e-8082-8dfecc955ae2",
              "title": "Tests on getLastId() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The last id must not be empty",
                  "fullTitle": "Tests on dao_user.ts Tests on getLastId() method The last id must not be empty",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield DAOTested.getLastId();\n    assert.isNotEmpty(result.getId());\n});",
                  "err": {},
                  "uuid": "f13c0bb0-1f56-453f-98b0-db3df60209ee",
                  "parentUUID": "4723cdcb-5f1d-475e-8082-8dfecc955ae2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f13c0bb0-1f56-453f-98b0-db3df60209ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a7e31cf-7798-4249-aedb-31824fd53bb6",
              "title": "Tests on addUser() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "An added user must be seen in a query",
                  "fullTitle": "Tests on dao_user.ts Tests on addUser() method An added user must be seen in a query",
                  "timedOut": false,
                  "duration": 137,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.addUser(usertest, \"test\")).not.to.be.rejected;\n    const result = yield DAOTested.getUser(\"EEEEEEE\");\n    assert.equal(result.getFirstName(), \"Tester\");\n    assert.equal(result.getLastName(), \"Testing\");\n    assert.equal(result.getEmail(), \"Testtest@gmail.com\");\n    assert.isFalse(result.isAdmin());\n});",
                  "err": {},
                  "uuid": "5c8e8914-29bb-464e-b104-4d456a0a7c7a",
                  "parentUUID": "7a7e31cf-7798-4249-aedb-31824fd53bb6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c8e8914-29bb-464e-b104-4d456a0a7c7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 137,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9ac87dc2-ea63-457a-9155-98bc64ca3102",
              "title": "Tests on updateUser() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The modifications made on a user must be seen in queries later",
                  "fullTitle": "Tests on dao_user.ts Tests on updateUser() method The modifications made on a user must be seen in queries later",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    usertest.setAdmin(true);\n    usertest.setEmail(\"secondtest@gmail.com\");\n    usertest.setFirstName(\"Yohan\");\n    usertest.setLastName(\"Rousseau\");\n    usertest.setTemporaryPassword(true);\n    expect(DAOTested.updateUser(usertest)).not.to.be.rejected;\n    const result = yield DAOTested.getUser(usertest.getId());\n    assert.equal(result.getFirstName(), \"Yohan\");\n    assert.equal(result.getLastName(), \"Rousseau\");\n    assert.equal(result.getEmail(), \"secondtest@gmail.com\");\n    assert.isTrue(result.isAdmin());\n    assert.isTrue(result.hasTemporaryPassword());\n});",
                  "err": {},
                  "uuid": "094cd44f-6713-4535-92b0-b1b5ee816abc",
                  "parentUUID": "9ac87dc2-ea63-457a-9155-98bc64ca3102",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "094cd44f-6713-4535-92b0-b1b5ee816abc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ed3205c7-fed6-4105-9d2f-f989ef50aa20",
              "title": "Tests on authenticate",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Checking the actual password should not throw error",
                  "fullTitle": "Tests on dao_user.ts Tests on authenticate Checking the actual password should not throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.checkUser(usertest.getEmail(), \"test\")).not.to.be.rejected;\n});",
                  "err": {},
                  "uuid": "45b3563e-01f2-4fc5-ad9e-00656677ff2e",
                  "parentUUID": "ed3205c7-fed6-4105-9d2f-f989ef50aa20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Changing the password and checking it should not throw error",
                  "fullTitle": "Tests on dao_user.ts Tests on authenticate Changing the password and checking it should not throw error",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.changePassword(usertest.getEmail(), \"newtest\")).not.to.be.rejected;\n    expect(DAOTested.checkUser(usertest.getEmail(), \"newtest\")).not.to.be.rejected;\n});",
                  "err": {},
                  "uuid": "a0f31bc9-6a27-4ebe-b0ef-15fec96195ab",
                  "parentUUID": "ed3205c7-fed6-4105-9d2f-f989ef50aa20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45b3563e-01f2-4fc5-ad9e-00656677ff2e",
                "a0f31bc9-6a27-4ebe-b0ef-15fec96195ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a1e0c25-40df-499e-b76e-f6354088e7a1",
              "title": "Tests on deleteUser() method",
              "fullFile": "/Users/easycash/Loaner/tests/daotests/dao_user_test.ts",
              "file": "/tests/daotests/dao_user_test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A deleted user cannot be seen in a query",
                  "fullTitle": "Tests on dao_user.ts Tests on deleteUser() method A deleted user cannot be seen in a query",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    expect(DAOTested.deleteUser(usertest.getId())).not.to.be.rejected;\n    expect(DAOTested.getUser(usertest.getId())).to.be.rejected;\n});",
                  "err": {},
                  "uuid": "524490e2-73b2-4956-9f5a-0635cf8dfdf0",
                  "parentUUID": "6a1e0c25-40df-499e-b76e-f6354088e7a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "524490e2-73b2-4956-9f5a-0635cf8dfdf0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6bcd01ba-c69f-49d7-b8b9-1aae513ca0aa",
          "title": "Tests on category.ts",
          "fullFile": "/Users/easycash/Loaner/tests/modeltests/categorytest.ts",
          "file": "/tests/modeltests/categorytest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Category Creation",
              "fullTitle": "Tests on category.ts Category Creation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.assert.equal(catTested.getID(), 1);\nchai_1.assert.equal(catTested.getName(), \"Test\");\nchai_1.assert.isArray(catTested.getDevices());",
              "err": {},
              "uuid": "e23504f9-6e70-4364-bf62-249ba5644d1e",
              "parentUUID": "6bcd01ba-c69f-49d7-b8b9-1aae513ca0aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Id Modification",
              "fullTitle": "Tests on category.ts Id Modification",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "catTested.setID(2);\nchai_1.assert.equal(catTested.getID(), 2);",
              "err": {},
              "uuid": "6b1ef95d-5515-46f4-a463-80e197b99de5",
              "parentUUID": "6bcd01ba-c69f-49d7-b8b9-1aae513ca0aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Name Modification",
              "fullTitle": "Tests on category.ts Name Modification",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "catTested.setName(\"Lafont\");\nchai_1.assert.equal(catTested.getName(), \"Lafont\");",
              "err": {},
              "uuid": "6c529c3e-e6a0-4a0f-9500-f7835ffdee04",
              "parentUUID": "6bcd01ba-c69f-49d7-b8b9-1aae513ca0aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "f6044151-6411-4f45-b9af-75b30ddb443c",
              "title": "Testing the exceptions",
              "fullFile": "/Users/easycash/Loaner/tests/modeltests/categorytest.ts",
              "file": "/tests/modeltests/categorytest.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Setting too long names should throw exception",
                  "fullTitle": "Tests on category.ts Testing the exceptions Setting too long names should throw exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringTest = \"testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestvtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestvtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest\";\nchai_1.expect(catTested.setName.bind(catTested, stringTest)).to.throw(Error);",
                  "err": {},
                  "uuid": "cad69586-7cbb-43da-86d6-4e354b593abc",
                  "parentUUID": "f6044151-6411-4f45-b9af-75b30ddb443c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting empty names should throw exception",
                  "fullTitle": "Tests on category.ts Testing the exceptions Setting empty names should throw exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringTest = \"\";\nchai_1.expect(catTested.setName.bind(catTested, stringTest)).to.throw(Error);",
                  "err": {},
                  "uuid": "e6bfcc34-1cc6-4d36-aea1-1476ecf50d18",
                  "parentUUID": "f6044151-6411-4f45-b9af-75b30ddb443c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cad69586-7cbb-43da-86d6-4e354b593abc",
                "e6bfcc34-1cc6-4d36-aea1-1476ecf50d18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "e23504f9-6e70-4364-bf62-249ba5644d1e",
            "6b1ef95d-5515-46f4-a463-80e197b99de5",
            "6c529c3e-e6a0-4a0f-9500-f7835ffdee04"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1b21da37-14cc-4ad0-ab89-21069cbf9dfa",
          "title": "Test on device.ts",
          "fullFile": "/Users/easycash/Loaner/tests/modeltests/devicetests.ts",
          "file": "/tests/modeltests/devicetests.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Device Creation test",
              "fullTitle": "Test on device.ts Device Creation test",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.assert.equal(devTested.getRef(), \"test1\");\nchai_1.assert.equal(devTested.getCategoryID(), 2);\nchai_1.assert.equal(devTested.getCategoryName(), \"Ordinateur\");\nchai_1.assert.equal(devTested.getName(), \"PremierTest\");\nchai_1.assert.equal(devTested.getVersion(), \"1.0\");\nchai_1.assert.equal(devTested.getPhoto(), \"url\");\nchai_1.assert.equal(devTested.getPhone(), \"0707070707\");\nchai_1.assert.isTrue(Array.isArray(devTested.getLockDays()));",
              "err": {},
              "uuid": "4b6fcd3b-95d2-4673-9f7e-92e6ecd14fff",
              "parentUUID": "1b21da37-14cc-4ad0-ab89-21069cbf9dfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Device Modification test",
              "fullTitle": "Test on device.ts Device Modification test",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "devTested.setRef(\"modif\");\n//devTested.setCategory(\"Phone\");\ndevTested.setName(\"ModifTest\");\ndevTested.setVersion(\"1.1\");\ndevTested.setPhoto(\"url2\");\ndevTested.setPhone(\"0707070708\");\nchai_1.assert.equal(devTested.getRef(), \"modif\");\n//assert.equal(devTested.getCategory(),\"Phone\");\nchai_1.assert.equal(devTested.getName(), \"ModifTest\");\nchai_1.assert.equal(devTested.getVersion(), \"1.1\");\nchai_1.assert.equal(devTested.getPhoto(), \"url2\");\nchai_1.assert.equal(devTested.getPhone(), \"0707070708\");",
              "err": {},
              "uuid": "bf69d287-26e8-45f2-b843-88b2bdbd8378",
              "parentUUID": "1b21da37-14cc-4ad0-ab89-21069cbf9dfa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "91e6d0c9-4b94-4e93-9b82-6ca717ed5792",
              "title": "Constructor tests",
              "fullFile": "/Users/easycash/Loaner/tests/modeltests/devicetests.ts",
              "file": "/tests/modeltests/devicetests.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create a device with invalid references should throw error",
                  "fullTitle": "Test on device.ts Constructor tests Create a device with invalid references should throw error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(() => new device_1.default(\"test\", 1, \"Téléphones\", \"Second test\", \"1.0\", \"\", \"0778787878\")).to.throw(Error);\nchai_1.expect(() => new device_1.default(\"test33\", 1, \"Téléphones\", \"Third test\", \"1.0\", \"\", \"0778787878\")).to.throw(Error);",
                  "err": {},
                  "uuid": "f810f5a1-5e3f-4fd5-acc0-b7d404697716",
                  "parentUUID": "91e6d0c9-4b94-4e93-9b82-6ca717ed5792",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create a device with an invalid phone number should throw an error",
                  "fullTitle": "Test on device.ts Constructor tests Create a device with an invalid phone number should throw an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    chai_1.expect(() => new device_1.default(\"test8\", 1, \"Téléphones\", \"Phone Number test\", \"1.0\", \"\", \"+337787878787878787878787878\")).to.throw(Error);\n    chai_1.expect(() => new device_1.default(\"test9\", 1, \"Téléphones\", \"Phone Number test\", \"1.0\", \"\", \"++3377878787878\")).to.throw(Error);\n    chai_1.expect(() => new device_1.default(\"test10\", 1, \"Téléphones\", \"Phone Number test\", \"1.0\", \"\", \"842+54161654196\")).to.throw(Error);\n    chai_1.expect(() => new device_1.default(\"test11\", 1, \"Téléphones\", \"Phone Number test\", \"1.0\", \"\", \"te\")).to.throw(Error);\n});",
                  "err": {},
                  "uuid": "5fefb512-8c6f-4f56-9ab8-d022fa23295c",
                  "parentUUID": "91e6d0c9-4b94-4e93-9b82-6ca717ed5792",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f810f5a1-5e3f-4fd5-acc0-b7d404697716",
                "5fefb512-8c6f-4f56-9ab8-d022fa23295c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ab97c12-295c-4023-958c-5deac2a6f884",
              "title": "Testing the exceptions",
              "fullFile": "/Users/easycash/Loaner/tests/modeltests/devicetests.ts",
              "file": "/tests/modeltests/devicetests.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Setting a reference with higher or lower lenght than 5 should throw error",
                  "fullTitle": "Test on device.ts Testing the exceptions Setting a reference with higher or lower lenght than 5 should throw error",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringRef = \"reftest\";\nchai_1.expect(devTested.setRef.bind(devTested, stringRef)).to.throw(\"Invalid reference\");",
                  "err": {},
                  "uuid": "d3a1e124-16e6-4f9f-b7f1-c024ea99f90f",
                  "parentUUID": "6ab97c12-295c-4023-958c-5deac2a6f884",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting a wrong size Name should throw error",
                  "fullTitle": "Test on device.ts Testing the exceptions Setting a wrong size Name should throw error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let stringName = \"\";\nchai_1.expect(devTested.setName.bind(devTested, stringName)).to.throw(\"Invalid name\");\nstringName = \"trentre et plus de noms pour le test\";\nchai_1.expect(devTested.setName.bind(devTested, stringName)).to.throw(\"Invalid name\");",
                  "err": {},
                  "uuid": "55973c87-41c3-49c2-8577-ee02e11026d1",
                  "parentUUID": "6ab97c12-295c-4023-958c-5deac2a6f884",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting a wrong version number size should throw an error",
                  "fullTitle": "Test on device.ts Testing the exceptions Setting a wrong version number size should throw an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let stringVersion = \"1\";\nchai_1.expect(devTested.setVersion.bind(devTested, stringVersion)).to.throw(\"Invalid version\");\nstringVersion = \"11\";\nchai_1.expect(devTested.setVersion.bind(devTested, stringVersion)).to.throw(\"Invalid version\");\nstringVersion = \"8888888888.88888888888888888888\";\nchai_1.expect(devTested.setVersion.bind(devTested, stringVersion)).to.throw(\"Invalid version\");",
                  "err": {},
                  "uuid": "9dce851a-0b2c-4102-bf83-fcd6880931bf",
                  "parentUUID": "6ab97c12-295c-4023-958c-5deac2a6f884",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting a too long phone number size should throw an error",
                  "fullTitle": "Test on device.ts Testing the exceptions Setting a too long phone number size should throw an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stringVersion = \"123456789102487\"; //15 caracters maximum, to respect the +999787878787 form\nchai_1.expect(devTested.setPhone.bind(devTested, stringVersion)).to.throw(\"Invalid phone\");",
                  "err": {},
                  "uuid": "e6fba285-e5f7-4a4c-bad0-86375203c6cc",
                  "parentUUID": "6ab97c12-295c-4023-958c-5deac2a6f884",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3a1e124-16e6-4f9f-b7f1-c024ea99f90f",
                "55973c87-41c3-49c2-8577-ee02e11026d1",
                "9dce851a-0b2c-4102-bf83-fcd6880931bf",
                "e6fba285-e5f7-4a4c-bad0-86375203c6cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "4b6fcd3b-95d2-4673-9f7e-92e6ecd14fff",
            "bf69d287-26e8-45f2-b843-88b2bdbd8378"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e2519db5-bc5c-4e1a-b63d-7427a3078505",
          "title": "Tests on reservation.ts",
          "fullFile": "/Users/easycash/Loaner/tests/modeltests/reservationtest.ts",
          "file": "/tests/modeltests/reservationtest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Reservation creation",
              "fullTitle": "Tests on reservation.ts Reservation creation",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservation = new reservation_1.default(1, deviceRef, userId, startDate, endDate, returnDate);\nchai_1.assert.equal(reservation.getID(), 1);\nchai_1.assert.equal(reservation.getDevice(), deviceRef);\nchai_1.assert.equal(reservation.getUserID(), userId);\nchai_1.assert.equal(reservation.getStartDate().toISOString(), startDateISO);\nchai_1.assert.equal(reservation.getEndDate().toISOString(), endDateISO);\nchai_1.assert.isTrue(reservation.hasReturnDate());\nchai_1.assert.equal(reservation.getReturnDate().toISOString(), returnDateISO);",
              "err": {},
              "uuid": "76be22ef-9772-4c09-b45a-6f68516e10eb",
              "parentUUID": "e2519db5-bc5c-4e1a-b63d-7427a3078505",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reservation creation without return date",
              "fullTitle": "Tests on reservation.ts Reservation creation without return date",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservation = new reservation_1.default(1, deviceRef, userId, startDate, endDate);\nchai_1.assert.equal(reservation.getID(), 1);\nchai_1.assert.equal(reservation.getDevice(), deviceRef);\nchai_1.assert.equal(reservation.getUserID(), userId);\nchai_1.assert.equal(reservation.getStartDate().toISOString(), startDateISO);\nchai_1.assert.equal(reservation.getEndDate().toISOString(), endDateISO);\nchai_1.assert.isFalse(reservation.hasReturnDate());\nchai_1.expect(reservation.getReturnDate).to.throw(Error);",
              "err": {},
              "uuid": "f65cd2f3-8975-4fec-be6f-9aaf215c5f43",
              "parentUUID": "e2519db5-bc5c-4e1a-b63d-7427a3078505",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid ID throw an error",
              "fullTitle": "Tests on reservation.ts Invalid ID throw an error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => new reservation_1.default(-1, deviceRef, userId, startDate, endDate)).to.throw(\"Invalid ID\");",
              "err": {},
              "uuid": "ea107e9e-4c17-4f8e-a8c1-2e7dd8950d62",
              "parentUUID": "e2519db5-bc5c-4e1a-b63d-7427a3078505",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid device reference throw an error",
              "fullTitle": "Tests on reservation.ts Invalid device reference throw an error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => new reservation_1.default(1, \"PASVALIDE\", userId, startDate, endDate)).to.throw(\"Invalid device reference\");",
              "err": {},
              "uuid": "95550998-8c78-494b-8373-3c34e206405e",
              "parentUUID": "e2519db5-bc5c-4e1a-b63d-7427a3078505",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid user id throw an error",
              "fullTitle": "Tests on reservation.ts Invalid user id throw an error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => new reservation_1.default(1, deviceRef, \"INVAL\", startDate, endDate)).to.throw(\"Invalid user id\");",
              "err": {},
              "uuid": "703301ae-f148-401d-b684-b9bb91f6defe",
              "parentUUID": "e2519db5-bc5c-4e1a-b63d-7427a3078505",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid start date throw an error",
              "fullTitle": "Tests on reservation.ts Invalid start date throw an error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errMsg = \"Invalid start date\";\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, \"jenefaispas10caracteresdelong\", endDate)).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, \"0123456789\", endDate)).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, \"0-20-0\", endDate)).to.throw(errMsg);",
              "err": {},
              "uuid": "4570619b-4e77-4d80-af9f-c2c15c0312a6",
              "parentUUID": "e2519db5-bc5c-4e1a-b63d-7427a3078505",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid end date throw an error",
              "fullTitle": "Tests on reservation.ts Invalid end date throw an error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errMsg = \"Invalid end date\";\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, \"jenefaispas10caracteresdelong\")).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, \"0123456789\")).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, \"0-20-0\")).to.throw(errMsg);",
              "err": {},
              "uuid": "61dab198-5bef-4bd6-b6d5-2d2f974e76de",
              "parentUUID": "e2519db5-bc5c-4e1a-b63d-7427a3078505",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid return date throw an error",
              "fullTitle": "Tests on reservation.ts Invalid return date throw an error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errMsg = \"Invalid return date\";\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, endDate, \"jenefaispas10caracteresdelong\")).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, endDate, \"0123456789\")).to.throw(errMsg);\nchai_1.expect(() => new reservation_1.default(1, deviceRef, userId, startDate, endDate, \"0-20-0\")).to.throw(errMsg);",
              "err": {},
              "uuid": "8c932d5a-3679-437f-b7d8-5683df527bda",
              "parentUUID": "e2519db5-bc5c-4e1a-b63d-7427a3078505",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return date can be empty",
              "fullTitle": "Tests on reservation.ts Return date can be empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservation = new reservation_1.default(1, deviceRef, userId, startDate, endDate, \"\");\nchai_1.assert.isFalse(reservation.hasReturnDate());",
              "err": {},
              "uuid": "6ee8b03c-6ab9-492d-b34f-bc7162d9de0f",
              "parentUUID": "e2519db5-bc5c-4e1a-b63d-7427a3078505",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Method convertDate works",
              "fullTitle": "Tests on reservation.ts Method convertDate works",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.assert.equal(reservation_1.default.convertDate(new Date(startDateISO)), startDate);\nchai_1.assert.equal(reservation_1.default.convertDate(new Date(endDateISO)), endDate);\nchai_1.assert.equal(reservation_1.default.convertDate(new Date(returnDateISO)), returnDate);",
              "err": {},
              "uuid": "9471ada2-9a32-4d77-bb6a-1c185d95c529",
              "parentUUID": "e2519db5-bc5c-4e1a-b63d-7427a3078505",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Generate correct lockDays",
              "fullTitle": "Tests on reservation.ts Generate correct lockDays",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reservation1 = new reservation_1.default(1, deviceRef, userId, startDate, endDate);\nchai_1.expect(reservation1.getLockDays()).to.deep.equal([startDate, endDate]);\nconst reservation2 = new reservation_1.default(1, deviceRef, userId, startDate, returnDate);\nchai_1.expect(reservation2.getLockDays()).to.deep.equal([startDate, returnDate]);",
              "err": {},
              "uuid": "618ab4e5-74e6-4449-a23f-69be112e0d09",
              "parentUUID": "e2519db5-bc5c-4e1a-b63d-7427a3078505",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76be22ef-9772-4c09-b45a-6f68516e10eb",
            "f65cd2f3-8975-4fec-be6f-9aaf215c5f43",
            "ea107e9e-4c17-4f8e-a8c1-2e7dd8950d62",
            "95550998-8c78-494b-8373-3c34e206405e",
            "703301ae-f148-401d-b684-b9bb91f6defe",
            "4570619b-4e77-4d80-af9f-c2c15c0312a6",
            "61dab198-5bef-4bd6-b6d5-2d2f974e76de",
            "8c932d5a-3679-437f-b7d8-5683df527bda",
            "6ee8b03c-6ab9-492d-b34f-bc7162d9de0f",
            "9471ada2-9a32-4d77-bb6a-1c185d95c529",
            "618ab4e5-74e6-4449-a23f-69be112e0d09"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a29f0753-1701-4f03-9ea4-682c41b9d946",
          "title": "Tests on user.ts",
          "fullFile": "/Users/easycash/Loaner/tests/modeltests/usertest.ts",
          "file": "/tests/modeltests/usertest.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "User Creation test",
              "fullTitle": "Tests on user.ts User Creation test",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.assert.equal(userTested.getId(), \"0000001\");\nchai_1.assert.equal(userTested.getFirstName(), \"Test\");\nchai_1.assert.equal(userTested.getLastName(), \"UserTest\");\nchai_1.assert.equal(userTested.getEmail(), \"test@gmail.com\");\nchai_1.assert.equal(userTested.isAdmin(), false);",
              "err": {},
              "uuid": "b5c94d2f-04b0-4c70-bfc7-bac8b04d776b",
              "parentUUID": "a29f0753-1701-4f03-9ea4-682c41b9d946",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Device Modification test",
              "fullTitle": "Tests on user.ts Device Modification test",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userTested.setId(\"0000002\");\nuserTested.setFirstName(\"Milan\");\nuserTested.setLastName(\"Bourbe\");\nuserTested.setEmail(\"MilanBourbe@guez.com\");\nuserTested.setAdmin(true);\nchai_1.assert.equal(userTested.getId(), \"0000002\");\nchai_1.assert.equal(userTested.getFirstName(), \"Milan\");\nchai_1.assert.equal(userTested.getLastName(), \"Bourbe\");\nchai_1.assert.equal(userTested.getEmail(), \"MilanBourbe@guez.com\");\nchai_1.assert.equal(userTested.isAdmin(), true);",
              "err": {},
              "uuid": "0c4d04f2-5226-4947-800a-00df61eed0f6",
              "parentUUID": "a29f0753-1701-4f03-9ea4-682c41b9d946",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "0481d0cc-985b-4c85-bce1-5dcee39625cd",
              "title": "Testing exceptions",
              "fullFile": "/Users/easycash/Loaner/tests/modeltests/usertest.ts",
              "file": "/tests/modeltests/usertest.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Setting an ID lower than 0 should throw an error",
                  "fullTitle": "Tests on user.ts Testing exceptions Setting an ID lower than 0 should throw an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(userTested.setId.bind(userTested, \"-1\")).to.throw(Error);",
                  "err": {},
                  "uuid": "7f342d88-27fe-4384-90dc-e428cecc9e26",
                  "parentUUID": "0481d0cc-985b-4c85-bce1-5dcee39625cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting an empty firstname should throw an error",
                  "fullTitle": "Tests on user.ts Testing exceptions Setting an empty firstname should throw an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(userTested.setFirstName.bind(userTested, \"\")).to.throw(Error);",
                  "err": {},
                  "uuid": "db063d05-81c4-47c2-b8b0-480ef5ce3a70",
                  "parentUUID": "0481d0cc-985b-4c85-bce1-5dcee39625cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting an empty Lastname should throw an error",
                  "fullTitle": "Tests on user.ts Testing exceptions Setting an empty Lastname should throw an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(userTested.setLastName.bind(userTested, \"\")).to.throw(Error);",
                  "err": {},
                  "uuid": "b8906625-aae6-46fe-95fe-4be942a7267b",
                  "parentUUID": "0481d0cc-985b-4c85-bce1-5dcee39625cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Setting an invalid email form should throw an error",
                  "fullTitle": "Tests on user.ts Testing exceptions Setting an invalid email form should throw an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.expect(userTested.setEmail.bind(userTested, \"test@test@test.fr\")).to.throw(Error);\nchai_1.expect(userTested.setEmail.bind(userTested, \"testtesttest.fr\")).to.throw(Error);\nchai_1.expect(userTested.setEmail.bind(userTested, \"test@.test@test.fr\")).to.throw(Error);\nchai_1.expect(userTested.setEmail.bind(userTested, \"test.test@testfr\")).to.throw(Error);",
                  "err": {},
                  "uuid": "bf29c0ae-afba-4f3b-ba55-4d2046db8176",
                  "parentUUID": "0481d0cc-985b-4c85-bce1-5dcee39625cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f342d88-27fe-4384-90dc-e428cecc9e26",
                "db063d05-81c4-47c2-b8b0-480ef5ce3a70",
                "b8906625-aae6-46fe-95fe-4be942a7267b",
                "bf29c0ae-afba-4f3b-ba55-4d2046db8176"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "b5c94d2f-04b0-4c70-bfc7-bac8b04d776b",
            "0c4d04f2-5226-4947-800a-00df61eed0f6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a7cd8b03-7ef4-4ea1-ae31-e48cf7fda66d",
          "title": "POST /auth/login",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/auth_route_test.ts",
          "file": "/tests/routestests/auth_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"POST /auth/login\"",
              "fullTitle": "POST /auth/login \"before all\" hook in \"POST /auth/login\"",
              "timedOut": false,
              "duration": 24,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "b5d63415-17eb-4c54-9f3f-8d034c4f0190",
              "parentUUID": "a7cd8b03-7ef4-4ea1-ae31-e48cf7fda66d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "authentification works",
              "fullTitle": "POST /auth/login authentification works",
              "timedOut": false,
              "duration": 137,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/login')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"lilianb@mail.fr\",\n    password: \"fromage\"\n})\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    var _a;\n    if (!res.body.auth)\n        throw new Error(\"No field 'auth' specified\");\n    if (!res.body.token || res.body.token.length == 0)\n        throw new Error(\"Empty token returned\");\n    if (!res.body.user || res.body.user.id !== \"ABCDEFG\")\n        throw new Error(\"Invalid user returned\");\n    const token = ((_a = res.body.token) === null || _a === void 0 ? void 0 : _a.toString()) || \"\";\n    const decoded = jwt.verify(token, config.jwtSecret);\n    const id = decoded['id'] || \"\";\n    if (!decoded || id != \"ABCDEFG\")\n        throw new Error(\"Invalid token\");\n})\n    .end(done);",
              "err": {},
              "uuid": "c3e792e6-0c50-4925-8a67-d89bcc5be551",
              "parentUUID": "a7cd8b03-7ef4-4ea1-ae31-e48cf7fda66d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when already have a token",
              "fullTitle": "POST /auth/login responds error when already have a token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/login')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    email: \"lilianb@mail.fr\",\n    password: \"fromage\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"You already have a token\"\n}, done);",
              "err": {},
              "uuid": "69a6784b-dd49-4e56-a237-ba8e71ff3ba8",
              "parentUUID": "a7cd8b03-7ef4-4ea1-ae31-e48cf7fda66d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when email is invalid",
              "fullTitle": "POST /auth/login responds error when email is invalid",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/login')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"paslabonneadresse@mail.fr\",\n    password: \"fromage\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name or password\"\n}, done);",
              "err": {},
              "uuid": "940597d0-121b-43a2-9151-ad26287b781d",
              "parentUUID": "a7cd8b03-7ef4-4ea1-ae31-e48cf7fda66d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when password is invalid",
              "fullTitle": "POST /auth/login responds error when password is invalid",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/login')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"lilianb@mail.fr\",\n    password: \"paslebonmdp\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name or password\"\n}, done);",
              "err": {},
              "uuid": "50ab176c-5085-47de-a1e8-79a064b5bf1c",
              "parentUUID": "a7cd8b03-7ef4-4ea1-ae31-e48cf7fda66d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c3e792e6-0c50-4925-8a67-d89bcc5be551",
            "69a6784b-dd49-4e56-a237-ba8e71ff3ba8",
            "940597d0-121b-43a2-9151-ad26287b781d",
            "50ab176c-5085-47de-a1e8-79a064b5bf1c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 255,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dca9e704-459f-4f49-ba3d-a1d39cb49a7a",
          "title": "POST /auth/password/change",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/auth_route_test.ts",
          "file": "/tests/routestests/auth_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /auth/password/change\"",
              "fullTitle": "POST /auth/password/change \"before each\" hook in \"POST /auth/password/change\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "3beac622-dfb3-4463-9d1f-0e2cac1b9674",
              "parentUUID": "dca9e704-459f-4f49-ba3d-a1d39cb49a7a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error if new password is empty",
              "fullTitle": "POST /auth/password/change responds error if new password is empty",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/password/change')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"lilianb@mail.fr\",\n    oldPassword: \"fromage\",\n    newPassword: \"\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"New password can't be empty\"\n}, done);",
              "err": {},
              "uuid": "78fdbf09-7596-4456-993e-ed5140ac64bd",
              "parentUUID": "dca9e704-459f-4f49-ba3d-a1d39cb49a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error if old password is incorrect",
              "fullTitle": "POST /auth/password/change responds error if old password is incorrect",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/password/change')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"lilianb@mail.fr\",\n    oldPassword: \"paslebon\",\n    newPassword: \"salade\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name or old password\"\n}, done);",
              "err": {},
              "uuid": "5be6884e-24a5-46c6-8e39-4158e4afb3b3",
              "parentUUID": "dca9e704-459f-4f49-ba3d-a1d39cb49a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error if email is incorrect",
              "fullTitle": "POST /auth/password/change responds error if email is incorrect",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/password/change')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .send({\n    email: \"paslebon@mail.fr\",\n    oldPassword: \"fromage\",\n    newPassword: \"salade\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name or old password\"\n}, done);",
              "err": {},
              "uuid": "6c01b967-2943-4834-ae83-b0276fd8e3a0",
              "parentUUID": "dca9e704-459f-4f49-ba3d-a1d39cb49a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /auth/password/change responds error with no token",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "250ef8cb-05ee-41b6-be9e-cd3f82687209",
              "parentUUID": "dca9e704-459f-4f49-ba3d-a1d39cb49a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /auth/password/change responds error with invalid token",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "cb3480e0-6290-450f-8fb4-2d0ae46f62a8",
              "parentUUID": "dca9e704-459f-4f49-ba3d-a1d39cb49a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid user ID token",
              "fullTitle": "POST /auth/password/change responds error with invalid user ID token",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", token)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid user\"\n}, done);",
              "err": {},
              "uuid": "2aa16e04-6938-481a-8d25-3709980a9454",
              "parentUUID": "dca9e704-459f-4f49-ba3d-a1d39cb49a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "password change works",
              "fullTitle": "POST /auth/password/change password change works",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/auth/password/change')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    email: \"lilianb@mail.fr\",\n    oldPassword: \"fromage\",\n    newPassword: \"salade\"\n})\n    .expect('Content-Type', /json/)\n    .expect(201, {\n    success: true,\n    user: {\n        id: \"ABCDEFG\",\n        firstName: \"Lilian\",\n        lastName: \"Bethus\",\n        email: \"lilianb@mail.fr\",\n        admin: true,\n        temporaryPassword: false\n    }\n}, done);",
              "err": {},
              "uuid": "2e07dbee-b371-40fa-82ea-cefa32af909e",
              "parentUUID": "dca9e704-459f-4f49-ba3d-a1d39cb49a7a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78fdbf09-7596-4456-993e-ed5140ac64bd",
            "5be6884e-24a5-46c6-8e39-4158e4afb3b3",
            "6c01b967-2943-4834-ae83-b0276fd8e3a0",
            "250ef8cb-05ee-41b6-be9e-cd3f82687209",
            "cb3480e0-6290-450f-8fb4-2d0ae46f62a8",
            "2aa16e04-6938-481a-8d25-3709980a9454",
            "2e07dbee-b371-40fa-82ea-cefa32af909e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 657,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e5774b1c-762c-4157-9c8b-93ad9c8f9d46",
          "title": "PUT /category/add/:category_name",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/category_route_test.ts",
          "file": "/tests/routestests/category_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"PUT /category/add/:category_name\"",
              "fullTitle": "PUT /category/add/:category_name \"before each\" hook in \"PUT /category/add/:category_name\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "56817ad9-fff2-4386-92ca-c0d370fe9e5b",
              "parentUUID": "e5774b1c-762c-4157-9c8b-93ad9c8f9d46",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when too long name is given",
              "fullTitle": "PUT /category/add/:category_name responds error when too long name is given",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/category/add/' + new Array(257).join(\"A\"))\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid name\"\n}, done);",
              "err": {},
              "uuid": "2bebd8e6-d287-4450-ac82-f495ae873b22",
              "parentUUID": "e5774b1c-762c-4157-9c8b-93ad9c8f9d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when category name already exists",
              "fullTitle": "PUT /category/add/:category_name responds error when category name already exists",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/category/add/Ordinateurs')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Category name already exists\"\n}, done);",
              "err": {},
              "uuid": "fe79f866-2664-4d8c-a390-022753bd2552",
              "parentUUID": "e5774b1c-762c-4157-9c8b-93ad9c8f9d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "PUT /category/add/:category_name responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "9233e016-b510-43f7-b01b-04a892b984ba",
              "parentUUID": "e5774b1c-762c-4157-9c8b-93ad9c8f9d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "PUT /category/add/:category_name responds error with invalid token",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "b3423628-04e0-473c-8e72-cccff18624b2",
              "parentUUID": "e5774b1c-762c-4157-9c8b-93ad9c8f9d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "PUT /category/add/:category_name responds error with not admin privileges token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "e7fa1800-ac70-4784-b381-8f6b15ff9ca3",
              "parentUUID": "e5774b1c-762c-4157-9c8b-93ad9c8f9d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "adding category works",
              "fullTitle": "PUT /category/add/:category_name adding category works",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/category/add/Test')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "cb27b7fd-cb11-4a0a-a90a-be09e61e2426",
              "parentUUID": "e5774b1c-762c-4157-9c8b-93ad9c8f9d46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2bebd8e6-d287-4450-ac82-f495ae873b22",
            "fe79f866-2664-4d8c-a390-022753bd2552",
            "9233e016-b510-43f7-b01b-04a892b984ba",
            "b3423628-04e0-473c-8e72-cccff18624b2",
            "e7fa1800-ac70-4784-b381-8f6b15ff9ca3",
            "cb27b7fd-cb11-4a0a-a90a-be09e61e2426"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cd58f995-e393-4252-ab65-02762b550af6",
          "title": "POST /category/modify",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/category_route_test.ts",
          "file": "/tests/routestests/category_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /category/modify\"",
              "fullTitle": "POST /category/modify \"before each\" hook in \"POST /category/modify\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "b6e09549-c97d-4a14-8f6a-3f16bea91ea1",
              "parentUUID": "cd58f995-e393-4252-ab65-02762b550af6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when not existing category name is given",
              "fullTitle": "POST /category/modify responds error when not existing category name is given",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/category/modify')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    oldName: \"Existepas\",\n    newName: \"Existepasnonplus\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid category name\"\n}, done);",
              "err": {},
              "uuid": "28b5ebc8-848d-4bdb-b4ee-f7c53ed1925f",
              "parentUUID": "cd58f995-e393-4252-ab65-02762b550af6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when old name is equals to new name",
              "fullTitle": "POST /category/modify responds error when old name is equals to new name",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/category/modify')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    oldName: \"Ordinateurs\",\n    newName: \"Ordinateurs\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Old name can't be the equal to new name\"\n}, done);",
              "err": {},
              "uuid": "bf521b04-c841-4253-b56c-c18e29ad4d82",
              "parentUUID": "cd58f995-e393-4252-ab65-02762b550af6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when new name already exists",
              "fullTitle": "POST /category/modify responds error when new name already exists",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/category/modify')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    oldName: \"Ordinateurs\",\n    newName: \"Téléphones\"\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"New name is already set for a category\"\n}, done);",
              "err": {},
              "uuid": "98ac4971-d43a-4bb1-ab5c-a8ee71d5ca1b",
              "parentUUID": "cd58f995-e393-4252-ab65-02762b550af6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /category/modify responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "cf0cc86b-20f7-468d-b7ee-3d0d6de1ac3f",
              "parentUUID": "cd58f995-e393-4252-ab65-02762b550af6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /category/modify responds error with invalid token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "38bd0196-735d-4019-94a6-d502b57d13c1",
              "parentUUID": "cd58f995-e393-4252-ab65-02762b550af6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "POST /category/modify responds error with not admin privileges token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "9e7e9bf8-5396-4678-857e-fe90362837e5",
              "parentUUID": "cd58f995-e393-4252-ab65-02762b550af6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "modifying category works",
              "fullTitle": "POST /category/modify modifying category works",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/category/modify')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    oldName: \"Ordinateurs\",\n    newName: \"Courgette\"\n})\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "87d91e04-270d-49d3-8f6e-2caaa2d5f803",
              "parentUUID": "cd58f995-e393-4252-ab65-02762b550af6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "28b5ebc8-848d-4bdb-b4ee-f7c53ed1925f",
            "bf521b04-c841-4253-b56c-c18e29ad4d82",
            "98ac4971-d43a-4bb1-ab5c-a8ee71d5ca1b",
            "cf0cc86b-20f7-468d-b7ee-3d0d6de1ac3f",
            "38bd0196-735d-4019-94a6-d502b57d13c1",
            "9e7e9bf8-5396-4678-857e-fe90362837e5",
            "87d91e04-270d-49d3-8f6e-2caaa2d5f803"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 52,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "137b2446-2ac0-4209-8047-7b627f4098a8",
          "title": "POST /category/delete/:id_category",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/category_route_test.ts",
          "file": "/tests/routestests/category_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /category/delete/:id_category\"",
              "fullTitle": "POST /category/delete/:id_category \"before each\" hook in \"POST /category/delete/:id_category\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "2a3d024b-edb4-4991-8d6d-57065c61b686",
              "parentUUID": "137b2446-2ac0-4209-8047-7b627f4098a8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when category ID is not a number",
              "fullTitle": "POST /category/delete/:id_category responds error when category ID is not a number",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/category/delete/PASUNNOMBRE')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Category ID is not a number\"\n}, done);",
              "err": {},
              "uuid": "68fc646b-b305-4c52-a046-271321fda3ea",
              "parentUUID": "137b2446-2ac0-4209-8047-7b627f4098a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when category ID doesnt exists",
              "fullTitle": "POST /category/delete/:id_category responds error when category ID doesnt exists",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/category/delete/99')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid category ID\"\n}, done);",
              "err": {},
              "uuid": "2c7398d0-a752-48d3-a607-e23a69596d2d",
              "parentUUID": "137b2446-2ac0-4209-8047-7b627f4098a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /category/delete/:id_category responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "f5849e81-3514-41db-a7c8-b6bdacf3b071",
              "parentUUID": "137b2446-2ac0-4209-8047-7b627f4098a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /category/delete/:id_category responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "2dd9ebc0-5c18-4a07-9f71-4d07c01fcfd7",
              "parentUUID": "137b2446-2ac0-4209-8047-7b627f4098a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "POST /category/delete/:id_category responds error with not admin privileges token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "d5bcdde9-19c1-41f0-8d2a-34e936ecec71",
              "parentUUID": "137b2446-2ac0-4209-8047-7b627f4098a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleting category works",
              "fullTitle": "POST /category/delete/:id_category deleting category works",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/category/delete/1')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "afb430ae-a3ae-4b92-979c-7b6d33459447",
              "parentUUID": "137b2446-2ac0-4209-8047-7b627f4098a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "68fc646b-b305-4c52-a046-271321fda3ea",
            "2c7398d0-a752-48d3-a607-e23a69596d2d",
            "f5849e81-3514-41db-a7c8-b6bdacf3b071",
            "2dd9ebc0-5c18-4a07-9f71-4d07c01fcfd7",
            "d5bcdde9-19c1-41f0-8d2a-34e936ecec71",
            "afb430ae-a3ae-4b92-979c-7b6d33459447"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "57f4f7ff-00c3-457b-bb9c-db4f0585525a",
          "title": "GET /devices/all",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /devices/all\"",
              "fullTitle": "GET /devices/all \"before all\" hook in \"GET /devices/all\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "30713a59-8f0a-467c-9613-af8c74b1889d",
              "parentUUID": "57f4f7ff-00c3-457b-bb9c-db4f0585525a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds with json",
              "fullTitle": "GET /devices/all responds with json",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, done);",
              "err": {},
              "uuid": "734a4d0c-bb3a-4e34-8265-9bd55ea6f844",
              "parentUUID": "57f4f7ff-00c3-457b-bb9c-db4f0585525a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /devices/all responds error with no token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "8c6f0acc-33c4-4a26-a2dd-1beeb93a7b17",
              "parentUUID": "57f4f7ff-00c3-457b-bb9c-db4f0585525a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /devices/all responds error with invalid token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "70aa3ee7-f501-4ca6-a3c2-8e8657c47eb4",
              "parentUUID": "57f4f7ff-00c3-457b-bb9c-db4f0585525a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations",
              "fullTitle": "GET /devices/all responds with correct devices informations",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: [{\n                    ref: \"AN001\",\n                    categoryID: 1,\n                    categoryName: \"Téléphones\",\n                    name: \"Samsung Galaxy S1000\",\n                    version: \"1.0\",\n                    photo: \"https://media.ldlc.com/r1600/ld/products/00/05/30/35/LD0005303584_2.jpg\",\n                    phone: \"0123456789\",\n                    lockDays: [\n                        [\"2021-01-05\", \"2021-01-08\"],\n                        [\"2021-01-09\", \"2021-02-08\"]\n                    ]\n                }, {\n                    ref: \"AN002\",\n                    categoryID: 1,\n                    categoryName: \"Téléphones\",\n                    name: \"Huawei P80\",\n                    version: \"1.1\",\n                    photo: \"https://media.ldlc.com/r1600/ld/products/00/05/39/99/LD0005399909_2.jpg\",\n                    phone: \"1234567890\",\n                    lockDays: []\n                }]\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: [{\n                    ref: \"PC001\",\n                    categoryID: 2,\n                    categoryName: \"Ordinateurs\",\n                    name: \"Acer Pro Max\",\n                    version: \"1.0\",\n                    photo: \"https://static.acer.com/up/Resource/Acer/Laptops/Spin_5/Image/20180824/acer-Spin_5_SP513-53N-main.png\",\n                    phone: \"\",\n                    lockDays: [\n                        [\"2021-01-04\", \"2021-02-04\"]\n                    ]\n                }]\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "4bfea465-2b32-44bc-88d3-a34976b1e4dc",
              "parentUUID": "57f4f7ff-00c3-457b-bb9c-db4f0585525a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "734a4d0c-bb3a-4e34-8265-9bd55ea6f844",
            "8c6f0acc-33c4-4a26-a2dd-1beeb93a7b17",
            "70aa3ee7-f501-4ca6-a3c2-8e8657c47eb4",
            "4bfea465-2b32-44bc-88d3-a34976b1e4dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fd213572-cb98-4aa8-aa0f-02a45833015e",
          "title": "GET /devices/:device_ref",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /devices/:device_ref\"",
              "fullTitle": "GET /devices/:device_ref \"before all\" hook in \"GET /devices/:device_ref\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "9b4f4eb9-9c6a-46ed-8588-30f370630a42",
              "parentUUID": "fd213572-cb98-4aa8-aa0f-02a45833015e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds with json",
              "fullTitle": "GET /devices/:device_ref responds with json",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/AN001')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, done);",
              "err": {},
              "uuid": "fcba94fa-347d-4307-8329-47da396083d6",
              "parentUUID": "fd213572-cb98-4aa8-aa0f-02a45833015e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when device reference is invalid",
              "fullTitle": "GET /devices/:device_ref responds error when device reference is invalid",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/PASBON')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid device reference\"\n}, done);",
              "err": {},
              "uuid": "bfc6ee68-c021-4b0f-8e0a-c03baeec9a8e",
              "parentUUID": "fd213572-cb98-4aa8-aa0f-02a45833015e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /devices/:device_ref responds error with no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "4aa07af5-0011-4cf3-ae10-59bb68b9ff32",
              "parentUUID": "fd213572-cb98-4aa8-aa0f-02a45833015e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /devices/:device_ref responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "a7992271-913f-4945-a28f-baa38558bf48",
              "parentUUID": "fd213572-cb98-4aa8-aa0f-02a45833015e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations",
              "fullTitle": "GET /devices/:device_ref responds with correct devices informations",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/AN001')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal({\n        ref: \"AN001\",\n        categoryID: 1,\n        categoryName: \"Téléphones\",\n        name: \"Samsung Galaxy S1000\",\n        version: \"1.0\",\n        photo: \"https://media.ldlc.com/r1600/ld/products/00/05/30/35/LD0005303584_2.jpg\",\n        phone: \"0123456789\",\n        lockDays: [\n            [\"2021-01-05\", \"2021-01-08\"],\n            [\"2021-01-09\", \"2021-02-08\"]\n        ]\n    });\n})\n    .end(done);",
              "err": {},
              "uuid": "ec4c2e08-0c95-49d1-987b-aca85ec97212",
              "parentUUID": "fd213572-cb98-4aa8-aa0f-02a45833015e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fcba94fa-347d-4307-8329-47da396083d6",
            "bfc6ee68-c021-4b0f-8e0a-c03baeec9a8e",
            "4aa07af5-0011-4cf3-ae10-59bb68b9ff32",
            "a7992271-913f-4945-a28f-baa38558bf48",
            "ec4c2e08-0c95-49d1-987b-aca85ec97212"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "568360d1-64f0-4a01-b977-e18aaf9cdc03",
          "title": "GET /devices/all?filter_name=filter_value&...",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /devices/all?filter_name=filter_value&...\"",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... \"before all\" hook in \"GET /devices/all?filter_name=filter_value&...\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "19cae633-7fcd-4614-ba58-ab922355a9e0",
              "parentUUID": "568360d1-64f0-4a01-b977-e18aaf9cdc03",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds nothing when device reference is invalid",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds nothing when device reference is invalid",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?ref=PABON')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: []\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: []\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "350b88e0-a6a2-4a69-a3e2-871b155557c2",
              "parentUUID": "568360d1-64f0-4a01-b977-e18aaf9cdc03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds nothing when device name is invalid",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds nothing when device name is invalid",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?name=PABON')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: []\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: []\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "1bdc2238-b140-40a4-a395-be584b004c8a",
              "parentUUID": "568360d1-64f0-4a01-b977-e18aaf9cdc03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when device category is invalid",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds error when device category is invalid",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?category=PABON')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid category name\"\n}, done);",
              "err": {},
              "uuid": "72d71ae7-4135-4bbe-980f-19dfd574cd1e",
              "parentUUID": "568360d1-64f0-4a01-b977-e18aaf9cdc03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds error with no token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "6810b17d-c9ba-4df6-9b6e-ec24425becee",
              "parentUUID": "568360d1-64f0-4a01-b977-e18aaf9cdc03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "eaf71730-4209-458e-9568-4366efb7a116",
              "parentUUID": "568360d1-64f0-4a01-b977-e18aaf9cdc03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations with ref only",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds with correct devices informations with ref only",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?ref=AN001')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: [{\n                    ref: \"AN001\",\n                    categoryID: 1,\n                    categoryName: \"Téléphones\",\n                    name: \"Samsung Galaxy S1000\",\n                    version: \"1.0\",\n                    photo: \"https://media.ldlc.com/r1600/ld/products/00/05/30/35/LD0005303584_2.jpg\",\n                    phone: \"0123456789\",\n                    lockDays: [\n                        [\"2021-01-05\", \"2021-01-08\"],\n                        [\"2021-01-09\", \"2021-02-08\"]\n                    ]\n                }]\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: []\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "2785d9e5-8c20-48e8-a554-97cb7c2a0fef",
              "parentUUID": "568360d1-64f0-4a01-b977-e18aaf9cdc03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations with name only",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds with correct devices informations with name only",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?name=Samsung Galaxy S1000')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: [{\n                    ref: \"AN001\",\n                    categoryID: 1,\n                    categoryName: \"Téléphones\",\n                    name: \"Samsung Galaxy S1000\",\n                    version: \"1.0\",\n                    photo: \"https://media.ldlc.com/r1600/ld/products/00/05/30/35/LD0005303584_2.jpg\",\n                    phone: \"0123456789\",\n                    lockDays: [\n                        [\"2021-01-05\", \"2021-01-08\"],\n                        [\"2021-01-09\", \"2021-02-08\"]\n                    ]\n                }]\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: []\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "f6ed0e38-bd32-42d2-9225-757318f81ab5",
              "parentUUID": "568360d1-64f0-4a01-b977-e18aaf9cdc03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations with category only",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds with correct devices informations with category only",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?category=Ordinateurs')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: []\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: [{\n                    ref: \"PC001\",\n                    categoryID: 2,\n                    categoryName: \"Ordinateurs\",\n                    name: \"Acer Pro Max\",\n                    version: \"1.0\",\n                    photo: \"https://static.acer.com/up/Resource/Acer/Laptops/Spin_5/Image/20180824/acer-Spin_5_SP513-53N-main.png\",\n                    phone: \"\",\n                    lockDays: [[\"2021-01-04\", \"2021-02-04\"]]\n                }]\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "c1f61af9-761c-498f-ae65-abccdbd2edb3",
              "parentUUID": "568360d1-64f0-4a01-b977-e18aaf9cdc03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct devices informations with all filters",
              "fullTitle": "GET /devices/all?filter_name=filter_value&... responds with correct devices informations with all filters",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/devices/all?ref=PC001&name=Acer Pro Max&category=Ordinateurs')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .expect(function (res) {\n    chai_1.expect(res.body).to.deep.equal([{\n            ID: 1,\n            name: \"Téléphones\",\n            devices: []\n        }, {\n            ID: 2,\n            name: \"Ordinateurs\",\n            devices: [{\n                    ref: \"PC001\",\n                    categoryID: 2,\n                    categoryName: \"Ordinateurs\",\n                    name: \"Acer Pro Max\",\n                    version: \"1.0\",\n                    photo: \"https://static.acer.com/up/Resource/Acer/Laptops/Spin_5/Image/20180824/acer-Spin_5_SP513-53N-main.png\",\n                    phone: \"\",\n                    lockDays: [[\"2021-01-04\", \"2021-02-04\"]]\n                }]\n        }, {\n            ID: 3,\n            name: \"Tablettes\",\n            devices: []\n        }]);\n})\n    .end(done);",
              "err": {},
              "uuid": "cc0c1d7b-19a2-4597-98ff-2f5ec75e31b6",
              "parentUUID": "568360d1-64f0-4a01-b977-e18aaf9cdc03",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "350b88e0-a6a2-4a69-a3e2-871b155557c2",
            "1bdc2238-b140-40a4-a395-be584b004c8a",
            "72d71ae7-4135-4bbe-980f-19dfd574cd1e",
            "6810b17d-c9ba-4df6-9b6e-ec24425becee",
            "eaf71730-4209-458e-9568-4366efb7a116",
            "2785d9e5-8c20-48e8-a554-97cb7c2a0fef",
            "f6ed0e38-bd32-42d2-9225-757318f81ab5",
            "c1f61af9-761c-498f-ae65-abccdbd2edb3",
            "cc0c1d7b-19a2-4597-98ff-2f5ec75e31b6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 61,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a0babea9-0972-487f-b109-71c314160bd6",
          "title": "POST /devices/borrow/:id_utilisateur",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /devices/borrow/:id_utilisateur\"",
              "fullTitle": "POST /devices/borrow/:id_utilisateur \"before each\" hook in \"POST /devices/borrow/:id_utilisateur\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "1c86890e-389b-416f-95fb-5b2225997bb2",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when startDate is after endDate",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when startDate is after endDate",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2021-02-30\", \"2021-02-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Start date is after end date\"\n}, done);",
              "err": {},
              "uuid": "837f12e8-26e5-4717-9746-aa95b2681000",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when no commands are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when no commands are given",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"No commands given\"\n}, done);",
              "err": {},
              "uuid": "cd27abf3-e1a9-4a6b-bf47-acb4fff0798f",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when no reference are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when no reference are given",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            loanDays: [\"2021-01-02\", \"2021-01-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"No reference given\"\n}, done);",
              "err": {},
              "uuid": "02fce962-f0ca-4be6-b1d8-3484877ccc84",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when no loanDays are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when no loanDays are given",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\"\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"No loanDays given\"\n}, done);",
              "err": {},
              "uuid": "370396fc-410d-4564-b4b5-484229735863",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when loanDays is not an array",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when loanDays is not an array",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: 67\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid loanDays\"\n}, done);",
              "err": {},
              "uuid": "b2305c29-6d63-418d-8470-0a9d6d20f310",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when less than two loanDays are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when less than two loanDays are given",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2020-04-12\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid loanDays count\"\n}, done);",
              "err": {},
              "uuid": "719016db-85ef-469a-b6a5-f88bac20fa23",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when more than two loanDays are given",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when more than two loanDays are given",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2020-04-12\", \"2020-04-14\", \"2020-04-16\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid loanDays count\"\n}, done);",
              "err": {},
              "uuid": "5970f503-39a7-4df9-b768-bf42fe2b3605",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when there already is a reservation in the given period",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when there already is a reservation in the given period",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2021-01-02\", \"2021-01-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Reservation already exists\"\n}, done);",
              "err": {},
              "uuid": "7886bc1e-a0d2-42d2-be42-5ee894ce29d3",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when start date is invalid",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when start date is invalid",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"01-s\", \"2021-01-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid start date\"\n}, done);",
              "err": {},
              "uuid": "cf441725-3f1d-4be0-b50c-82ad20fe95cc",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when end date is invalid",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error when end date is invalid",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2021-01-20\", \"20-s\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid end date\"\n}, done);",
              "err": {},
              "uuid": "853cde4d-bf7a-48ed-8286-1637929da215",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error with no token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "bd0e1bb4-b9ae-4fc2-9a48-286cadb06a85",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error with invalid token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "529aac9a-30ac-4b4e-9528-c98f26205d4e",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid user ID token",
              "fullTitle": "POST /devices/borrow/:id_utilisateur responds error with invalid user ID token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", token)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid user\"\n}, done);",
              "err": {},
              "uuid": "0aca3cfa-67e8-4521-8708-487b2d4aa832",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "borrow devices works",
              "fullTitle": "POST /devices/borrow/:id_utilisateur borrow devices works",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [{\n            reference: \"AN001\",\n            loanDays: [\"2021-05-05\", \"2021-05-15\"]\n        }]\n})\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "39ca0536-6503-499e-a48f-4681f7be7c59",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "borrow multiple devices works",
              "fullTitle": "POST /devices/borrow/:id_utilisateur borrow multiple devices works",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/devices/borrow/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    commands: [\n        {\n            reference: \"AN001\",\n            loanDays: [\"2021-05-05\", \"2021-05-15\"]\n        },\n        {\n            reference: \"AN002\",\n            loanDays: [\"2021-05-05\", \"2021-05-15\"]\n        }\n    ]\n})\n    .expect('Content-Type', /json/)\n    .expect(201, done);",
              "err": {},
              "uuid": "a31c18c8-6f86-41c7-9e21-4e1eb2670b64",
              "parentUUID": "a0babea9-0972-487f-b109-71c314160bd6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "837f12e8-26e5-4717-9746-aa95b2681000",
            "cd27abf3-e1a9-4a6b-bf47-acb4fff0798f",
            "02fce962-f0ca-4be6-b1d8-3484877ccc84",
            "370396fc-410d-4564-b4b5-484229735863",
            "b2305c29-6d63-418d-8470-0a9d6d20f310",
            "719016db-85ef-469a-b6a5-f88bac20fa23",
            "5970f503-39a7-4df9-b768-bf42fe2b3605",
            "7886bc1e-a0d2-42d2-be42-5ee894ce29d3",
            "cf441725-3f1d-4be0-b50c-82ad20fe95cc",
            "853cde4d-bf7a-48ed-8286-1637929da215",
            "bd0e1bb4-b9ae-4fc2-9a48-286cadb06a85",
            "529aac9a-30ac-4b4e-9528-c98f26205d4e",
            "0aca3cfa-67e8-4521-8708-487b2d4aa832",
            "39ca0536-6503-499e-a48f-4681f7be7c59",
            "a31c18c8-6f86-41c7-9e21-4e1eb2670b64"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 83,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "745b027e-56ef-49a3-b1b5-fe82c88230ee",
          "title": "PUT /devices/add/",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"PUT /devices/add/\"",
              "fullTitle": "PUT /devices/add/ \"before each\" hook in \"PUT /devices/add/\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "e752ebc4-81d5-4a4d-b5a7-00c71e05b997",
              "parentUUID": "745b027e-56ef-49a3-b1b5-fe82c88230ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when category name is invalid",
              "fullTitle": "PUT /devices/add/ responds error when category name is invalid",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"AN003\",\n    name: \"Honor 10\",\n    category: \"EXISTEPAS\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Invalid category name\"\n}, done);",
              "err": {},
              "uuid": "72157a57-f88f-4b0c-b8f0-4dabb329f0a6",
              "parentUUID": "745b027e-56ef-49a3-b1b5-fe82c88230ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when reference is invalid",
              "fullTitle": "PUT /devices/add/ responds error when reference is invalid",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"PASVALIDE\",\n    name: \"Honor 10\",\n    category: \"Téléphones\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Invalid reference\"\n}, done);",
              "err": {},
              "uuid": "80f60fa2-90f8-46dd-8aad-1220cfc05102",
              "parentUUID": "745b027e-56ef-49a3-b1b5-fe82c88230ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when reference is missing",
              "fullTitle": "PUT /devices/add/ responds error when reference is missing",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    name: \"Honor 10\",\n    category: \"Téléphones\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Missing reference\"\n}, done);",
              "err": {},
              "uuid": "d5aad969-8083-47ab-b440-e6819fc36d89",
              "parentUUID": "745b027e-56ef-49a3-b1b5-fe82c88230ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when category is missing",
              "fullTitle": "PUT /devices/add/ responds error when category is missing",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"AN003\",\n    name: \"Honor 10\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Missing category name\"\n}, done);",
              "err": {},
              "uuid": "c9a8cd4b-4cdb-4bcd-9a9b-52a864cee1fb",
              "parentUUID": "745b027e-56ef-49a3-b1b5-fe82c88230ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error when reference already exists",
              "fullTitle": "PUT /devices/add/ responds error when reference already exists",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"AN001\",\n    name: \"Honor 10\",\n    category: \"Téléphones\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(400, {\n    error: true,\n    message: \"Device reference is already used\"\n}, done);",
              "err": {},
              "uuid": "9545793a-26db-4f53-b7b8-43cc56da1fa0",
              "parentUUID": "745b027e-56ef-49a3-b1b5-fe82c88230ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "PUT /devices/add/ responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "05e0d318-21c7-40b8-b2ea-0ac28b0a2d9e",
              "parentUUID": "745b027e-56ef-49a3-b1b5-fe82c88230ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "PUT /devices/add/ responds error with invalid token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "42a4da3b-3916-4834-ad05-ee013d14d6ef",
              "parentUUID": "745b027e-56ef-49a3-b1b5-fe82c88230ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "PUT /devices/add/ responds error with not admin privileges token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "5015654e-2ffe-42a4-8c5c-3fb57e5a5c3c",
              "parentUUID": "745b027e-56ef-49a3-b1b5-fe82c88230ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "adding device works",
              "fullTitle": "PUT /devices/add/ adding device works",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/devices/add')\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    ref: \"AN003\",\n    name: \"Honor 10\",\n    category: \"Téléphones\",\n    version: \"1.0\",\n    photo: \"\",\n    phone: \"+33606060606\"\n})\n    .expect(201, done);",
              "err": {},
              "uuid": "5fb92d14-2a3e-45d1-a147-53f08524b06d",
              "parentUUID": "745b027e-56ef-49a3-b1b5-fe82c88230ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "72157a57-f88f-4b0c-b8f0-4dabb329f0a6",
            "80f60fa2-90f8-46dd-8aad-1220cfc05102",
            "d5aad969-8083-47ab-b440-e6819fc36d89",
            "c9a8cd4b-4cdb-4bcd-9a9b-52a864cee1fb",
            "9545793a-26db-4f53-b7b8-43cc56da1fa0",
            "05e0d318-21c7-40b8-b2ea-0ac28b0a2d9e",
            "42a4da3b-3916-4834-ad05-ee013d14d6ef",
            "5015654e-2ffe-42a4-8c5c-3fb57e5a5c3c",
            "5fb92d14-2a3e-45d1-a147-53f08524b06d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 35,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a9bc7dd1-fd8a-48e8-a235-059fd0c19f0b",
          "title": "DELETE /devices/delete/:device_id",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/device_route_test.ts",
          "file": "/tests/routestests/device_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"DELETE /devices/delete/:device_id\"",
              "fullTitle": "DELETE /devices/delete/:device_id \"before each\" hook in \"DELETE /devices/delete/:device_id\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "2c409542-9f5a-4ca4-ab26-0bb5944f5aac",
              "parentUUID": "a9bc7dd1-fd8a-48e8-a235-059fd0c19f0b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when device reference is invalid",
              "fullTitle": "DELETE /devices/delete/:device_id responds error when device reference is invalid",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/devices/delete/PASVALID')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect(400, {\n    error: true,\n    message: \"Invalid device reference\"\n}, done);",
              "err": {},
              "uuid": "102ddddf-d82b-460f-9d77-07ea7c6157e3",
              "parentUUID": "a9bc7dd1-fd8a-48e8-a235-059fd0c19f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "DELETE /devices/delete/:device_id responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "d0360eba-94dc-45f9-8b0d-9c52390b1aca",
              "parentUUID": "a9bc7dd1-fd8a-48e8-a235-059fd0c19f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "DELETE /devices/delete/:device_id responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "3cc1b23e-32d3-4d08-809e-938c88e80c24",
              "parentUUID": "a9bc7dd1-fd8a-48e8-a235-059fd0c19f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "DELETE /devices/delete/:device_id responds error with not admin privileges token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "b85643dc-aea1-4272-a557-3588d9078bb5",
              "parentUUID": "a9bc7dd1-fd8a-48e8-a235-059fd0c19f0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleting a device works",
              "fullTitle": "DELETE /devices/delete/:device_id deleting a device works",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/devices/delete/AN001')\n    .set(\"x-access-token\", helper.getToken())\n    .expect(201, done);",
              "err": {},
              "uuid": "883948e2-e4ef-4084-aa9d-d907efee8e1e",
              "parentUUID": "a9bc7dd1-fd8a-48e8-a235-059fd0c19f0b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "102ddddf-d82b-460f-9d77-07ea7c6157e3",
            "d0360eba-94dc-45f9-8b0d-9c52390b1aca",
            "3cc1b23e-32d3-4d08-809e-938c88e80c24",
            "b85643dc-aea1-4272-a557-3588d9078bb5",
            "883948e2-e4ef-4084-aa9d-d907efee8e1e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 35,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9484d9fb-677c-4efb-86ea-48eed688689c",
          "title": "GET /user/all",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /user/all\"",
              "fullTitle": "GET /user/all \"before all\" hook in \"GET /user/all\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "cd521d5e-da1f-4e69-ace4-446f31146f18",
              "parentUUID": "9484d9fb-677c-4efb-86ea-48eed688689c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error with no token",
              "fullTitle": "GET /user/all responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "05065d4b-31dd-42c3-8cd4-4be916fb5457",
              "parentUUID": "9484d9fb-677c-4efb-86ea-48eed688689c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /user/all responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "b4d435f4-a6fb-4a4e-a051-28e07a4280cd",
              "parentUUID": "9484d9fb-677c-4efb-86ea-48eed688689c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "GET /user/all responds error with not admin privileges token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "c9c246c8-9efc-45e6-b6be-7590d714b95e",
              "parentUUID": "9484d9fb-677c-4efb-86ea-48eed688689c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with json",
              "fullTitle": "GET /user/all responds with json",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/all')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, done);",
              "err": {},
              "uuid": "77c8873e-aa06-4a0d-b441-e64eca8b60d2",
              "parentUUID": "9484d9fb-677c-4efb-86ea-48eed688689c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct users informations",
              "fullTitle": "GET /user/all responds with correct users informations",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/all')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, [{\n        id: \"ABCDEFG\",\n        firstName: \"Lilian\",\n        lastName: \"Bethus\",\n        email: \"lilianb@mail.fr\",\n        admin: true,\n        temporaryPassword: false\n    },\n    {\n        id: \"HIJKLMN\",\n        firstName: \"Milan\",\n        lastName: \"Pasquereau\",\n        email: \"mpsqr@mail.fr\",\n        admin: false,\n        temporaryPassword: false\n    }], done);",
              "err": {},
              "uuid": "affc06df-63d8-4d65-bec9-a31352333b73",
              "parentUUID": "9484d9fb-677c-4efb-86ea-48eed688689c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05065d4b-31dd-42c3-8cd4-4be916fb5457",
            "b4d435f4-a6fb-4a4e-a051-28e07a4280cd",
            "c9c246c8-9efc-45e6-b6be-7590d714b95e",
            "77c8873e-aa06-4a0d-b441-e64eca8b60d2",
            "affc06df-63d8-4d65-bec9-a31352333b73"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "67fc5cb3-cb1d-46f0-8320-294a515ec025",
          "title": "GET /user/:userId",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /user/:userId\"",
              "fullTitle": "GET /user/:userId \"before all\" hook in \"GET /user/:userId\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "5ea24211-94b4-4f01-8f2c-4a3f74f2e5d0",
              "parentUUID": "67fc5cb3-cb1d-46f0-8320-294a515ec025",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds with json",
              "fullTitle": "GET /user/:userId responds with json",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, done);",
              "err": {},
              "uuid": "aa404909-b6cb-4478-94ae-234bbaa38b6c",
              "parentUUID": "67fc5cb3-cb1d-46f0-8320-294a515ec025",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds with correct user informations",
              "fullTitle": "GET /user/:userId responds with correct user informations",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/ABCDEFG')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, {\n    id: \"ABCDEFG\",\n    firstName: \"Lilian\",\n    lastName: \"Bethus\",\n    email: \"lilianb@mail.fr\",\n    admin: true,\n    temporaryPassword: false\n}, done);",
              "err": {},
              "uuid": "b9638cb8-d139-4133-bfad-43e913c68d90",
              "parentUUID": "67fc5cb3-cb1d-46f0-8320-294a515ec025",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid ID",
              "fullTitle": "GET /user/:userId responds error for invalid ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/invalid')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Cannot find results\"\n}, done);",
              "err": {},
              "uuid": "567f8c55-aa76-4ca4-a0f6-044ae4f75bef",
              "parentUUID": "67fc5cb3-cb1d-46f0-8320-294a515ec025",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /user/:userId responds error with no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "6c3ccee9-bf2a-407a-aa16-1b8ab81dbc12",
              "parentUUID": "67fc5cb3-cb1d-46f0-8320-294a515ec025",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /user/:userId responds error with invalid token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "1614731a-33ad-4998-8663-77899accd4c9",
              "parentUUID": "67fc5cb3-cb1d-46f0-8320-294a515ec025",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "GET /user/:userId responds error with not admin privileges token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "05213d8f-e704-4bbd-a72e-ffd4f207ca5b",
              "parentUUID": "67fc5cb3-cb1d-46f0-8320-294a515ec025",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa404909-b6cb-4478-94ae-234bbaa38b6c",
            "b9638cb8-d139-4133-bfad-43e913c68d90",
            "567f8c55-aa76-4ca4-a0f6-044ae4f75bef",
            "6c3ccee9-bf2a-407a-aa16-1b8ab81dbc12",
            "1614731a-33ad-4998-8663-77899accd4c9",
            "05213d8f-e704-4bbd-a72e-ffd4f207ca5b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4088e205-69ba-4e3f-8f36-632589ec900d",
          "title": "PUT /user/add",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"PUT /user/add\"",
              "fullTitle": "PUT /user/add \"before each\" hook in \"PUT /user/add\"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "d2120060-1423-4d26-a24f-96e1f28ba491",
              "parentUUID": "4088e205-69ba-4e3f-8f36-632589ec900d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error when trying to add user with already existing id",
              "fullTitle": "PUT /user/add responds error when trying to add user with already existing id",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"ABCDEFG\",\n    firstName: \"Marche\",\n    lastName: \"Pas\",\n    email: \"rien@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this ID already exists\"\n}, done);",
              "err": {},
              "uuid": "655d32ef-c670-4322-bcae-3d47cc6e19df",
              "parentUUID": "4088e205-69ba-4e3f-8f36-632589ec900d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid ID",
              "fullTitle": "PUT /user/add responds error for invalid ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"INVAL\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"jdupont@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid ID\"\n}, done);",
              "err": {},
              "uuid": "8b1e9dc2-13dc-4998-b5ee-6010c63827fe",
              "parentUUID": "4088e205-69ba-4e3f-8f36-632589ec900d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid email",
              "fullTitle": "PUT /user/add responds error for invalid email",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"TESTTE1\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"cecinestpasunmail.correct\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"Invalid email\"\n}, done);",
              "err": {},
              "uuid": "7389ef05-5663-4f20-ad3c-4637b0fc9e06",
              "parentUUID": "4088e205-69ba-4e3f-8f36-632589ec900d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid user with already existing email",
              "fullTitle": "PUT /user/add responds error for invalid user with already existing email",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"TESTTE2\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"lilianb@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this email already exists\"\n}, done);",
              "err": {},
              "uuid": "1d50b03e-31f0-4085-9172-a343bac14463",
              "parentUUID": "4088e205-69ba-4e3f-8f36-632589ec900d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "PUT /user/add responds error with no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "5cf617b8-a94a-491e-9523-a075dd306cb0",
              "parentUUID": "4088e205-69ba-4e3f-8f36-632589ec900d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "PUT /user/add responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "7f6f2c2e-88f7-491f-9ffd-75c2e876271d",
              "parentUUID": "4088e205-69ba-4e3f-8f36-632589ec900d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "PUT /user/add responds error with not admin privileges token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "d98929e6-a0ef-487c-8a2f-e519f7a331e0",
              "parentUUID": "4088e205-69ba-4e3f-8f36-632589ec900d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "user creation works",
              "fullTitle": "PUT /user/add user creation works",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .put('/api/users/add')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"TESTTE3\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"jdupont@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(201, () => {\n    supertest_1.default(server_1.app)\n        .get('/api/users/TESTTE3')\n        .set('Accept', 'application/json')\n        .set(\"x-access-token\", helper.getToken())\n        .expect('Content-Type', /json/)\n        .expect(200, {\n        id: \"TESTTE3\",\n        firstName: \"Jean\",\n        lastName: \"Dupont\",\n        email: \"jdupont@mail.fr\",\n        admin: false,\n        temporaryPassword: true\n    }, done);\n});",
              "err": {},
              "uuid": "d923434b-8ddf-41c3-98b6-9015357c2f7c",
              "parentUUID": "4088e205-69ba-4e3f-8f36-632589ec900d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "655d32ef-c670-4322-bcae-3d47cc6e19df",
            "8b1e9dc2-13dc-4998-b5ee-6010c63827fe",
            "7389ef05-5663-4f20-ad3c-4637b0fc9e06",
            "1d50b03e-31f0-4085-9172-a343bac14463",
            "5cf617b8-a94a-491e-9523-a075dd306cb0",
            "7f6f2c2e-88f7-491f-9ffd-75c2e876271d",
            "d98929e6-a0ef-487c-8a2f-e519f7a331e0",
            "d923434b-8ddf-41c3-98b6-9015357c2f7c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 146,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ba9f576f-df5d-4e8d-8d41-ed555dfd96d5",
          "title": "POST /user/modify",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST /user/modify\"",
              "fullTitle": "POST /user/modify \"before each\" hook in \"POST /user/modify\"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "5483d9d1-94fd-4fc2-a6e5-ac4502f47d4e",
              "parentUUID": "ba9f576f-df5d-4e8d-8d41-ed555dfd96d5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error for invalid user ID",
              "fullTitle": "POST /user/modify responds error for invalid user ID",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/users/modify')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"INVALID\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"jdupont@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this ID doesn't exists\"\n}, done);",
              "err": {},
              "uuid": "03934bf1-abdc-4612-8372-f27ac0758323",
              "parentUUID": "ba9f576f-df5d-4e8d-8d41-ed555dfd96d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error for invalid user with already existing email",
              "fullTitle": "POST /user/modify responds error for invalid user with already existing email",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/users/modify')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"HIJKLMN\",\n    firstName: \"Jean\",\n    lastName: \"Dupont\",\n    email: \"lilianb@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this email already exists\"\n}, done);",
              "err": {},
              "uuid": "69954215-8661-4ec4-938c-49f121afeea8",
              "parentUUID": "ba9f576f-df5d-4e8d-8d41-ed555dfd96d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "POST /user/modify responds error with no token",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "ed0b191d-37f9-4f79-a2f9-bc1ef4ac57a1",
              "parentUUID": "ba9f576f-df5d-4e8d-8d41-ed555dfd96d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "POST /user/modify responds error with invalid token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "9ec65eea-62f6-4761-8e83-9a0d720f0e38",
              "parentUUID": "ba9f576f-df5d-4e8d-8d41-ed555dfd96d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "POST /user/modify responds error with not admin privileges token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "77d1474a-9557-467b-92db-e067c6c41f9d",
              "parentUUID": "ba9f576f-df5d-4e8d-8d41-ed555dfd96d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "user modification works",
              "fullTitle": "POST /user/modify user modification works",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .post('/api/users/modify')\n    .set('Content-Type', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .send({\n    id: \"HIJKLMN\",\n    firstName: \"M\",\n    lastName: \"P\",\n    email: \"psqrm@mail.fr\",\n    admin: false\n})\n    .expect('Content-Type', /json/)\n    .expect(201, () => {\n    supertest_1.default(server_1.app)\n        .get('/api/users/HIJKLMN')\n        .set('Accept', 'application/json')\n        .set(\"x-access-token\", helper.getToken())\n        .expect('Content-Type', /json/)\n        .expect(200, {\n        id: \"HIJKLMN\",\n        firstName: \"M\",\n        lastName: \"P\",\n        email: \"psqrm@mail.fr\",\n        admin: false,\n        temporaryPassword: false\n    }, done);\n});",
              "err": {},
              "uuid": "0bd0a988-947d-4568-aa3e-d38504615acb",
              "parentUUID": "ba9f576f-df5d-4e8d-8d41-ed555dfd96d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "03934bf1-abdc-4612-8372-f27ac0758323",
            "69954215-8661-4ec4-938c-49f121afeea8",
            "ed0b191d-37f9-4f79-a2f9-bc1ef4ac57a1",
            "9ec65eea-62f6-4761-8e83-9a0d720f0e38",
            "77d1474a-9557-467b-92db-e067c6c41f9d",
            "0bd0a988-947d-4568-aa3e-d38504615acb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 48,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "87b929d7-9f8d-41f9-978f-182fd73bd1da",
          "title": "DELETE /user/delete/:userId",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"DELETE /user/delete/:userId\"",
              "fullTitle": "DELETE /user/delete/:userId \"before each\" hook in \"DELETE /user/delete/:userId\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "d9158979-8797-4217-a00b-ef1f7f02a49c",
              "parentUUID": "87b929d7-9f8d-41f9-978f-182fd73bd1da",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error with invalid user id",
              "fullTitle": "DELETE /user/delete/:userId responds error with invalid user id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/users/delete/INVALID')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this ID doesn't exists\"\n}, done);",
              "err": {},
              "uuid": "5b791a24-c99c-4d39-afb8-1d86b793c231",
              "parentUUID": "87b929d7-9f8d-41f9-978f-182fd73bd1da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "DELETE /user/delete/:userId responds error with no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "3325f883-8a05-467d-9b79-9cedcb395eb8",
              "parentUUID": "87b929d7-9f8d-41f9-978f-182fd73bd1da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "DELETE /user/delete/:userId responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "b42d9013-30aa-4495-9843-a4c59288b2c5",
              "parentUUID": "87b929d7-9f8d-41f9-978f-182fd73bd1da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "DELETE /user/delete/:userId responds error with not admin privileges token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "10e59143-3535-4419-ae78-4f6fb8255e17",
              "parentUUID": "87b929d7-9f8d-41f9-978f-182fd73bd1da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "user deletion works",
              "fullTitle": "DELETE /user/delete/:userId user deletion works",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .delete('/api/users/delete/HIJKLMN')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(201, () => {\n    supertest_1.default(server_1.app)\n        .get('/api/users/HIJKLMN')\n        .set('Accept', 'application/json')\n        .set(\"x-access-token\", helper.getToken())\n        .expect('Content-Type', /json/)\n        .expect(400, {\n        error: true,\n        message: \"Cannot find results\"\n    }, done);\n});",
              "err": {},
              "uuid": "cb69d7da-cd41-484c-b6ba-bbe94ca99914",
              "parentUUID": "87b929d7-9f8d-41f9-978f-182fd73bd1da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b791a24-c99c-4d39-afb8-1d86b793c231",
            "3325f883-8a05-467d-9b79-9cedcb395eb8",
            "b42d9013-30aa-4495-9843-a4c59288b2c5",
            "10e59143-3535-4419-ae78-4f6fb8255e17",
            "cb69d7da-cd41-484c-b6ba-bbe94ca99914"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cdfe78cd-9db3-49a9-b7bc-901f77ba544c",
          "title": "GET /user/:userId/history",
          "fullFile": "/Users/easycash/Loaner/tests/routestests/user_route_test.ts",
          "file": "/tests/routestests/user_route_test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"GET /user/:userId/history\"",
              "fullTitle": "GET /user/:userId/history \"before each\" hook in \"GET /user/:userId/history\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        yield create_db_1.default();\n    })",
              "err": {},
              "uuid": "1d2d344d-e064-40b5-8ca2-085cd9d08153",
              "parentUUID": "cdfe78cd-9db3-49a9-b7bc-901f77ba544c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "responds error with invalid user id",
              "fullTitle": "GET /user/:userId/history responds error with invalid user id",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/INVALID/history')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(400, {\n    error: true,\n    message: \"User with this ID doesn't exists\"\n}, done);",
              "err": {},
              "uuid": "ebeb6f71-37db-4654-9ef7-31579b268535",
              "parentUUID": "cdfe78cd-9db3-49a9-b7bc-901f77ba544c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with no token",
              "fullTitle": "GET /user/:userId/history responds error with no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test.set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"No token specified\"\n}, done);",
              "err": {},
              "uuid": "343aed2d-4dc7-4895-9a44-f457e31c7a3e",
              "parentUUID": "cdfe78cd-9db3-49a9-b7bc-901f77ba544c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with invalid token",
              "fullTitle": "GET /user/:userId/history responds error with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", invalidToken)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"Invalid token\"\n}, done);",
              "err": {},
              "uuid": "c44dc6ba-f166-47de-af3e-3a5048060c57",
              "parentUUID": "cdfe78cd-9db3-49a9-b7bc-901f77ba544c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "responds error with not admin privileges token",
              "fullTitle": "GET /user/:userId/history responds error with not admin privileges token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "test\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", tokenNoAdmin)\n    .expect('Content-Type', /json/)\n    .expect(401, {\n    error: true,\n    message: \"This endpoint requires admin privileges\"\n}, done);",
              "err": {},
              "uuid": "7a8e591c-961b-45f7-94d5-1c1ecc3a3532",
              "parentUUID": "cdfe78cd-9db3-49a9-b7bc-901f77ba544c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "user history works",
              "fullTitle": "GET /user/:userId/history user history works",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "supertest_1.default(server_1.app)\n    .get('/api/users/ABCDEFG/history')\n    .set('Accept', 'application/json')\n    .set(\"x-access-token\", helper.getToken())\n    .expect('Content-Type', /json/)\n    .expect(200, [{\n        ID: 2,\n        endDate: \"2021-01-12\",\n        idUser: \"ABCDEFG\",\n        refDevice: \"PC001\",\n        returnDate: \"2021-02-04\",\n        startDate: \"2021-01-04\"\n    }], done);",
              "err": {},
              "uuid": "9abaf5aa-2f6d-41e4-b4c9-b4465d427837",
              "parentUUID": "cdfe78cd-9db3-49a9-b7bc-901f77ba544c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ebeb6f71-37db-4654-9ef7-31579b268535",
            "343aed2d-4dc7-4895-9a44-f457e31c7a3e",
            "c44dc6ba-f166-47de-af3e-3a5048060c57",
            "7a8e591c-961b-45f7-94d5-1c1ecc3a3532",
            "9abaf5aa-2f6d-41e4-b4c9-b4465d427837"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "8a7f810b-0023-4c34-adce-e2b61dc4b02b",
        "bcf65328-4b9e-4fc2-a699-c19a8e7acb31",
        "7923cea4-475c-470e-a6a5-dd5c92c505d6",
        "487a3d08-bbec-4299-a912-603ecba131a2",
        "1ee06864-5cd3-49b1-bd23-77c9bb1365c2",
        "7b240da6-9e92-4456-906f-9b91f9b474a6",
        "0bf69de8-bff7-4d80-a994-1dc973d9a30d"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}